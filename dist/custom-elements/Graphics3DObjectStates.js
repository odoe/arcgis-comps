import { dg as n, aL as u, eZ as a$1, eq as C, e_ as h, e$ as y, f0 as q, f1 as b, e as e$2, d as d$1, i, ah as p$1, aE as u$1, X as n$1, er as f, r, f2 as n$2 } from './index.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const a=.05;class c{constructor(){this._extents=new n({allocator:t=>t||u()}),this._tmpExtent=u(),this._dirty=!1;}get empty(){return 0===this._extents.length}get size(){return this._extents.length}clear(){this._extents.clear();}add(t){this.contains(t)||(this.removeContained(t),a$1(this._extents.pushNew(),t),this._dirty=!0);}pop(){return this._dirty&&this.mergeTight(),this._extents.pop()}merge(t){return this.mergeTight(t),t.hasProgressed}mergeTight(t=C){const e=this._extents,o=new Set;let i=0;for(;i!==e.length;){e.sort(((t,e)=>t[0]-e[0])),i=e.length,o.clear();for(let i=0;i<e.length;++i){if(t.done)return;const h$1=e.getItemAt(i);for(let t=i+1;t<e.length;++t){const r=e.getItemAt(t);if(r[0]>=h$1[2])break;o.add(r);}o.forEach((i=>{if(h$1===i)return;if(i[2]<=h$1[0])return void o.delete(i);const c=y(h$1),g=y(i),m=this._tmpExtent;h(h$1,i,m);const d=c+g;(y(m)-d)/d<a&&(a$1(h$1,m),o.delete(i),e.remove(i),t.madeProgress());})),o.add(h$1);}}this._dirty=!1;}contains(t){return this._extents.some((e=>q(e,t)))}removeContained(t){this._extents.filterInPlace((e=>!q(t,e)));}get test(){const t=this;return {containsPoint:e=>t._extents.some((t=>b(t,e)))}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
let p=class extends p$1{constructor(){super(...arguments),this.dirtyExtents=new c,this.globalDirty=!1,this.averageExtentUpdateSize=0,this.dirtyGraphicsSet=new Set,this.handles=new u$1,this.updateElevation=!1,this.layerView=null,this.graphicsCore=null,this.events=new n$1;}setup(t,e,i,s){this.layerView=t,this.queryGraphicUIDsInExtent=e,this.graphicsCore=i,this.elevationProvider=s;const r=this.layerView.view.resourceController.scheduler;this.handles.add([s.on("elevation-change",(t=>this._elevationChanged(t))),this.layerView.watch("suspended",(()=>this.suspendedChange())),r.registerTask(f.ELEVATION_ALIGNMENT,this)]);}destroy(){this.dirtyGraphicsSet.clear(),this.handles.destroy(),this.handles=null,this.layerView=null,this.graphicsCore=null,this.queryGraphicUIDsInExtent=null;}clear(){this.dirtyGraphicsSet.clear(),this.notifyChange("updating");}suspendedChange(){!0===this.layerView.suspended?this.updateElevation=!1:!1===this.layerView.suspended&&this.updateElevation&&(this.globalDirty=!0,this.notifyChange("updating"));}elevationInfoChange(){this.globalDirty=!0,this.notifyChange("updating");}get updating(){return this.running}get running(){return this.dirtyGraphicsSet.size>0||this.dirtyExtents&&!this.dirtyExtents.empty||this.globalDirty}get updatingRemaining(){return this.dirtyGraphicsSet.size+this.dirtyExtents.size*this.averageExtentUpdateSize}runTask(t){for(this.globalDirty&&(this.markAllGraphicsElevationDirty(),this.globalDirty=!1,t.madeProgress()),t.run((()=>this.dirtyExtents.merge(t)));this.running&&!t.done;)this._updateDirtyGraphics(t),this._updateDirtyExtents(t);this.layerView.view.deconflictor.setDirty(),this.notifyChange("updating");}_updateDirtyGraphics(t){const e=this.layerView.view.renderCoordsHelper,i=0===this.graphicsCore.effectiveUpdatePolicy;for(const s of this.dirtyGraphicsSet.keys()){const a=this.graphicsCore.getGraphics3DGraphicById(s);if(this.dirtyGraphicsSet.delete(s),r(a)&&(a.alignWithElevation(this.elevationProvider,e,i),t.madeProgress()),t.done)return}}_updateDirtyExtents(t){for(;!this.dirtyExtents.empty&&!t.done;){const e=this.dirtyExtents.pop(),i=this.elevationProvider.spatialReference;this.events.emit("invalidate-elevation",{extent:e,spatialReference:i});const s=this.dirtyGraphicsSet.size;this.queryGraphicUIDsInExtent(e,i,(t=>{const e=this.graphicsCore.getGraphics3DGraphicById(t);r(e)&&e.needsElevationUpdates()&&this.dirtyGraphicsSet.add(t);})),this.averageExtentUpdateSize=.1*(this.dirtyGraphicsSet.size-s)+.9*this.averageExtentUpdateSize,t.madeProgress();}}markAllGraphicsElevationDirty(){this.dirtyExtents.clear(),this.dirtyGraphicsSet.clear(),this.graphicsCore.graphics3DGraphics.forEach(((t,e)=>this.dirtyGraphicsSet.add(e)));}_elevationChanged(t){if("scene"===t.context&&(!this.graphicsCore.layer.elevationInfo||"relative-to-scene"!==this.graphicsCore.layer.elevationInfo.mode))return;const{extent:e,spatialReference:i}=t;if(this.layerView.suspended){if(!this.updateElevation){const t=this.graphicsCore.computedExtent;t&&e[2]>t.xmin&&e[0]<t.xmax&&e[3]>t.ymin&&e[1]<t.ymax&&(this.updateElevation=!0);}this.events.emit("invalidate-elevation",{extent:e,spatialReference:i});}else e[0]===-1/0?this.globalDirty=!0:this.dirtyExtents.add(e),this.notifyChange("updating");}};e$2([d$1({readOnly:!0})],p.prototype,"updating",null),e$2([d$1({readOnly:!0})],p.prototype,"updatingRemaining",null),p=e$2([i("esri.views.3d.layers.graphics.Graphics3DElevationAlignment")],p);const d=p;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
class e$1{constructor(){this.items=[];}addObject(e,t){this.items.push({type:0,objectStateId:t,object:e});}addRenderGeometry(e,t,s){this.items.push({type:1,objectStateId:t,renderGeometry:e,owner:s});}addExternal(e,t){this.items.push({type:2,objectStateId:t,remove:e});}remove(e){for(let t=this.items.length-1;t>=0;--t){const s=this.items[t];s.objectStateId===e&&(this._removeObjectStateItem(s),this.items.splice(t,1));}}removeObject(e){for(let t=this.items.length-1;t>=0;--t){const s=this.items[t];0===s.type&&s.object===e&&(this._removeObjectStateItem(s),this.items.splice(t,1));}}removeRenderGeometry(e){for(let t=this.items.length-1;t>=0;--t){const s=this.items[t];1===s.type&&s.renderGeometry===e&&(this._removeObjectStateItem(s),this.items.splice(t,1));}}removeAll(){this.items.forEach((e=>{this._removeObjectStateItem(e);})),this.items=[];}_removeObjectStateItem(e){switch(e.type){case 0:0===e.objectStateId.channel?e.object.removeHighlight(e.objectStateId):1===e.objectStateId.channel&&e.object.removeOcclude(e.objectStateId);break;case 1:e.owner.removeRenderGeometryObjectState(e.renderGeometry,e.objectStateId);break;case 2:e.remove(e.objectStateId);}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
class e{constructor(e,i){this.stateType=e,this.objectIdField=i,this.objectStateSet=new e$1,this.ids=new Set,this.paused=!1;}hasGraphic(t){if(this.objectIdField){const e=t.graphic.attributes[this.objectIdField];return this.ids.has(e)}return this.ids.has(t.graphic.uid)}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
class s{constructor(t){this._graphicsCore=t,this._stateSets=new Array;}destroy(){this._stateSets&&this._stateSets.forEach((t=>t.objectStateSet.removeAll())),this._stateSets=null;}acquireSet(s,a){const i=new e(s,a);this._stateSets.push(i);const h=n$2((()=>this.releaseSet(i)));return {set:i,handle:h}}releaseSet(t){t.objectStateSet.removeAll();const e=this._stateSets?this._stateSets.indexOf(t):-1;-1!==e&&this._stateSets.splice(e,1);}_addObjectStateSet(t,e){t.addObjectStateSet(e.stateType,e.objectStateSet);}_removeObjectStateSet(t,e){t.removeObjectState(e.objectStateSet);}setUid(t,e){t.ids.add(e);const s=this._graphicsCore.graphics3DGraphics.get(e);s&&this._addObjectStateSet(s,t);}setUids(t,e){e.forEach((e=>this.setUid(t,e)));}setObjectIds(t,e){e.forEach((e=>t.ids.add(e))),this.initializeSet(t);}addGraphic(t){this._stateSets.forEach((e=>{!e.paused&&e.hasGraphic(t)&&this._addObjectStateSet(t,e);}));}removeGraphic(t){this._stateSets.forEach((e=>{e.hasGraphic(t)&&this._removeObjectStateSet(t,e);}));}allGraphicsDeleted(){this._stateSets&&this._stateSets.forEach((t=>t.objectStateSet.removeAll()));}initializeSet(t){const e=this._graphicsCore.graphics3DGraphics;t.objectIdField?e.forEach((e=>{e&&t.hasGraphic(e)&&this._addObjectStateSet(e,t);})):t.ids.forEach((s=>{const a=e.get(s);a&&this._addObjectStateSet(a,t);}));}get test(){return {states:this._stateSets}}}

export { d, s };
