import{ad as r,s as e}from"./p-e58503d5.js";import{B as t}from"./p-efbca0ca.js";import{a as n,n as o}from"./p-2e37d910.js";import"./p-53bb6ab4.js";import"./p-c048b814.js";import"./p-b79fcce3.js";import"./p-7ca40eac.js";async function i(n=null,o){var i,a;if(r.geometryServiceUrl)return r.geometryServiceUrl;if(!n)throw new e("internal:geometry-service-url-not-configured");let c;c="portal"in n?n.portal||t.getDefault():n,await c.load({signal:o});const s=null==(i=c.helperServices)||null==(a=i.geometry)?void 0:a.url;if(!s)throw new e("internal:geometry-service-url-not-configured");return s}async function a(r,t,a=null,c){const s=await i(a,c),l=new n;l.geometries=[r],l.outSpatialReference=t;const p=await o(s,l,{signal:c});if(p&&Array.isArray(p)&&1===p.length)return p[0];throw new e("internal:geometry-service-projection-failed")}export{i as getGeometryServiceURL,a as projectGeometry}