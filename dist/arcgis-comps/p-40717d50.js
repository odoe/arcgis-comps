import{dh as e,aj as t,Q as s,ch as r,ad as o,e as i,d as a,a2 as p,_ as l,i as n,A as m}from"./p-e58503d5.js";import{m as d,n as u,y as c,S as y}from"./p-8bc9b36a.js";import{l as h}from"./p-d208934e.js";import{b as j}from"./p-3e39c093.js";import{i as f}from"./p-a24f7752.js";import{y as v,j as b,c as S,f as g}from"./p-1ab449fc.js";import{w as C}from"./p-e44bd0a6.js";import{n as x}from"./p-fe68aab5.js";import{s as G}from"./p-c6970847.js";import{a as w}from"./p-7a658388.js";import"./p-53bb6ab4.js";import"./p-a9a30646.js";import"./p-765e6c28.js";import"./p-b79fcce3.js";import"./p-e273719b.js";import"./p-74de0937.js";import"./p-2f398ed1.js";import"./p-d3105731.js";import"./p-fb38a9d0.js";import"./p-f94762ac.js";import"./p-ea916a39.js";import"./p-8a919d07.js";import"./p-efbca0ca.js";import"./p-8747982c.js";import"./p-ccdb8e80.js";import"./p-7a5bfd29.js";import"./p-a6c8fb32.js";import"./p-6b2eb7a7.js";import"./p-01e5a461.js";import"./p-e654504b.js";import"./p-0eb619a6.js";const P=["atom","xml"],k={base:w,key:"type",typeMap:{"simple-line":d},errorContext:"symbol"},F={base:w,key:"type",typeMap:{"picture-marker":u,"simple-marker":c},errorContext:"symbol"},M={base:w,key:"type",typeMap:{"simple-fill":y},errorContext:"symbol"};let R=class extends(f(x(v(C(G(h(j))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const s=e.layerDefinition.drawingInfo.renderer.symbol;s&&"esriSFS"===s.type&&null!=(t=s.outline)&&t.style.includes("esriSFS")&&(s.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const t=this._get("title");return t&&"defaults"!==this.originOf("title")?t:this.url?e(this.url,P)||"GeoRSS":t||""}set title(e){this._set("title",e)}load(e){const s=m(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(t).then((()=>this._fetchService(s))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const i=this.spatialReference,{data:a}=await s(o.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:r(i)?void 0:null!=(t=i.wkid)?t:JSON.stringify(i)},signal:e});return a}_hasGeometry(e){var t,s;return null!=(t=null==(s=this.featureCollections)?void 0:s.some((t=>{var s,r;return(null==(s=t.featureSet)?void 0:s.geometryType)===e&&(null==(r=t.featureSet.features)?void 0:r.length)>0})))&&t}};i([a()],R.prototype,"description",void 0),i([a()],R.prototype,"featureCollections",void 0),i([p("service","featureCollections",["featureCollection.layers"])],R.prototype,"readFeatureCollections",null),i([a({type:l,json:{name:"lookAtExtent"}})],R.prototype,"fullExtent",void 0),i([a(b)],R.prototype,"id",void 0),i([a(S)],R.prototype,"legendEnabled",void 0),i([a({types:k,json:{write:!0}})],R.prototype,"lineSymbol",void 0),i([a({type:["show","hide"]})],R.prototype,"listMode",void 0),i([a({types:F,json:{write:!0}})],R.prototype,"pointSymbol",void 0),i([a({types:M,json:{write:!0}})],R.prototype,"polygonSymbol",void 0),i([a({type:["GeoRSS"]})],R.prototype,"operationalLayerType",void 0),i([a(g)],R.prototype,"url",void 0),i([a({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],R.prototype,"title",null),i([a({readOnly:!0,json:{read:!1},value:"geo-rss"})],R.prototype,"type",void 0),R=i([n("esri.layers.GeoRSSLayer")],R);const A=R;export default A;