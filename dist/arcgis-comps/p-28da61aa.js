import{bX as e,dx as t,H as r,ds as s,a1 as i,hv as n,dU as a,hw as o,hx as l,cy as c,cz as h,bb as m,hy as u,hz as y,V as f}from"./p-c8bc3433.js";import{C as M,G as p}from"./p-a989744e.js";import{m as d,s as g}from"./p-b0a11892.js";import{m as C}from"./p-bc184555.js";import"./p-84bf99cb.js";import"./p-429d3db0.js";import"./p-ea65d9c9.js";import"./p-47e1bd73.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";var I;!function(e){e.Legend="legend",e.Preview="preview"}(I||(I={}));const b=(e,t,r)=>{if(e&&e.targetSize){let s;if(r){const t=Math.max(r.frame.xmax-r.frame.xmin,r.frame.ymax-r.frame.ymin);s=e.targetSize/i(t)}else s=e.targetSize/t.referenceSize;return s}return e&&e.scaleFactor?e.scaleFactor:1},w={fill:{legend:{frame:{xmax:15,xmin:0,ymax:15,ymin:0},geometry:{rings:[[[0,15],[15,7.5],[15,0],[0,0],[0,15]]]},canvasPaths:{rings:[[[0,15],[0,0],[15,7.5],[15,15],[0,15]]]}},preview:{frame:{xmax:100,xmin:0,ymax:100,ymin:0},geometry:{rings:[[[0,100],[100,100],[100,0],[0,0],[0,100]]]},canvasPaths:{rings:[[[0,100],[0,0],[100,0],[100,100],[0,100]]]}}},stroke:{legend:{frame:{xmax:24,xmin:0,ymax:2,ymin:-2},geometry:{paths:[[[0,0],[12,0],[24,0]]]},canvasPaths:{paths:[[[0,2],[12,2],[24,2]]]}},preview:{frame:{xmax:100,xmin:0,ymax:2,ymin:-2},geometry:{paths:[[[0,0],[50,0],[100,0]]]},canvasPaths:{paths:[[[0,2],[50,2],[100,2]]]}}}};function P(e,t,r,s){let i,n;return"function"==typeof e.materialHash?(i=(0,e.materialHash)(t,r,s),n=p(e.cim,e.materialOverrides)):(i=e.materialHash,n=e.cim),{analyzedCIM:n,hash:i}}const x=new class{constructor(e,t){this._spatialReference=e,this._avoidSDF=t,this._resourceCache=new Map,this._pictureMarkerCache=new Map,this._textRasterizer=new d,this._cimResourceManager=new g,this._rasterizer=new C(this._cimResourceManager)}async rasterizeCIMSymbolAsync(e,t,r,s,i,n,a,o){s=s||(t?null!=t.centroid?"esriGeometryPolygon":m(t.geometry):null)||function(e){if(!(e&&e.data&&e.data.symbol))return null;switch(e.data.symbol.type){case"CIMPointSymbol":case"CIMTextSymbol":return"esriGeometryPoint";case"CIMLineSymbol":return"esriGeometryPolyline";case"CIMPolygonSymbol":return"esriGeometryPolygon";default:return null}}(e);const l=await this.analyzeCIMSymbol(e,t?function(e){return(e?Object.keys(e):[]).map((t=>({name:t,alias:t,type:"string"==typeof e[t]?"esriFieldTypeString":"esriFieldTypeDouble"})))}(t.attributes):null,r,s,o);return this.rasterizeCIMSymbol(l,t,s,i,n,a)}async analyzeCIMSymbol(r,s,i,n,a){const o=[],l=s?{geometryType:n,spatialReference:this._spatialReference,fields:s}:null;let c;await M(r.data,l,this._cimResourceManager,o,this._avoidSDF),e(a);for(const e of o)"CIMPictureMarker"!==e.cim.type&&"CIMPictureFill"!==e.cim.type&&"CIMPictureStroke"!==e.cim.type||(c||(c=[]),c.push(this.fetchPictureMarkerResource(e,a))),i&&"text"===e.type&&"string"==typeof e.text&&e.text.indexOf("[")>-1&&(e.text=t(i,e.text,e.cim.textCase));return c&&await Promise.all(c),o}async fetchPictureMarkerResource(e,t){const s=e.materialHash;if(!this._pictureMarkerCache.get(s)){const i=(await r(e.cim.url,{responseType:"image",signal:t&&t.signal})).data;this._pictureMarkerCache.set(s,i)}}rasterizeCIMSymbol(e,t,r,i,n,a){const o=[];for(const l of e){i&&"function"==typeof i.scaleFactor&&(i.scaleFactor=i.scaleFactor(t,n,a));const e=this._getRasterizedResource(l,t,r,i,n,a);if(!e)continue;let c=0,h=e.anchorX||0,m=e.anchorY||0,u=!1,y=0,f=0;if("esriGeometryPoint"===r){const e=b(i,l,null);if(y=s(l.offsetX,t,n,a)*e||0,f=s(l.offsetY,t,n,a)*e||0,"marker"===l.type)c=s(l.rotation,t,n,a)||0,u=!!l.rotateClockwise&&l.rotateClockwise;else if("text"===l.type){if(c=s(l.angle,t,n,a)||0,void 0!==l.horizontalAlignment)switch(l.horizontalAlignment){case"left":h=-.5;break;case"right":h=.5;break;default:h=0}if(void 0!==l.verticalAlignment)switch(l.verticalAlignment){case"top":m=.5;break;case"bottom":m=-.5;break;case"baseline":m=-.25;break;default:m=0}}}null!=e&&o.push({angle:c,rotateClockWise:u,anchorX:h,anchorY:m,offsetX:y,offsetY:f,rasterizedResource:e})}return this.getSymbolImage(o)}getSymbolImage(e){const t=document.createElement("canvas"),r=t.getContext("2d");let s=0,a=0,o=0,l=0;const c=[];for(let t=0;t<e.length;t++){const n=e[t],h=n.rasterizedResource;if(!h)continue;const m=h.size,u=n.offsetX,y=n.offsetY,f=n.anchorX,M=n.anchorY,p=n.rotateClockWise||!1;let d=n.angle,g=i(u)-m[0]*(.5+f),C=i(y)-m[1]*(.5+M),I=g+m[0],b=C+m[1];if(d){p&&(d=-d);const e=Math.sin(d*Math.PI/180),t=Math.cos(d*Math.PI/180),r=g*t-C*e,s=g*e+C*t,i=g*t-b*e,n=g*e+b*t,a=I*t-b*e,o=I*e+b*t,l=I*t-C*e,c=I*e+C*t;g=Math.min(r,i,a,l),C=Math.min(s,n,o,c),I=Math.max(r,i,a,l),b=Math.max(s,n,o,c)}s=g<s?g:s,a=C<a?C:a,o=I>o?I:o,l=b>l?b:l;const w=r.createImageData(h.size[0],h.size[1]);w.data.set(new Uint8ClampedArray(h.image.buffer)),c.push({offsetX:u,offsetY:y,rotateClockwise:p,angle:d,rasterizedImage:w,anchorX:f,anchorY:M})}t.width=o-s,t.height=l-a;const h=-s,m=l;for(let e=0;e<c.length;e++){const t=c[e],s=this._imageDataToCanvas(t.rasterizedImage),n=h-t.rasterizedImage.width*(.5+t.anchorX),a=m-t.rasterizedImage.height*(.5-t.anchorY);if(t.angle){const e=(360-t.angle)*Math.PI/180;r.save(),r.translate(i(t.offsetX),-i(t.offsetY)),r.translate(h,m),r.rotate(e),r.translate(-h,-m),r.drawImage(s,n,a),r.restore()}else r.drawImage(s,n+i(t.offsetX),a-i(t.offsetY))}const u=new n({x:h/t.width-.5,y:m/t.height-.5});return{imageData:0!==t.width&&0!==t.height?r.getImageData(0,0,t.width,t.height):r.createImageData(1,1),anchorPosition:u}}_imageDataToCanvas(e){this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas"));const t=this._imageDataCanvas,r=t.getContext("2d");return t.width=e.width,t.height=e.height,r.putImageData(e,0,0),t}_imageTo32Array(e,t,r){this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas"));const s=this._imageDataCanvas,i=s.getContext("2d");return s.width=t,s.height=r,i.drawImage(e,0,0,t,r),new Uint32Array(i.getImageData(0,0,t,r).data.buffer)}_getRasterizedResource(e,t,r,i,n,l){let c,h,m,u,y=null,f=null;if("esriGeometryPolyline"===r||"esriGeometryPolygon"===r){const o=i&&i.style?i.style:I.Legend,u="esriGeometryPolyline"===r?w.stroke[o]:w.fill[o];if("line"===e.type){if("CIMSolidStroke"!==e.cim.type){if("CIMPictureStroke"===e.cim.type){const r=s(e.width,t,n,l),{image:i,width:a,height:o}=this._getPictureResource(e,r);return this._rasterizePictureResource(e,i,a,o,u,r)}return null}({analyzedCIM:c,hash:m}=P(e,t,n,l)),h=this._embedCIMLayerInVectorMarker(c,u)}else if("marker"===e.type){if("CIMPictureMarker"===e.cim.type)return null;if("CIMVectorMarker"!==e.cim.type)return null;e.cim.offsetX=s(e.offsetX,t,n,l),e.cim.offsetY=s(e.offsetY,t,n,l),e.cim.rotation=s(e.rotation,t,n,l),e.cim.markerPlacement=e.markerPlacement,({analyzedCIM:c}=P(e,t,n,l)),m=a(JSON.stringify(c)).toString(),h=this._embedCIMLayerInVectorMarker(c,u),y=s(e.size,t,n,l),f=e.path}else{if("text"===e.type)return null;if("fill"===e.type){if("CIMHatchFill"===e.cim.type||"CIMVectorMarker"===e.cim.type||"CIMPictureMarker"===e.cim.type||"CIMPictureFill"===e.cim.type){const r=e.cim.size||e.cim.height;let s,i,a;if("CIMPictureMarker"===e.cim.type||"CIMPictureFill"===e.cim.type)({image:s,width:i,height:a}=this._getPictureResource(e,r));else{({analyzedCIM:c,hash:m}=P(e,t,n,l));const o=this._rasterizer.rasterizeJSONResource({cim:c,type:e.type,url:e.url,mosaicHash:m,size:r,path:f},1,this._avoidSDF);s=o.image,i=o.size[0],a=o.size[1]}return this._rasterizePictureResource(e,s,i,a,u,null)}if("CIMSolidFill"!==e.cim.type)return null;({analyzedCIM:c,hash:m}=P(e,t,n,l)),h=this._embedCIMLayerInVectorMarker(c,u)}}}else{if("text"===e.type)return u=this._rasterizeTextResource(e,t,i,n,l),u;({analyzedCIM:c,hash:m}=P(e,t,n,l));const r=b(i,e,null);if("CIMPictureMarker"===e.cim.type){const i=s(e.size,t,n,l)*r,{image:a,width:o,height:c}=this._getPictureResource(e,i);return u={image:a,size:[o,c],sdf:!1,simplePattern:!1,anchorX:e.anchorPoint?e.anchorPoint.x:0,anchorY:e.anchorPoint?e.anchorPoint.y:0},u}o(c,r,{preserveOutlineWidth:!1}),h=c}m+=r,i&&(m+=JSON.stringify(i));const M=this._resourceCache;return M.has(m)?M.get(m):(u=this._rasterizer.rasterizeJSONResource({cim:h,type:e.type,url:e.url,mosaicHash:m,size:y,path:f},window.devicePixelRatio||1,this._avoidSDF),M.set(m,u),u)}_rasterizeTextResource(e,t,r,i,n){const a=b(r,e,null),o=s(e.text,t,i,n);if(!o||0===o.length)return null;const c=s(e.fontName,t,i,n),h=s(e.style,t,i,n),m=s(e.weight,t,i,n),u=s(e.decoration,t,i,n),y=s(e.size,t,i,n)*a,f=s(e.horizontalAlignment,t,i,n),M=s(e.verticalAlignment,t,i,n),p=l(s(e.color,t,i,n)),d=l(s(e.outlineColor,t,i,n)),g={color:p,size:y,horizontalAlignment:f,verticalAlignment:M,font:{family:c,style:h,weight:m,decoration:u},halo:{size:s(e.outlineSize,t,i,n)||0,color:d,style:h},pixelRatio:1,premultiplyColors:!this._avoidSDF};return this._textRasterizer.rasterizeText(o,g)}_rasterizePictureResource(e,t,r,s,n,a){const o=document.createElement("canvas"),l=o.getContext("2d");o.height=i(Math.max(n.frame.ymax-n.frame.ymin,a)),o.width=i(n.frame.xmax-n.frame.xmin);const m=l.createImageData(r,s);m.data.set(new Uint8ClampedArray(t.buffer));const u=this._imageDataToCanvas(m),y=l.createPattern(u,"repeat"),f=Math.cos((-e.cim.rotation||0)*Math.PI/180),M=Math.sin((-e.cim.rotation||0)*Math.PI/180);y.setTransform({m11:f,m12:M,m21:-M,m22:f,m41:i(e.cim.offsetX)||0,m42:i(e.cim.offsetY)||0});const p=n.canvasPaths;let d,g,C;c(p)?(d=p.rings,l.fillStyle=y,g=l.fill,C=["evenodd"]):h(p)&&(d=p.paths,l.strokeStyle=y,l.lineWidth=a,g=l.stroke,d[0][0][1]=o.height/2,d[0][1][1]=o.height/2),l.beginPath();for(const e of d){const t=e?e.length:0;if(t>1){let r=e[0];l.moveTo(i(r[0]),i(r[1]));for(let s=1;s<t;++s)r=e[s],l.lineTo(i(r[0]),i(r[1]));l.closePath()}}g.apply(l,C);const I=l.getImageData(0,0,o.width,o.height),b=new Uint8Array(I.data);return{size:[o.width,o.height],image:new Uint32Array(b.buffer),sdf:!1,simplePattern:!1,anchorX:0,anchorY:0}}_getPictureResource(e,t){const r=this._pictureMarkerCache.get(e.materialHash);if(!r)return null;const s=r.height/r.width,n=t?s>1?i(t):i(t)/s:r.width,a=t?s>1?i(t)*s:i(t):r.height;return{image:this._imageTo32Array(r,n,a),width:n,height:a}}_embedCIMLayerInVectorMarker(e,t){const r=c(t.geometry)?"CIMPolygonSymbol":"CIMLineSymbol",s=t.frame;return{type:"CIMVectorMarker",frame:s,size:s.ymax-s.ymin,markerGraphics:[{type:"CIMMarkerGraphic",geometry:t.geometry,symbol:{type:r,symbolLayers:[e]}}]}}}(null,!0);async function z(e,t={}){const{size:r,maxSize:s,node:i,opacity:n}=t,a=t.cimOptions||t,{feature:o,fieldMap:l,geometryType:c,style:h}=a,m=u(e),M=Math.min(null!=r?r:m,null!=s?s:f(120));M!==m&&(e=e.clone(),y(e,M,{preserveOutlineWidth:!0}));let p=3;e&&e.data&&e.data.symbol&&"CIMPointSymbol"!==e.data.symbol.type&&(p=1);const d=await x.rasterizeCIMSymbolAsync(e,o,l,c,{scaleFactor:p,style:h}),g=document.createElement("canvas");g.width=d.imageData.width,g.height=d.imageData.height,g.getContext("2d").putImageData(d.imageData,0,0);let C=g.width/p,I=g.height/p;if(null!=r&&(null==(null==t?void 0:t.scale)||(null==t?void 0:t.scale))){const e=C/I;C=e<=1?Math.ceil(M*e):M,I=e<=1?M:Math.ceil(M/e)}const b=new Image(C,I);return b.src=g.toDataURL(),null!=n&&(b.style.opacity=`${n}`),null!=t.effect&&(b.style.filter=t.effect),i&&i.appendChild(b),b}export{z as previewCIMSymbol}