import{e,d as t,aL as i,aO as s,aR as r,i as n,a6 as a,ab as o,h as l,d$ as u,aT as c,a4 as h,ac as d,o as p,dZ as m,d_ as y,W as g,ag as v,H as f,ah as w,af as R,iK as S,bp as b,aN as I,bb as x,eA as j,s as T,eh as M,a8 as N,iF as F,ad as O,eb as D,dM as A,aI as P,g as V,a7 as C,hX as _,iL as q,N as k,gh as E,iM as z,iN as J,iO as G,aa as U,aj as B,iP as Q,iQ as L,i0 as H,iy as W,i2 as $,i1 as K,e6 as X,e7 as Y,iw as Z,e5 as ee,aG as te,ec as ie,cY as se,i5 as re,iu as ne,i8 as ae,ay as oe}from"./p-c8bc3433.js";import{n as le,p as ue,o as ce,i as he,d as de,a as pe,b as me,k as ye,S as ge,j as ve,X as fe,c as we}from"./p-df59189e.js";import{f as Re,n as Se,l as be,N as Ie,P as xe,O as je}from"./p-7382e302.js";import{u as Te}from"./p-17a8cfc0.js";import{c as Me}from"./p-57df8232.js";import"./p-84bf99cb.js";import"./p-3fd7e064.js";import"./p-8447e72f.js";import"./p-e4802f24.js";var Ne;const Fe=new Set(["raster","raster2","dem","fillraster"]),Oe=new Set(["rasters"]),De=e=>e&&e.rasterFunction?_e.fromJSON(e):e,Ae=e=>e&&e instanceof _e?e.toJSON():e,Pe=e=>(null==e?void 0:e.functionName)&&!e.declaredClass,Ve=e=>Pe(e)?new _e(e):e;var Ce;!function(e){e[e.MOSAIC=0]="MOSAIC",e[e.GROUP=1]="GROUP",e[e.ITEM=2]="ITEM"}(Ce||(Ce={}));let _e=Ne=class extends a{constructor(e){super(e),this.functionName=null,this.outputPixelType="unknown",this.variableName=null,this.description=null,this.functionDefinition=null,this.thumbnail=null}set functionArguments(e){if(e){const t=Object.keys(e);if(t.some((t=>Fe.has(t.toLowerCase())&&Pe(e[t])))||t.some((t=>Oe.has(t.toLowerCase())&&Array.isArray(e[t])&&e[t].some((e=>Pe(e)))))){e=o(e);for(const i of t)Fe.has(i.toLowerCase())?e[i]=Ve(e[i]):Oe.has(i.toLowerCase())&&Array.isArray(e[i])&&(e[i]=e[i].map((e=>Ve(e))))}}this._set("functionArguments",e)}readFunctionArguments(e,t){return(e=>{if(null==e)return null;e=o(e);const t={};for(const i of Object.keys(e))t[i]=Fe.has(i.toLowerCase())?De(e[i]):Oe.has(i.toLowerCase())&&Array.isArray(e[i])?e[i].map(De):e[i];return t})(t.arguments||t.rasterFunctionArguments)}writeFunctionArguments(e,t,i){const s={};for(const t of Object.keys(e))s[t]=Fe.has(t.toLowerCase())?Ae(e[t]):Oe.has(t.toLowerCase())&&Array.isArray(e[t])?e[t].map(Ae):Ae(e[t]);this.functionDefinition?t.arguments=s:t[i]=s}readFunctionName(e,t){const i=t.rasterFunctionInfos;return t.name||(i&&i.length&&"None"!==i[0].name?i[0].name:t.rasterFunction)}writeFunctionName(e,t,i){this.functionDefinition?t.name=e:t[i]=e}readFunctionType(e){return Ce[e]}writeFunctionType(e,t,i){t[i]=Ce[e]}clone(){return new Ne({functionName:this.functionName,functionArguments:o(this.functionArguments),outputPixelType:this.outputPixelType,variableName:this.variableName,description:this.description,functionType:this.functionType,functionDefinition:this.functionDefinition,thumbnail:this.thumbnail})}};e([t({json:{type:Object,write:{target:"rasterFunctionArguments"}}})],_e.prototype,"functionArguments",null),e([i("functionArguments",["rasterFunctionArguments","arguments"])],_e.prototype,"readFunctionArguments",null),e([s("functionArguments")],_e.prototype,"writeFunctionArguments",null),e([t({json:{type:String,write:{target:"rasterFunction"}}})],_e.prototype,"functionName",void 0),e([i("functionName",["rasterFunction","rasterFunctionInfos","name"])],_e.prototype,"readFunctionName",null),e([s("functionName")],_e.prototype,"writeFunctionName",null),e([r({C128:"c128",C64:"c64",F32:"f32",F64:"f64",S16:"s16",S32:"s32",S8:"s8",U1:"u1",U16:"u16",U2:"u2",U32:"u32",U4:"u4",U8:"u8",UNKNOWN:"unknown"},{ignoreUnknown:!1}),t({json:{default:"unknown"}})],_e.prototype,"outputPixelType",void 0),e([t({type:String,json:{read:!0,write:!0}})],_e.prototype,"variableName",void 0),e([t({type:String,json:{read:!0,write:!0,origins:{"web-document":{read:!1,write:!1}}}})],_e.prototype,"description",void 0),e([t({json:{origins:{"web-document":{read:!1,write:!1}}}})],_e.prototype,"functionType",void 0),e([i("functionType")],_e.prototype,"readFunctionType",null),e([s("functionType")],_e.prototype,"writeFunctionType",null),e([t({type:Object,json:{read:{source:"function"},write:{target:"function"},origins:{"web-document":{read:!1,write:!1}}}})],_e.prototype,"functionDefinition",void 0),e([t({type:String,json:{read:!0,write:!0,origins:{"web-document":{read:!1,write:!1}}}})],_e.prototype,"thumbnail",void 0),_e=Ne=e([n("esri.layers.support.RasterFunction")],_e);const qe=_e,ke={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767]},Ee={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},ze=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Je(e){return ze.has(e.type)}function Ge(e,t){if(!e||!t)return o(e||t);const i=o(e);return"none"!==t.functionName.toLowerCase()&&(Ue(i.functionArguments).Raster=t),i}function Ue(e){const t=e.Raster;return t&&"esri.layers.support.RasterFunction"===t.declaredClass?Ue(t.functionArguments):e}const Be={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function Qe(e,t){const i=ke[String(t).toLowerCase()];return i&&e.push([Math.floor(i[0]-1),0,0,0],[Math.ceil(i[1]+1),0,0,0]),e}function Le(e){if(!e)return;const{fields:t}=e,i=t&&t.find((e=>e&&e.name&&"value"===e.name.toLowerCase()));return i&&i.name}function He(e){const t=[];return e.forEach((e=>{const i=e;if(Array.isArray(i))t.push(i);else{if(null==i.min||null==i.max)return;t.push([i.min,i.max,i.avg||0,i.stddev||0])}})),t}var We;const $e=u()({MT_FIRST:"first",MT_LAST:"last",MT_MIN:"min",MT_MAX:"max",MT_MEAN:"mean",MT_BLEND:"blend",MT_SUM:"sum"}),Ke=u()({esriMosaicNone:"none",esriMosaicCenter:"center",esriMosaicNadir:"nadir",esriMosaicViewpoint:"viewpoint",esriMosaicAttribute:"attribute",esriMosaicLockRaster:"lock-raster",esriMosaicNorthwest:"northwest",esriMosaicSeamline:"seamline"});let Xe=We=class extends a{constructor(e){super(e),this.ascending=!0,this.itemRenderingRule=null,this.lockRasterIds=null,this.method=null,this.multidimensionalDefinition=null,this.objectIds=null,this.operation=null,this.sortField=null,this.sortValue=null,this.viewpoint=null,this.where=null}readAscending(e,t){return null!=t.ascending?t.ascending:null==t.sortAscending||t.sortAscending}readMethod(e,t){return function(e){let t;switch(e?e.toLowerCase().replace("esrimosaic",""):""){case"byattribute":case"attribute":t="esriMosaicAttribute";break;case"lockraster":t="esriMosaicLockRaster";break;case"center":t="esriMosaicCenter";break;case"northwest":t="esriMosaicNorthwest";break;case"nadir":t="esriMosaicNadir";break;case"viewpoint":t="esriMosaicViewpoint";break;case"seamline":t="esriMosaicSeamline";break;default:t="esriMosaicNone"}return Ke.fromJSON(t)}(t.mosaicMethod||t.defaultMosaicMethod)}readOperation(e,t){const i=t.mosaicOperation,s=t.mosaicOperator&&t.mosaicOperator.toLowerCase(),r=i||(s?$e.toJSON(s):null);return $e.fromJSON(r)||"first"}castSortValue(e){return null==e||"string"==typeof e||"number"==typeof e?e:`${e}`}clone(){return new We({ascending:this.ascending,itemRenderingRule:o(this.itemRenderingRule),lockRasterIds:o(this.lockRasterIds),method:this.method,multidimensionalDefinition:o(this.multidimensionalDefinition),objectIds:o(this.objectIds),operation:this.operation,sortField:this.sortField,sortValue:this.sortValue,viewpoint:o(this.viewpoint),where:this.where})}};e([t({type:Boolean,json:{write:!0}})],Xe.prototype,"ascending",void 0),e([i("ascending",["ascending","sortAscending"])],Xe.prototype,"readAscending",null),e([t({type:qe,json:{write:!0}})],Xe.prototype,"itemRenderingRule",void 0),e([t({type:[c],json:{write:{overridePolicy(){return{enabled:"lock-raster"===this.method}}}}})],Xe.prototype,"lockRasterIds",void 0),e([t({type:String,json:{type:Ke.jsonValues,write:{target:"mosaicMethod",writer:Ke.write}}})],Xe.prototype,"method",void 0),e([i("method",["mosaicMethod","defaultMosaicMethod"])],Xe.prototype,"readMethod",null),e([t({type:[ue],json:{write:!0}})],Xe.prototype,"multidimensionalDefinition",void 0),e([t({type:[c],json:{name:"fids",write:!0}})],Xe.prototype,"objectIds",void 0),e([t({json:{type:$e.jsonValues,read:{reader:$e.read},write:{target:"mosaicOperation",writer:$e.write}}})],Xe.prototype,"operation",void 0),e([i("operation",["mosaicOperation","mosaicOperator"])],Xe.prototype,"readOperation",null),e([t({type:String,json:{write:{overridePolicy(){return{enabled:"attribute"===this.method}}}}})],Xe.prototype,"sortField",void 0),e([t({type:[String,Number],json:{write:{allowNull:!0,overridePolicy(){return{enabled:"attribute"===this.method,allowNull:!0}}}}})],Xe.prototype,"sortValue",void 0),e([h("sortValue")],Xe.prototype,"castSortValue",null),e([t({type:d,json:{write:!0}})],Xe.prototype,"viewpoint",void 0),e([t({type:String,json:{write:!0}})],Xe.prototype,"where",void 0),Xe=We=e([n("esri.layers.support.MosaicRule")],Xe);const Ye=Xe;let Ze=class extends a{constructor(){super(...arguments),this.layer=null,this.adjustAspectRatio=void 0,this.bandIds=void 0,this.compression=void 0,this.compressionQuality=void 0,this.compressionTolerance=.01,this.format=null,this.interpolation=null,this.noData=null,this.noDataInterpretation=void 0,this.pixelType=void 0,this.lercVersion=2}writeAdjustAspectRatio(e,t,i){this.layer.version<10.3||(t[i]=e)}writeCompressionQuality(e,t,i){this.format&&this.format.toLowerCase().indexOf("jpg")>-1&&null!=e&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}writeLercVersion(e,t,i){"lerc"===this.format&&this.layer.version>=10.5&&(t[i]=e)}get version(){const e=this.layer;return e.commitProperty("bandIds"),e.commitProperty("format"),e.commitProperty("compressionQuality"),e.commitProperty("compressionTolerance"),e.commitProperty("interpolation"),e.commitProperty("noData"),e.commitProperty("noDataInterpretation"),e.commitProperty("mosaicRule"),e.commitProperty("renderingRule"),e.commitProperty("adjustAspectRatio"),e.commitProperty("pixelFilter"),e.commitProperty("renderer"),e.commitProperty("definitionExpression"),(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let t=e.mosaicRule;const i=e.definitionExpression;return t?i&&i!==t.where&&(t=t.clone(),t.where=i):i&&(t=new Ye({where:i})),t}get renderingRule(){const e=this.layer;let t=e.renderingRule;const i=e.pixelFilter,s=!e.format||e.format.indexOf("jpg")>-1||e.format.indexOf("png")>-1;return t=this._addResampleRasterFunction(t),s&&!i&&(t=this.combineRendererWithRenderingRule()),t}combineRendererWithRenderingRule(){var e;const t=this.layer,{rasterInfo:i,renderingRule:s,renderer:r}=t;return r&&Je(r)?Ge(function(e,t){switch(t=t||{},e.type){case"raster-stretch":return function(e,t){const i=new qe;i.functionName="Stretch";const s=Be[le.toJSON(e.stretchType)],r="u8",n={StretchType:s,Statistics:He(e.statistics),DRA:e.dynamicRangeAdjustment,UseGamma:e.useGamma,Gamma:e.gamma,ComputeGamma:e.computeGamma};if(null!=e.outputMin&&(n.Min=e.outputMin),null!=e.outputMax&&(n.Max=e.outputMax),s===Be.standardDeviation?(n.NumberOfStandardDeviations=e.numberOfStandardDeviations,i.outputPixelType=r):s===Be.percentClip?(n.MinPercent=e.minPercent,n.MaxPercent=e.maxPercent,i.outputPixelType=r):s===Be.minMax?i.outputPixelType=r:s===Be.sigmoid&&(n.SigmoidStrengthLevel=e.sigmoidStrengthLevel),i.functionArguments=n,i.variableName="Raster",e.colorRamp){const s=e.colorRamp,r=new qe,n=Se(s);return r.functionArguments=n?{colorRamp:n}:!t.convertColorRampToColormap||"algorithmic"!==s.type&&"multipart"!==s.type?{colorRamp:e.colorRamp.toJSON()}:{Colormap:Re(s,256)},r.variableName="Raster",r.functionName="Colormap",r.functionArguments.Raster=i,r}return i}(e,t);case"class-breaks":return function(e,t){const i=[],s=[],r=[],n=[],a=1e-6,{pixelType:o,rasterAttributeTable:l}=t,u=l&&l.features,c=Le(l);if(u&&Array.isArray(u)&&e.classBreakInfos){e.classBreakInfos.forEach(((t,i)=>{const s=t.symbol.color;let r;s.a&&u.forEach((a=>{r=a.attributes[e.field],(r>=t.minValue&&r<t.maxValue||i===e.classBreakInfos.length-1&&r>=t.minValue)&&n.push([a.attributes[c],s.r,s.g,s.b])}))}));const t=o?Qe(n,o):n,i=new qe;return i.functionName="Colormap",i.functionArguments={},i.functionArguments.Colormap=t,i.variableName="Raster",i}e.classBreakInfos.forEach(((e,t)=>{const o=e.symbol&&e.symbol.color;o.a?(i.push(0===t?e.minValue:e.minValue+a,e.maxValue+a),s.push(t),n.push([t,o.r,o.g,o.b])):r.push(e.minValue,e.maxValue)}));const h=o?Qe(n,o):n,d=new qe;d.functionName="Remap",d.functionArguments={InputRanges:i,OutputValues:s,NoDataRanges:r},d.variableName="Raster";const p=new qe;return p.functionName="Colormap",p.functionArguments={Colormap:h,Raster:d},p}(e,t);case"unique-value":return function(e,t){var i;const s=[],{pixelType:r,rasterAttributeTable:n}=t,a=n&&n.features,o=Le(n),l=null==(i=e.defaultSymbol)?void 0:i.color;let u=!1;if(e.uniqueValueInfos&&(a?a.forEach((t=>{var i;const r=null==(i=e.uniqueValueInfos.find((i=>String(t.attributes[e.field])===String(i.value))))?void 0:i.symbol.color;r?s.push([t.attributes[o],r.r,r.g,r.b]):l&&s.push([t.attributes[o],l.r,l.g,l.b])})):e.uniqueValueInfos.forEach((e=>{var t;if(null==(t=e.symbol.color)||!t.a)return;const i=e.symbol.color;isNaN(+e.value)?u=!0:s.push([+e.value,i.r,i.g,i.b])}))),u)return null;const c=r&&s.length>0?Qe(s,r):s,h=new qe;return h.functionName="Colormap",h.functionArguments={},h.functionArguments.Colormap=c,h.variableName="Raster",h}(e,t);case"raster-colormap":return function(e,t){const i=e.extractColormap();if(!i||0===i.length)return;const{pixelType:s}=t,r=s?Qe(i,s):i,n=new qe;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=r,n}(e,t);case"vector-field":return function(e,t){const i=new qe;i.functionName="VectorFieldRenderer";const{dataType:s,bandProperties:r}=t,n="vector-uv"===s;let a,o;r&&2===r.length&&(a=r.map((e=>e.BandName.toLowerCase())).indexOf("magnitude"),o=r.map((e=>e.BandName.toLowerCase())).indexOf("direction")),-1!==a&&null!==a||(a=0,o=1);const u="arithmetic"===e.rotationType?1:2,c="flow-from"===e.flowRepresentation?0:1,h=e.visualVariables?e.visualVariables.filter((e=>"Magnitude"===e.field))[0]:new l,d={magnitudeBandID:a,directionBandID:o,isUVComponents:n,referenceSystem:u,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:Ee[e.style.toLowerCase().replace("-","_")],minimumMagnitude:h.minDataValue,maximumMagnitude:h.maxDataValue,minimumSymbolSize:h.minSize,maximumSymbolSize:h.maxSize};return i.functionArguments=d,i}(e,t);case"raster-shaded-relief":return function(e,t){if("elevation"!==t.dataType)return new qe;const i=new qe;i.functionName="Hillshade";const s="traditional"===e.hillshadeType?0:1,r="none"===e.scalingType?1:3,n={HillshadeType:s,SlopeType:r,ZFactor:e.zFactor};return 0===s&&(n.Azimuth=e.azimuth,n.Altitude=e.altitude),3===r&&(n.PSPower=e.pixelSizePower,n.PSZFactor=e.pixelSizeFactor),i.functionArguments=n,i.variableName="Raster",e.colorRamp&&(i.functionName="ShadedRelief",n.Colormap=Re(e.colorRamp,256)),i}(e,t)}}(r,{rasterAttributeTable:i.attributeTable,pixelType:i.pixelType,dataType:i.dataType,bandProperties:null==(e=i.keyProperties)?void 0:e.BandProperties,convertColorRampToColormap:t.version<10.6}),s):s}_addResampleRasterFunction(e){var t;return"vector-field"!==(null==(t=this.layer.renderer)?void 0:t.type)||"Resample"===(null==e?void 0:e.functionName)?e:Ge(new qe({functionName:"Resample",functionArguments:{ResamplingType:"esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}}),e)}};e([t()],Ze.prototype,"layer",void 0),e([t({json:{write:!0}})],Ze.prototype,"adjustAspectRatio",void 0),e([s("adjustAspectRatio")],Ze.prototype,"writeAdjustAspectRatio",null),e([t({json:{write:!0}}),p("layer.bandIds")],Ze.prototype,"bandIds",void 0),e([t({json:{write:!0}})],Ze.prototype,"compression",void 0),e([t({json:{write:!0}}),p("layer.compressionQuality")],Ze.prototype,"compressionQuality",void 0),e([s("compressionQuality")],Ze.prototype,"writeCompressionQuality",null),e([t({json:{write:!0}}),p("layer.compressionTolerance")],Ze.prototype,"compressionTolerance",void 0),e([s("compressionTolerance")],Ze.prototype,"writeCompressionTolerance",null),e([t({json:{write:!0}}),p("layer.format")],Ze.prototype,"format",void 0),e([t({type:String,json:{read:{reader:ce.read},write:{writer:ce.write}}}),p("layer.interpolation")],Ze.prototype,"interpolation",void 0),e([t({json:{write:!0}}),p("layer.noData")],Ze.prototype,"noData",void 0),e([t({type:String,json:{read:{reader:he.read},write:{writer:he.write}}}),p("layer.noDataInterpretation")],Ze.prototype,"noDataInterpretation",void 0),e([t({json:{write:!0}})],Ze.prototype,"pixelType",void 0),e([t({json:{write:!0}})],Ze.prototype,"lercVersion",void 0),e([s("lercVersion")],Ze.prototype,"writeLercVersion",null),e([t({type:Number})],Ze.prototype,"version",null),e([t({json:{write:!0}})],Ze.prototype,"mosaicRule",null),e([t({json:{write:!0}})],Ze.prototype,"renderingRule",null),Ze=e([n("esri.layers.mixins.ExportImageServiceParameters")],Ze);let et=class extends a{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};e([t({json:{write:!0}})],et.prototype,"catalogItemVisibilities",void 0),e([t({type:m,json:{write:!0}})],et.prototype,"catalogItems",void 0),e([t({type:d,json:{write:!0}})],et.prototype,"location",void 0),e([t({json:{write:!0}})],et.prototype,"name",void 0),e([t({json:{write:!0}})],et.prototype,"objectId",void 0),e([t({json:{write:!0}})],et.prototype,"processedValues",void 0),e([t({json:{write:!0}})],et.prototype,"properties",void 0),e([t({json:{write:!0}})],et.prototype,"value",void 0),et=e([n("esri.rest.support.ImageIdentifyResult")],et);const tt=et;let it=class extends a{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};e([t({json:{write:!0}})],it.prototype,"attributes",void 0),e([t({type:d,json:{write:!0}})],it.prototype,"location",void 0),e([t({json:{write:!0}})],it.prototype,"locationId",void 0),e([t({json:{write:!0}})],it.prototype,"rasterId",void 0),e([t({json:{write:!0}})],it.prototype,"resolution",void 0),e([t({json:{write:!0}})],it.prototype,"pixelValue",void 0),it=e([n("esri.rest.support.ImageSample")],it);const st=it;let rt=class extends a{constructor(){super(...arguments),this.samples=null}};e([t({type:[st],json:{write:!0}})],rt.prototype,"samples",void 0),rt=e([n("esri.rest.support.ImageSampleResult")],rt);const nt=rt;function at(e){const t=null==e?void 0:e.time;if(t&&(null!=t.start||null!=t.end)){const i=[];null!=t.start&&i.push(t.start),null!=t.end&&-1===i.indexOf(t.end)&&i.push(t.end),e.time=i.join(",")}}async function ot(e,t,i){const s=R(e),r=t.geometry?[t.geometry]:[],n=await y(r),a=t.toJSON();at(a);const o=n&&n[0];g(o)&&(a.geometry=o.toJSON());const l=v({...s.query,f:"json",...a});return w(l,i)}async function lt(e,t,i){var s,r;const n=t.toJSON();at(n),null!=(s=n.outFields)&&s.length&&(n.outFields=n.outFields.join(","));const a=await y(t.geometry),o=null==a?void 0:a[0];g(o)&&(n.geometry=o.toJSON());const l=R(e),u=v({...l.query,f:"json",...n}),c=w(u,i),{data:h}=await f(`${l.path}/getSamples`,c),d=null==h||null==(r=h.samples)?void 0:r.map((e=>{const t="NaN"===e.value||""===e.value?null:e.value.split(" ").map((e=>Number(e)));return{...e,pixelValue:t}}));return nt.fromJSON({samples:d})}async function ut(e,t,i){const s=R(e);return y(t.geometry?[t.geometry]:[]).then((e=>{const r=t.toJSON(),n=e&&e[0];g(n)&&(r.geometry=JSON.stringify(n.toJSON()));const a=v({...s.query,f:"json",...r}),o=w(a,i);return f(s.path+"/identify",o)})).then((e=>tt.fromJSON(e.data)))}var ct;let ht=ct=class extends a{constructor(){super(...arguments),this.geometry=null,this.mosaicRule=null,this.renderingRule=null,this.pixelSize=null,this.raster=void 0,this.timeExtent=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=x(e),t[i]=e.toJSON())}clone(){return new ct(o({geometry:this.geometry,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,raster:this.raster,timeExtent:this.timeExtent}))}};e([t({types:S,json:{read:b}})],ht.prototype,"geometry",void 0),e([s("geometry")],ht.prototype,"writeGeometry",null),e([t({type:Ye,json:{write:!0}})],ht.prototype,"mosaicRule",void 0),e([t({type:qe,json:{write:!0}})],ht.prototype,"renderingRule",void 0),e([t({type:d,json:{write:!0}})],ht.prototype,"pixelSize",void 0),e([t({json:{write:!0}})],ht.prototype,"raster",void 0),e([t({type:I,json:{read:{source:"time"},write:{target:"time"}}})],ht.prototype,"timeExtent",void 0),ht=ct=e([n("esri.rest.support.ImageHistogramParameters")],ht);const dt=ht;var pt;let mt=pt=class extends a{constructor(){super(...arguments),this.geometry=null,this.renderingRules=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0}writeGeometry(e,t,i){null!=e&&(t.geometryType=x(e),t[i]=JSON.stringify(e.toJSON()))}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=Ye.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=qe.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}writeRenderingRule(e,t,i){null!=e&&(t[i]=JSON.stringify(e.toJSON()))}writeRenderingRules(e,t,i){null!=e&&(t[i]=JSON.stringify(e.map((e=>e.toJSON()))))}writePixelSize(e,t,i){null!=e&&(t[i]=JSON.stringify(e))}writeTimeExtent(e,t,i){if(null!=e){const s=g(e.start)?e.start.getTime():null,r=g(e.end)?e.end.getTime():null;t[i]=null!=s?null!=r?`${s},${r}`:`${s}`:null}}clone(){return new pt(o({geometry:this.geometry,mosaicRule:this.mosaicRule,renderingRule:this.renderingRule,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};e([t({json:{write:!0}})],mt.prototype,"geometry",void 0),e([s("geometry")],mt.prototype,"writeGeometry",null),e([t({type:Ye,json:{write:!0}})],mt.prototype,"mosaicRule",null),e([s("mosaicRule")],mt.prototype,"writeMosaicRule",null),e([t({type:qe,json:{write:!0}})],mt.prototype,"renderingRule",null),e([s("renderingRule")],mt.prototype,"writeRenderingRule",null),e([t({type:[qe],json:{write:!0}})],mt.prototype,"renderingRules",void 0),e([s("renderingRules")],mt.prototype,"writeRenderingRules",null),e([t({type:d,json:{write:!0}})],mt.prototype,"pixelSize",void 0),e([s("pixelSize")],mt.prototype,"writePixelSize",null),e([t({type:Boolean,json:{write:!0}})],mt.prototype,"returnGeometry",void 0),e([t({type:Boolean,json:{write:!0}})],mt.prototype,"returnCatalogItems",void 0),e([t({type:Boolean,json:{write:!0}})],mt.prototype,"returnPixelValues",void 0),e([t({type:Number,json:{write:!0}})],mt.prototype,"maxItemCount",void 0),e([t({type:I,json:{write:{target:"time"}}})],mt.prototype,"timeExtent",void 0),e([s("timeExtent")],mt.prototype,"writeTimeExtent",null),e([t({json:{write:!0}})],mt.prototype,"raster",void 0),e([t({json:{write:!0}})],mt.prototype,"viewId",void 0),mt=pt=e([n("esri.rest.support.ImageIdentifyParameters")],mt);const yt=mt;var gt;let vt=gt=class extends a{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(e,t,i){null!=e&&(t.geometryType=x(e),t[i]=e.toJSON())}set locations(e){if(null!=e&&e.length){const t=new j({spatialReference:e[0].spatialReference});t.points=e.map((e=>[e.x,e.y])),this._set("locations",e),this.geometry=t}}clone(){return new gt(o({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};e([t({types:S,json:{read:b}})],vt.prototype,"geometry",void 0),e([s("geometry")],vt.prototype,"writeGeometry",null),e([t({type:String,json:{type:ce.jsonValues,read:ce.read,write:ce.write}})],vt.prototype,"interpolation",void 0),e([t({type:Ye,json:{write:!0}})],vt.prototype,"mosaicRule",void 0),e([t({type:[String],json:{write:!0}})],vt.prototype,"outFields",void 0),e([t({type:d,json:{write:!0}})],vt.prototype,"pixelSize",void 0),e([t({type:String,json:{write:!0}})],vt.prototype,"raster",void 0),e([t({type:Boolean,json:{write:!0}})],vt.prototype,"returnFirstValueOnly",void 0),e([t({type:Number,json:{write:!0}})],vt.prototype,"sampleDistance",void 0),e([t({type:Number,json:{write:!0}})],vt.prototype,"sampleCount",void 0),e([t({type:Number,json:{write:!0}})],vt.prototype,"sliceId",void 0),e([t({type:I,json:{read:{source:"time"},write:{target:"time"}}})],vt.prototype,"timeExtent",void 0),vt=gt=e([n("esri.rest.support.ImageSampleParameters")],vt);const ft=vt,wt=T.getLogger("esri.layers.mixins.ArcGISImageService"),Rt=u()({U1:"u1",U2:"u2",U4:"u4",U8:"u8",S8:"s8",U16:"u16",S16:"s16",U32:"u32",S32:"s32",F32:"f32",F64:"f64",C64:"c64",C128:"c128",UNKNOWN:"unknown"}),St=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),bt=Q(L,{min:0,max:255}),It=r=>{let a=class extends r{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._symbolizer=null,this._defaultServiceMosaicRule=null,this._serviceSourceType=null,this._serviceSupportsMosaicRule=null,this.rasterAttributeTableFieldPrefix="Raster.",this.adjustAspectRatio=null,this.bandCount=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelSizeX=null,this.pixelSizeY=null,this.pixelFilter=null,this.raster=void 0,this.viewId=void 0,this.renderer=null,this.rasterAttributeTable=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=null}initialize(){this._set("exportImageServiceParameters",new Ze({layer:this}))}readDefaultServiceMosaicRule(e,t){return this._serviceSupportsMosaicRule?Ye.fromJSON(t):null}readServiceSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||g(this.rasterFunctionInfos)&&this.rasterFunctionInfos.length<1||g(this.rasterFunctionInfos)&&this.rasterFunctionInfos.forEach((t=>{e.set(t.name.toLowerCase().replace(/ /gi,"_"),t.name)})),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every((e=>"number"==typeof e)))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,i){null!=e&&"lerc"!==this.format&&(t[i]=e)}writeCompressionTolerance(e,t,i){"lerc"===this.format&&null!=e&&(t[i]=e)}get fieldsIndex(){return this.fields?new A(this.fields):null}set format(e){e&&St.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return"esriImageServiceDataTypeVector-UV"===t.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===t.serviceDataType||null!=this.pixelFilter?"lerc":"jpgpng"}readMinScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}readMaxScale(e,t){return null!=t.minLOD&&null!=t.maxLOD?e:0}set mosaicRule(e){let t=e;t&&t.mosaicMethod&&(t=Ye.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const i=e||t.mosaicRule;return i?Ye.fromJSON(i):this._isMosaicRuleSupported(t)?Ye.fromJSON(t):null}writeMosaicRule(e,t,i){let s=this.mosaicRule;const r=this.definitionExpression;s?r&&r!==s.where&&(s=s.clone(),s.where=r):r&&(s=new Ye({where:r})),this._isValidCustomizedMosaicRule(s)&&(t[i]=s.toJSON())}writeNoData(e,t,i){null!=e&&"number"==typeof e&&(t[i]=bt(e))}readObjectIdField(e,t){if(!e){const i=t.fields.filter((e=>"esriFieldTypeOID"===e.type||"oid"===e.type));e=i&&i[0]&&i[0].name}return e}get parsedUrl(){return this.url?P(this.url):null}readRenderer(e,t,i){var s,r;const n=null==t||null==(s=t.layerDefinition)||null==(r=s.drawingInfo)?void 0:r.renderer,a=me(n,i);return null==a?null:("vector-field"===a.type&&t.symbolTileSize&&!n.symbolTileSize&&(a.symbolTileSize=t.symbolTileSize),Je(a)||wt.warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),a)}writeRenderer(e,t,i){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),"vector-field"===e.type&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.rasterAttributeTableFieldPrefix||"Raster.",t=new M({name:"Raster.ItemPixelValue",alias:"Item Pixel Value",domain:null,editable:!1,length:50,type:"string"}),i=new M({name:"Raster.ServicePixelValue",alias:"Service Pixel Value",domain:null,editable:!1,length:50,type:"string"}),s=new M({name:"Raster.ServicePixelValue.Raw",alias:"Raw Service Pixel Value",domain:null,editable:!1,length:50,type:"string"});let r=this.fields?o(this.fields):[];r.push(i),this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0&&r.push(t),this.version>=10.4&&g(this.rasterFunctionInfos)&&this.rasterFunctionInfos.some((e=>"none"===e.name.toLowerCase()))&&r.push(s),g(this.rasterFunctionInfos)&&this.rasterFunctionInfos.filter((e=>"none"!==e.name.toLowerCase())).forEach((e=>{r.push(new M({name:"Raster.ServicePixelValue."+e.name,alias:e.name,domain:null,editable:!1,length:50,type:"string"}))})),null==this.pixelFilter||"esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType||(r.push(new M({name:"Raster.Magnitude",alias:"Magnitude",domain:null,editable:!1,type:"double"})),r.push(new M({name:"Raster.Direction",alias:"Direction",domain:null,editable:!1,type:"double"})));const n=this.rasterInfo.attributeTable&&this.rasterInfo.attributeTable.fields||null;if(n&&n.length>0){const t=n.filter((e=>"esriFieldTypeOID"!==e.type&&"value"!==e.name.toLowerCase())).map((t=>{const i=o(t);return i.name=e+t.name,i}));r=r.concat(t)}return r}set renderingRule(e){let t=e;t&&t.rasterFunction&&(t=qe.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("renderingRule",t)}readRenderingRule(e,t){const i=t.rasterFunctionInfos;return t.renderingRule||i&&i.length&&"None"!==i[0].name?qe.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}writeRenderingRule(e,t,i){this._isRFTJson(e)||(t[i]=e.toJSON())}readSpatialReference(e,t){const i=e||t.extent.spatialReference;return i?O.fromJSON(i):null}readPixelType(e){return Rt.fromJSON(e)||e}writePixelType(e,t,i){(V(this.serviceRasterInfo)||this.pixelType!==this.serviceRasterInfo.pixelType)&&(t[i]=Rt.toJSON(e))}readVersion(e,t){let i=t.currentVersion;return i||(i=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),i}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let i=e;if(!this._isPicture()&&this.renderer&&this._symbolizer&&!this.pixelFilter){const s=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(this.renderer.toJSON()),r=this._rasterJobHandler.instance,{bandIds:n}=this;if(r){s&&(this._symbolizer.bind(),await r.updateSymbolizer(this._symbolizer,t),this._cachedRendererJson=this.renderer.toJSON());const a=await r.symbolize({bandIds:n,...e},t);i={extent:e.extent,pixelBlock:a}}else i={extent:e.extent,pixelBlock:this._symbolizer.symbolize({bandIds:n,...e})}}return i}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeHistograms(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsComputeHistograms)throw new C("imagery-layer:compute-histograms","this operation is not supported on the input image service");e=_(dt,e).clone();const{raster:i,mosaicRule:s,renderingRule:r}=this;return r&&null==e.renderingRule&&(e.renderingRule=r),s&&null==e.mosaicRule&&(e.mosaicRule=s),i&&null==e.raster&&(e.raster=i),async function(e,t,i){const s=await ot(e,t,i),r=R(e),{data:n}=await f(`${r.path}/computeHistograms`,s);return{histograms:n.histograms}}(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsComputeStatisticsHistograms)throw new C("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");e=_(dt,e).clone();const{raster:i,mosaicRule:s,renderingRule:r}=this;return r&&null==e.renderingRule&&(e.renderingRule=r),s&&null==e.mosaicRule&&(e.mosaicRule=s),i&&null==e.raster&&(e.raster=i),async function(e,t,i){const s=await ot(e,t,i),r=R(e),{data:n}=await f(`${r.path}/computeStatisticsHistograms`,s),{statistics:a}=n;return null!=a&&a.length&&a.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a,histograms:n.histograms}}(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return g(t)?t.get(e):void 0}getFieldDomain(e,t){const i=this.getField(e);return i?i.domain:null}fetchImage(e,t,i,s={}){if(null==e||null==t||null==i)return Promise.reject(new C("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required."));const r=this.renderer||this._symbolizer?this.generateRasterInfo(this.renderingRule,{signal:s.signal}):null;return q(r).then((r=>{r&&(this.rasterInfo=r);const n={imageServiceParameters:this.getExportImageServiceParameters(e,t,i,s.timeExtent),imageProps:{extent:e,width:t,height:i,format:this.format},requestAsImageElement:s.requestAsImageElement&&!this.pixelFilter||!1,signal:s.signal};return this._requestArrayBuffer(n)}))}fetchKeyProperties(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return f(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>e.data))}fetchRasterAttributeTable(e){const t=e&&e.renderingRule&&e.renderingRule.toJSON();return this.version<10.1?Promise.reject(new C("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):f(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3&&t?JSON.stringify(t):null})}).then((e=>m.fromJSON(e.data)))}async getCatalogItemRasterInfo(e,t){const i=f(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t}).then((e=>e.data)),s=f(this.parsedUrl.path+"/"+e+"/info/keyProperties",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>{})),r=await Promise.all([i,s]);if(!r[0])return;const n=N.fromJSON(r[0].extent),a=r[0].statistics?r[0].statistics.map((e=>({min:e[0],max:e[1],avg:e[2],stddev:e[3]}))):null;return new be({bandCount:r[0].bandCount,extent:n,spatialReference:n.sr,pixelSize:new d({x:r[0].pixelSizeX,y:r[0].pixelSizeY,spatialReference:n.sr}),pixelType:r[0].pixelType.toLowerCase(),statistics:a,histograms:r[0].histograms,keyProperties:r[1]||{}})}async getCatalogItemICSInfo(e,t){const{data:i}=await f(this.parsedUrl.path+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),s=i&&i.ics;if(!s)return;let r=null;try{r=(await f(this.parsedUrl.path+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!r||!r.spatialReference)return{ics:s,icsToPixelTransform:null,icsExtent:null,northDirection:null};const n=this.version>=10.7?f(this.parsedUrl.path+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then((e=>e.data)).catch((()=>({}))):{},a=r.spatialReference,o={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[r]}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},l=f(this.parsedUrl.path+"/project",{query:this._getQueryParams(o),...t}).then((e=>e.data)).catch((()=>({}))),u=(r.xmin+r.xmax)/2,c=(r.ymax-r.ymin)/6,h=r.ymin+c,d=[];for(let e=0;e<5;e++)d.push({x:u,y:h+c*e});const p={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:d}),inSR:a.wkid||JSON.stringify(a),outSR:"0:"+e},m=f(this.parsedUrl.path+"/project",{query:this._getQueryParams(p),...t}).then((e=>e.data)).catch((()=>({}))),y=await Promise.all([n,l,m]);let g=y[0].ipxf;if(null==g){var v,w,R;const e=null==(v=s.geodataXform)?void 0:v.xf_0;"topup"===(null==e||null==(w=e.name)?void 0:w.toLowerCase())&&6===(null==e||null==(R=e.coefficients)?void 0:R.length)&&(g={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:e.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const S=N.fromJSON(y[1]&&y[1].geometries&&y[1].geometries[0]);S&&(S.spatialReference=new O({wkid:0,imageCoordinateSystem:s}));const b=y[2].geometries?y[2].geometries.filter((e=>null!=e&&null!=e.x&&null!=e.y&&"NaN"!==e.x&&"NaN"!==e.y)):[],I=b.length;if(I<3)return{ics:s,icsToPixelTransform:g,icsExtent:S,northDirection:null};let x=0,j=0,T=0,M=0;for(let e=0;e<I;e++)x+=b[e].x,j+=b[e].y,T+=b[e].x*b[e].x,M+=b[e].x*b[e].y;const F=(I*M-x*j)/(I*T-x*x);let D=0;const A=b[4].x>b[0].x,P=b[4].y>b[0].y;return F===1/0?D=P?90:270:0===F?D=A?0:180:F>0?D=A?180*Math.atan(F)/Math.PI:180*Math.atan(F)/Math.PI+180:F<0&&(D=P?180+180*Math.atan(F)/Math.PI:360+180*Math.atan(F)/Math.PI),{ics:s,icsToPixelTransform:g,icsExtent:S,northDirection:D}}async generateRasterInfo(e,t){if((!e||"none"===e.functionName.toLowerCase()||this._isVectorFieldResampleFunction(e))&&g(this.serviceRasterInfo))return this.serviceRasterInfo;const i=function(e){if(!e)return null;const t=JSON.stringify(e).match(/"rasterFunction":"(.*?")/gi),i=null==t?void 0:t.map((e=>e.replace('"rasterFunction":"',"").replace('"',"")));return i?i.join("/"):null}(e);if(this._functionRasterInfos[i])return this._functionRasterInfos[i];const s=this._generateRasterInfo(e,t);this._functionRasterInfos[i]=s;try{return await s}catch{return this._functionRasterInfos[i]=null,null}}getExportImageServiceParameters(e,t,i,s){const r=(e=e.clone().shiftCentralMeridian()).spatialReference;let n;if(r.imageCoordinateSystem){const{id:e,referenceServiceName:t}=r.imageCoordinateSystem;n=null!=e?t?this.parsedUrl.path.toLowerCase().indexOf("/"+t.toLowerCase()+"/")>-1?"0:"+e:JSON.stringify({icsid:e,icsns:t}):"0:"+e:JSON.stringify({ics:r.imageCoordinateSystem})}else n=r.wkid||JSON.stringify(r.toJSON());g(this.serviceRasterInfo)&&this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const a=this.exportImageServiceParameters.toJSON(),{bandIds:o,noData:l}=a;let{renderingRule:u}=a;const c=this.renderingRule&&"none"!==this.renderingRule.functionName.toLowerCase();if(null==o||!o.length||!c||this.renderer&&"raster-stretch"!==this.renderer.type)a.bandIds=null==o?void 0:o.join(",");else{const e={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:o}};if("Stretch"===u.rasterFunction)e.rasterFunctionArguments.Raster=u.rasterFunctionArguments.Raster,u.rasterFunctionArguments.Raster=e;else if("Colormap"===u.rasterFunction){const t=u.rasterFunctionArguments.Raster;"Stretch"===(null==t?void 0:t.rasterFunction)?(e.rasterFunctionArguments.Raster=t.rasterFunctionArguments.Raster,t.rasterFunctionArguments.Raster=e):(e.rasterFunctionArguments.Raster=t,u.rasterFunctionArguments.Raster=e)}else e.rasterFunctionArguments.Raster=u,u=e;a.bandIds=void 0}l instanceof Array&&l.length>0&&(a.noData=l.join(","));const h=this._serviceSupportsMosaicRule?this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,s):null;a.mosaicRule=h&&JSON.stringify(h),a.renderingRule=u&&JSON.stringify(u);const d={};if(s){const{start:e,end:t}=s.toJSON();e&&t&&e===t?d.time=""+e:null==e&&null==t||(d.time=`${null==e?"null":e},${null==t?"null":t}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:t+","+i,...a,...d}}async getSamples(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsGetSamples)throw new C("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=_(ft,e).clone();const{raster:i}=this;return i&&null==e.raster&&(e.raster=i),lt(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(await this._fetchCapabilities(null==t?void 0:t.signal),!this.capabilities.operations.supportsIdentify)throw new C("imagery-layer:query-rasters","query operation is not supported on the input image service");e=_(yt,e).clone();const{raster:i,mosaicRule:s,renderingRule:r}=this;if(r&&null==e.renderingRule&&(e.renderingRule=r),s&&null==e.mosaicRule){const t=this._combineMosaicRuleWithTimeExtent(s,e.timeExtent);e.mosaicRule=k(t)}return i&&null==e.raster&&(e.raster=i),ut(this.url,e,this._getRequestOptions(t))}createQuery(){const e=new E;return e.outFields=["*"],e.returnGeometry=!0,e.where=this.definitionExpression||"1=1",e}async queryRasters(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),z(this.url,e,t)}async queryObjectIds(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),J(this.url,e,t)}async queryRasterCount(e,t){return({query:e,requestOptions:t}=await this._prepareForQuery(e,t)),G(this.url,e,t)}queryVisibleRasters(e,t){if(!e)return Promise.reject(new C("imagery-layer: query-visible-rasters","missing query parameter"));const{pixelSize:i,returnDomainValues:s,returnTopmostRaster:r,showNoDataRecords:n}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let a=!1,o=null,l=null;const u="raster.servicepixelvalue",c=this.rasterFunctionNamesIndex;if(g(e.outFields)&&(a=e.outFields.some((e=>-1===e.toLowerCase().indexOf(u))),this.version>=10.4)){const t=e.outFields.filter((e=>e.toLowerCase().indexOf(u)>-1&&e.length>u.length)).map((e=>{const t=e.slice(u.length+1);return[this._updateRenderingRulesFunctionName(t,c),t]}));o=t.map((e=>new qe({functionName:e[0]}))),l=t.map((e=>e[1])),0===o.length?this.renderingRule?(o.push(this.renderingRule),l.push(this.renderingRule.functionName)):o=null:this.renderingRule&&!o.some((e=>e.functionName===this.renderingRule.functionName))&&(o.push(this.renderingRule),l.push(this.renderingRule.functionName))}const h=V(e.outSpatialReference)||e.outSpatialReference.equals(this.spatialReference),d=e.timeExtent||this.timeExtent,p=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,d),m=this._getQueryParams({geometry:e.geometry,timeExtent:d,mosaicRule:p,renderingRule:this.version<10.4?this.renderingRule:null,renderingRules:o,pixelSize:i,returnCatalogItems:a,returnGeometry:h,raster:this.raster,maxItemCount:r?1:null});delete m.f;const y=new yt(m),v=this.generateRasterInfo(this.renderingRule);return new Promise((i=>{v.then((()=>{ut(this.url,y,{signal:null==t?void 0:t.signal,query:{...this.customParameters}}).then((t=>{const r=e.outFields;if(a&&!h&&t.catalogItems&&t.catalogItems.features&&t.catalogItems.features.length>0){const a=this.objectIdField||"ObjectId",o=t.catalogItems.features,u=o.map((e=>e.attributes&&e.attributes[a])),c=new E({objectIds:u,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[a]});return this.queryRasters(c).then((u=>{u&&u.features&&u.features.length>0&&u.features.forEach((t=>{o.forEach((i=>{i.attributes[a]===t.attributes[a]&&(i.geometry=new U(t.geometry),i.geometry.spatialReference=e.outSpatialReference)}))})),i(this._processVisibleRastersResponse(t,{returnDomainValues:s,templateRRFunctionNames:l,showNoDataRecords:n,templateFields:r}))})).catch((()=>{throw new C("imagery-layer:query-visible-rasters","encountered error when querying visible rasters geometry")}))}i(this._processVisibleRastersResponse(t,{returnDomainValues:s,templateRRFunctionNames:l,showNoDataRecords:n,templateFields:r}))})).catch((()=>{throw new C("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}))}))}))}async fetchVariableStatisticsHistograms(e,t){const i=f(this.parsedUrl.path+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.statistics})),s=f(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),r=await Promise.all([i,s]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:r[0]||null,histograms:r[1]||null}}async _fetchService(e){await this._fetchServiceInfo(e),g(this.serviceRasterInfo)&&!this.rasterInfo&&(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,i=g(this.serviceRasterInfo)?Promise.resolve(this.serviceRasterInfo):this._fetchAuxiliaryRasterInfo({serviceInfo:t,signal:e}).then((e=>(this._set("serviceRasterInfo",e),e))),s=this.renderingRule&&"none"!==this.renderingRule.functionName.toLowerCase()?this.generateRasterInfo(this.renderingRule,{signal:e}):null,r=this._getRasterFunctionInfos();return Promise.all([i,s,r]).then((e=>{this._set("rasterInfo",e[1]?e[1]:e[0]),e[2]&&this._set("rasterFunctionInfos",e[2]),this.renderer&&!this._isSupportedRenderer(this.renderer)&&(this.renderer=null,wt.warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._configDefaultRenderer(),this.watch("renderer",(()=>this._configDefaultRenderer())),this.watch("renderingRule",(e=>{(this.renderer||this._symbolizer||this.popupEnabled&&this.popupTemplate)&&this.generateRasterInfo(e).then((e=>{e&&(this.rasterInfo=e)}))}));const t=g(this.serviceRasterInfo)&&this.serviceRasterInfo.multidimensionalInfo;t&&this._updateMultidimensionalDefinition(t)}))}_combineMosaicRuleWithTimeExtent(e,t){const i=this.timeInfo;if(V(e)||V(this.multidimensionalInfo)||V(t)||V(null==i?void 0:i.startField))return e;const{startField:s}=i;var r;if(e=e.clone(),"mosaic-dataset"===this._serviceSourceType)return e.multidimensionalDefinition=null==(r=e.multidimensionalDefinition)?void 0:r.filter((e=>e.dimensionName!==s)),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const n=e.multidimensionalDefinition.filter((e=>e.dimensionName===s)),a=g(t.start)?t.start.getTime():null,o=g(t.end)?t.end.getTime():null,l=null==a||null==o||a===o,u=l?[a||o]:[[a,o]],c=this.version>=10.8;if(n.length)n.forEach((e=>{e.dimensionName===s&&(c?(e.dimensionName=null,e.isSlice=null,e.values=null):(e.isSlice=l,e.values=u))}));else if(!c){const t=e.multidimensionalDefinition.filter((e=>null!=e.variableName&&null==e.dimensionName));t.length?t.forEach((e=>{e.dimensionName=s,e.isSlice=l,e.values=u})):e.multidimensionalDefinition.push(new ue({variableName:"",dimensionName:s,isSlice:l,values:u}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return V(e)?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter((e=>!(!e.variableName&&!e.dimensionName))),0===e.multidimensionalDefinition.length&&(e.multidimensionalDefinition=null)),"mosaic-dataset"!==this._serviceSourceType&&null==e.multidimensionalDefinition?null:e)}async _prepareForQuery(e,t){var i;if(await this._fetchCapabilities(null==(i=t)?void 0:i.signal),!this.capabilities.operations.supportsQuery)throw new C("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=g(e)?_(E,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new we;this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e}),(()=>null)),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0}_isSupportedRenderer(e){const{rasterInfo:t,renderingRule:i}=this;return"unique-value"===e.type&&i&&"none"!==i.functionName.toLowerCase()&&1===t.bandCount&&["u8","s8"].includes(t.pixelType)||ye(this.rasterInfo).includes(this.renderer.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){var t;let i=this.sourceJSON;if(!i){const{data:t,ssl:s}=await f(this.parsedUrl.path,{query:this._getQueryParams(),signal:e});i=t,this.sourceJSON=i,s&&(this.url=this.url.replace(/^http:/i,"https:"))}if((null==(t=i.capabilities)?void 0:t.toLowerCase().split(",").map((e=>e.trim())).indexOf("tilesonly"))>-1)throw new C("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(i,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){var t;return e.serviceSourceType?"esriImageServiceSourceTypeMosaicDataset"===e.serviceSourceType:(null==(t=e.fields)?void 0:t.length)>0}_isMosaicRuleSupported(e){var t;if(!e)return!1;const i=this._isMosaicDataset(e),s=e.currentVersion>=10.71&&e.hasMultidimensions&&e.timeInfo&&!(e.objectIdField&&(null==(t=e.fields)?void 0:t.length)>1);return i||s}_isVectorFieldResampleFunction(e){if(!g(e))return!1;const{functionName:t,functionArguments:i}=e,s="resample"===t.toLowerCase(),r=(null==i?void 0:i.ResampleType)||(null==i?void 0:i.resampleType);return s&&(7===r||10===r)}_isPicture(){return!this.format||this.format.indexOf("jpg")>-1||this.format.indexOf("png")>-1}_configDefaultRenderer(){if(!this._isPicture()&&!this.pixelFilter){if(!this.bandIds&&this.rasterInfo.bandCount>=3){const e=ge(this.rasterInfo);!e||3===this.rasterInfo.bandCount&&0===e[0]&&1===e[1]&&2===e[2]||(this.bandIds=e)}var e,t;this.renderer||(this.renderer=ve(this.rasterInfo,{bandIds:this.bandIds,variableName:this.renderingRule?null:null==(e=this.mosaicRule)||null==(t=e.multidimensionalDefinition)?void 0:t[0].variableName})),this._symbolizer?(this._symbolizer.rendererJSON=fe(this.renderer.toJSON()),this._symbolizer.rasterInfo=this.rasterInfo):this._symbolizer=new Ie({rendererJSON:this.renderer.toJSON(),rasterInfo:this.rasterInfo}),this._symbolizer.bind()||(this._symbolizer=null)}}_clonePixelData(e){return null==e?e:{extent:e.extent&&e.extent.clone(),pixelBlock:g(e.pixelBlock)&&e.pixelBlock.clone()}}_getQueryParams(e){const{raster:t,viewId:i}=this;return{raster:t,viewId:i,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...null==e?void 0:e.query,...this.customParameters}}}_decodePixelBlock(e,t,i){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):xe(e,t,i)}async _fetchMultidimensionalInfo(e){var t;const i=await f(this.parsedUrl.path+"/multidimensionalInfo",{query:this._getQueryParams(),signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.multidimensionalInfo}));return null!=(t=i.variables)&&t.length&&i.variables.forEach((e=>{var t;null!=(t=e.statistics)&&t.length&&e.statistics.forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation}))})),i}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;return this.serviceRasterInfo?t:t&&this.version>=10.3?1===t.length&&"none"===t[0].name.toLowerCase()?t:f(this.parsedUrl.path+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e}).then((e=>{var t;return null==(t=e.data)?void 0:t.rasterFunctionInfos})):null}_fetchAuxiliaryRasterInfo(e){const t=e&&e.serviceInfo;if(!t)return Promise.reject(new C("imagery-layer:fetch-metadata","valid serviceInfo is required"));const i=e.renderingRule?JSON.stringify(e.renderingRule.toJSON()):null,s=e.signal,r=!!(t.hasRasterAttributeTable&&this.version>=10.1)&&f(this.parsedUrl.path+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.1?i:null}),signal:s}).then((e=>m.fromJSON(e.data))).catch((()=>null)),n=!!(t.hasColormap&&this.version>=10.1)&&f(this.parsedUrl.path+"/colormap",{query:this._getQueryParams({renderingRule:this.version>=10.6?i:null}),signal:s}).then((e=>{var t;return null==(t=e.data)?void 0:t.colormap})),a=!!(t.hasHistograms&&this.version>=10.1)&&f(this.parsedUrl.path+"/histograms",{query:this._getQueryParams({renderingRule:this.version>=10.1?i:null}),signal:s}).then((e=>{var t;return null==(t=e.data)?void 0:t.histograms})),o=this.version>=10.3&&f(this.parsedUrl.path+"/keyProperties",{query:this._getQueryParams({renderingRule:i}),signal:s}).then((e=>e.data)).catch((()=>{})),l=!!(t.hasMultidimensions&&this.version>=10.3)&&this._fetchMultidimensionalInfo();return Promise.all([r,n,a,o,l]).then((e=>{let i=null;if(t.minValues&&t.minValues.length===t.bandCount){i=[];for(let e=0;e<t.minValues.length;e++)i.push({min:t.minValues[e],max:t.maxValues[e],avg:t.meanValues[e],stddev:t.stdvValues[e]})}const s=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),r=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),n=O.fromJSON(t.spatialReference||t.extent.spatialReference);return new be({width:s,height:r,bandCount:t.bandCount,extent:N.fromJSON(t.extent),spatialReference:n,pixelSize:new d({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:n}),pixelType:t.pixelType.toLowerCase(),statistics:i,attributeTable:e[0]||null,colormap:e[1]||null,histograms:e[2]||null,keyProperties:e[3]||{},multidimensionalInfo:e[4]||null})}))}_requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:i,signal:s}=e;if(i&&!this.pixelFilter&&t.format&&t.format.indexOf("png")>-1)return f(this.parsedUrl.path+"/exportImage",{responseType:"image",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:s}).then((e=>({imageElement:e.data,params:t})));const r=this._initJobHandler(),n=f(this.parsedUrl.path+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:s});return Promise.all([n,r]).then((e=>{const i=e[0].data,r=t.format||"jpgpng";let n=r;if("bsq"!==n&&"bip"!==n&&(n=je(i)),!n)throw new C("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(i)));const a="gif"===r||"bmp"===r||r.indexOf("png")>-1&&("png"===n||"jpg"===n),o={signal:s};return a?xe(i,{useCanvas:!0,...t},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t}))):this._decodePixelBlock(i,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:r},o).then((e=>({pixelData:{pixelBlock:e,extent:t.extent},params:t})))}))}async _generateRasterInfo(e,t){const{data:i}=await f(this.parsedUrl.path,{query:this._getQueryParams({renderingRule:e}),...t});return await this._fetchAuxiliaryRasterInfo({serviceInfo:i,renderingRule:e,...t})}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this._defaultServiceMosaicRule&&this._defaultServiceMosaicRule.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;const t=e.variables[0].dimensions,i=[];for(const e in t)if(t.hasOwnProperty(e)){const s=t[e],r=s.extent;let n=!0,a=[r[0]];s.hasRanges&&!0===s.hasRanges?(n=!1,a=[s.values[0]]):"stdz"===s.name.toLowerCase()&&Math.abs(r[1])<=Math.abs(r[0])&&(a=[r[1]]),i.push(new ue({variableName:"",dimensionName:t[e].name,isSlice:n,values:a}))}if(i.length>0){this.mosaicRule=this.mosaicRule||new Ye;const e=this.mosaicRule.multidimensionalDefinition;(!e||e&&e.length<=0)&&(this.mosaicRule.multidimensionalDefinition=i)}}_formatAttributeValue(e,t){if("string"==typeof e){const i=this._getFieldInfo(this.popupTemplate&&this.popupTemplate.fieldInfos,t),s=i&&i.format;if(s){let t,i;return e.trim().indexOf(",")>-1?(t=",",i=t+" ",this._formatDelimitedString(e,t,i,s)):e.trim().indexOf(" ")>-1?(t=i=" ",this._formatDelimitedString(e,t,i,s)):this._formatNumberFromString(e,s)}}return e}_getFieldInfo(e,t){if(!e||!e.length||!t)return;const i=t.toLowerCase();let s;return e.some((e=>!(!e.fieldName||e.fieldName.toLowerCase()!==i&&e.fieldName.toLowerCase()!==i.replace(/ /g,"_")||(s=e,0)))),s}_formatDelimitedString(e,t,i,s){return e&&t&&i&&s?e.trim().split(t).map((e=>this._formatNumberFromString(e,s))).join(i):e}_formatNumberFromString(e,t){if(!e||!t)return e;const i=Number(e);return isNaN(i)?e:t.format(i)}_processVisibleRastersResponse(e,t){t=t||{};const i=e.value,{templateRRFunctionNames:s,showNoDataRecords:r,returnDomainValues:n,templateFields:a}=t,o=e.processedValues;let l=e.catalogItems&&e.catalogItems.features,u=e.properties&&e.properties.Values&&e.properties.Values.map((e=>e.replace(/ /gi,", ")))||[];const c=this.objectIdField||"ObjectId",h="string"==typeof i&&i.toLowerCase().indexOf("nodata")>-1,d=[];if(i&&!l&&!h){const e={};e[c]=0,u=[i],l=[new B(this.fullExtent,null,e)]}if(!l)return[];let p,m,y;this._updateResponseFieldNames(l,a),h&&!r&&(l=[]);for(let e=0;e<l.length;e++){if(p=l[e],null!=i&&!h){if(m=u[e],y=this.renderingRule&&o&&o.length>0&&s&&s.length>0&&s.indexOf(this.renderingRule.functionName)>-1?o[s.indexOf(this.renderingRule.functionName)]:i,"nodata"===m.toLowerCase()&&!r)continue;const t="Raster.ItemPixelValue",n="Raster.ServicePixelValue";p.attributes[t]=this._formatAttributeValue(m,t),p.attributes[n]=this._formatAttributeValue(y,n),this._updateFeatureWithMagDirValues(p,m);const a=this.fields&&this.fields.length>0;let l=this.renderingRule&&g(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable?a?m:i:y;this.renderingRule||(l=a?m:i),this._updateFeatureWithRasterAttributeTableValues(p,l)}if(p.sourceLayer=this,n&&this._updateFeatureWithDomainValues(p),s&&o&&s.length===o.length)for(let e=0;e<s.length;e++){const t="Raster.ServicePixelValue."+s[e];p.attributes[t]=this._formatAttributeValue(o[e],t)}d.push(l[e])}return d}_updateFeatureWithRasterAttributeTableValues(e,t){const i=this.rasterInfo&&this.rasterInfo.attributeTable||g(this.serviceRasterInfo)&&this.serviceRasterInfo.attributeTable,s=i&&i.features;if(!s)return;const r=i.fields,n=r.map((e=>e.name)).filter((e=>"value"===e.toLowerCase())),a=n&&n[0];if(!a)return;const o=s.filter((e=>e.attributes[a]===(null!=t?parseInt(t,10):null)));o&&o[0]&&r.forEach((t=>{const i=this.rasterAttributeTableFieldPrefix+t.name;e.attributes[i]=this._formatAttributeValue(o[0].attributes[t.name],i)}))}_updateFeatureWithMagDirValues(e,t){if("esriImageServiceDataTypeVector-UV"!==this.serviceDataType&&"esriImageServiceDataTypeVector-MagDir"!==this.serviceDataType)return;const i=t.split(/,\s*/).map((e=>parseFloat(e))),s=i.map((e=>[e])),r=i.map((e=>({minValue:e,maxValue:e,noDataValue:null}))),n=new Te({height:1,width:1,pixelType:"f32",pixels:s,statistics:r});null!=this.pixelFilter&&this.pixelFilter({pixelBlock:n,extent:new N(0,0,0,0,this.spatialReference)});const a="esriImageServiceDataTypeVector-MagDir"===this.serviceDataType?[n.pixels[0][0],n.pixels[1][0]]:Me([n.pixels[0][0],n.pixels[1][0]]);e.attributes["Raster.Magnitude"]=a[0],e.attributes["Raster.Direction"]=a[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter((e=>e.domain&&"coded-value"===e.domain.type));null!=t&&t.forEach((t=>{const i=e.attributes[t.name];if(null!=i){const s=t.domain.codedValues.filter((e=>e.code===i))[0];s&&(e.attributes[t.name]=s.name)}}))}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const i=this.fieldsIndex;g(i)&&e.forEach((e=>{if(e&&e.attributes)for(const s of t)if(i.has(s)){const t=i.get(s).name;t!==s&&(e.attributes[s]=e.attributes[t],delete e.attributes[t])}}))}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if("Raw"===e)return e.replace("Raw","None");const i=e.toLowerCase().replace(/ /gi,"_");return t.has(i)?t.get(i):e}_isRFTJson(e){return e.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map((e=>e.trim())):["image","catalog"],{currentVersion:i,advancedQueryCapabilities:s,maxRecordCount:r}=e,n=t.indexOf("image")>-1,a="esriImageServiceDataTypeElevation"===e.serviceDataType,o=!!(e.spatialReference||e.extent&&e.extent.spatialReference),l=t.includes("edit");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:n,supportsExportImage:n,supportsIdentify:n,supportsMeasure:t.indexOf("mensuration")>-1&&o,supportsDownload:t.indexOf("download")>-1,supportsQuery:t.indexOf("catalog")>-1&&e.fields&&e.fields.length>0,supportsGetSamples:i>=10.2&&n,supportsProject:i>=10.3&&n,supportsComputeStatisticsHistograms:i>=10.4&&n,supportsQueryBoundary:i>=10.6&&n,supportsCalculateVolume:i>=10.7&&a,supportsComputePixelLocation:i>=10.7&&t.indexOf("catalog")>-1,supportsAdd:l,supportsDelete:l,supportsEditing:l,supportsUpdate:l,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1},query:{maxRecordCount:r,maxRecordCountFactor:void 0,supportsStatistics:!(null==s||!s.supportsStatistics),supportsOrderBy:!(null==s||!s.supportsOrderBy),supportsDistinct:!(null==s||!s.supportsDistinct),supportsPagination:!(null==s||!s.supportsPagination),supportsStandardizedQueriesOnly:!(null==s||!s.useStandardizedQueries),supportsPercentileStatistics:!(null==s||!s.supportsPercentileStatistics),supportsCentroid:!(null==s||!s.supportsReturningGeometryCentroid),supportsDistance:!(null==s||!s.supportsQueryWithDistance),supportsExtent:!(null==s||!s.supportsReturningQueryExtent),supportsGeometryProperties:!(null==s||!s.supportsReturningGeometryProperties),supportsHavingClause:!(null==s||!s.supportsHavingClause),supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0}}}};return e([t()],a.prototype,"_functionRasterInfos",void 0),e([t()],a.prototype,"_rasterJobHandler",void 0),e([t()],a.prototype,"_symbolizer",void 0),e([t({dependsOn:["_serviceSupportsMosaicRule"]})],a.prototype,"_defaultServiceMosaicRule",void 0),e([i("_defaultServiceMosaicRule",["defaultMosaicMethod"])],a.prototype,"readDefaultServiceMosaicRule",null),e([t()],a.prototype,"_cachedRendererJson",void 0),e([t({readOnly:!0})],a.prototype,"_serviceSourceType",void 0),e([i("_serviceSourceType",["serviceSourceType","fields"])],a.prototype,"readServiceSourceType",null),e([t({readOnly:!0})],a.prototype,"_serviceSupportsMosaicRule",void 0),e([i("_serviceSupportsMosaicRule",["currentVersion","fields"])],a.prototype,"readServiceSupportsMosaicRule",null),e([t()],a.prototype,"rasterAttributeTableFieldPrefix",void 0),e([t({readOnly:!0})],a.prototype,"rasterFunctionNamesIndex",null),e([t()],a.prototype,"adjustAspectRatio",void 0),e([t({readOnly:!0}),p("serviceRasterInfo.bandCount")],a.prototype,"bandCount",void 0),e([t({type:[c],json:{write:!0}})],a.prototype,"bandIds",void 0),e([i("bandIds")],a.prototype,"readBandIds",null),e([t({readOnly:!0,json:{read:!1}})],a.prototype,"capabilities",void 0),e([i("service","capabilities",["capabilities","currentVersion","serviceDataType"])],a.prototype,"readCapabilities",null),e([t({type:Number})],a.prototype,"compressionQuality",void 0),e([s("compressionQuality")],a.prototype,"writeCompressionQuality",null),e([t({type:Number})],a.prototype,"compressionTolerance",void 0),e([s("compressionTolerance")],a.prototype,"writeCompressionTolerance",null),e([t({json:{read:{source:"copyrightText"}}})],a.prototype,"copyright",void 0),e([t({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],a.prototype,"definitionExpression",void 0),e([t({readOnly:!0,constructOnly:!0})],a.prototype,"exportImageServiceParameters",void 0),e([t()],a.prototype,"rasterInfo",void 0),e([t({readOnly:!0,type:[M]})],a.prototype,"fields",void 0),e([t({readOnly:!0})],a.prototype,"fieldsIndex",null),e([t({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"],json:{write:!0}})],a.prototype,"format",null),e([i("service","format",["serviceDataType"])],a.prototype,"readFormat",null),e([t({type:N})],a.prototype,"fullExtent",void 0),e([t({readOnly:!0})],a.prototype,"hasMultidimensions",void 0),e([t({json:{read:{source:"maxImageHeight"}}})],a.prototype,"imageMaxHeight",void 0),e([t({json:{read:{source:"maxImageWidth"}}})],a.prototype,"imageMaxWidth",void 0),e([t({type:String,json:{type:ce.jsonValues,read:ce.read,write:ce.write}})],a.prototype,"interpolation",void 0),e([t()],a.prototype,"minScale",void 0),e([i("service","minScale")],a.prototype,"readMinScale",null),e([t()],a.prototype,"maxScale",void 0),e([i("service","maxScale")],a.prototype,"readMaxScale",null),e([t({type:Ye})],a.prototype,"mosaicRule",null),e([i("mosaicRule",["mosaicRule","defaultMosaicMethod"])],a.prototype,"readMosaicRule",null),e([s("mosaicRule")],a.prototype,"writeMosaicRule",null),e([t({readOnly:!0}),p("serviceRasterInfo.multidimensionalInfo")],a.prototype,"multidimensionalInfo",void 0),e([t({json:{type:c}})],a.prototype,"noData",void 0),e([s("noData")],a.prototype,"writeNoData",null),e([t({type:String,json:{type:he.jsonValues,read:he.read,write:he.write}})],a.prototype,"noDataInterpretation",void 0),e([t({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],a.prototype,"objectIdField",void 0),e([i("objectIdField")],a.prototype,"readObjectIdField",null),e([t({})],a.prototype,"geometryType",void 0),e([t({})],a.prototype,"typeIdField",void 0),e([t({})],a.prototype,"types",void 0),e([t({readOnly:!0})],a.prototype,"parsedUrl",null),e([t({readOnly:!0}),p("serviceRasterInfo.pixelSize.x")],a.prototype,"pixelSizeX",void 0),e([t({readOnly:!0}),p("serviceRasterInfo.pixelSize.y")],a.prototype,"pixelSizeY",void 0),e([t({type:Function})],a.prototype,"pixelFilter",void 0),e([t()],a.prototype,"raster",void 0),e([t()],a.prototype,"viewId",void 0),e([t({types:de,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:pe,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type})}}}}})],a.prototype,"renderer",void 0),e([i("renderer")],a.prototype,"readRenderer",null),e([s("renderer")],a.prototype,"writeRenderer",null),e([t(F)],a.prototype,"opacity",void 0),e([t({readOnly:!0}),p("serviceRasterInfo.attributeTable")],a.prototype,"rasterAttributeTable",void 0),e([t({readOnly:!0})],a.prototype,"rasterFields",null),e([t({constructOnly:!0})],a.prototype,"rasterFunctionInfos",void 0),e([t({type:qe})],a.prototype,"renderingRule",null),e([i("renderingRule",["renderingRule","rasterFunctionInfos"])],a.prototype,"readRenderingRule",null),e([s("renderingRule")],a.prototype,"writeRenderingRule",null),e([t()],a.prototype,"serviceDataType",void 0),e([t({readOnly:!0,type:O})],a.prototype,"spatialReference",void 0),e([i("spatialReference",["spatialReference","extent"])],a.prototype,"readSpatialReference",null),e([t({json:{type:Rt.jsonValues}})],a.prototype,"pixelType",void 0),e([i("pixelType")],a.prototype,"readPixelType",null),e([s("pixelType")],a.prototype,"writePixelType",null),e([t({constructOnly:!0,type:be})],a.prototype,"serviceRasterInfo",void 0),e([t()],a.prototype,"sourceJSON",void 0),e([t(D)],a.prototype,"url",void 0),e([t({readOnly:!0})],a.prototype,"version",void 0),e([i("version",["currentVersion","fields","timeInfo"])],a.prototype,"readVersion",null),a=e([n("esri.layers.mixins.ArcGISImageService")],a),a};let xt=class extends(H(W($(K(X(Y(It(Z(ee(te(ie))))))))))){constructor(...e){super(...e),this.legendEnabled=!0,this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=g(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(se).then((()=>this._fetchService(t)))),Promise.resolve(this)}writeOperationalLayerType(e,t,i){var s;const r="vector-field"===(null==(s=this.renderer)?void 0:s.type);t[i]=r?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}createPopupTemplate(e){const t=this.rasterFields,i=this.title,s=new Set;let r=!1,n=!1;this.capabilities&&(r=this.capabilities.operations.supportsQuery&&this.fields&&this.fields.length>0,n=r&&("esriImageServiceDataTypeVector-UV"===this.serviceDataType||"esriImageServiceDataTypeVector-MagDir"===this.serviceDataType));const a=new Set;r&&(a.add("raster.itempixelvalue"),n&&a.add("raster.magnitude").add("raster.direction"));for(const e of t){const t=e.name.toLowerCase();a.has(t)||t.indexOf("raster.servicepixelvalue.")>-1||s.add(e.name)}return re({fields:t,title:i},{...e,visibleFieldNames:s})}queryFeatures(e,t){return this.queryRasters(e,t).then((e=>{if(null!=e&&e.features)for(const t of e.features)t.layer=t.sourceLayer=this;return e}))}queryFeatureCount(e,t){return this.queryRasterCount(e,t)}redraw(){this.emit("redraw")}};e([t(ne)],xt.prototype,"legendEnabled",void 0),e([t({type:["show","hide"]})],xt.prototype,"listMode",void 0),e([t({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],xt.prototype,"isReference",void 0),e([t({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],xt.prototype,"operationalLayerType",void 0),e([s("web-map","operationalLayerType")],xt.prototype,"writeOperationalLayerType",null),e([t(ae)],xt.prototype,"popupEnabled",void 0),e([t({type:oe,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],xt.prototype,"popupTemplate",void 0),e([t({readOnly:!0})],xt.prototype,"defaultPopupTemplate",null),e([t({readOnly:!0,json:{read:!1}})],xt.prototype,"type",void 0),xt=e([n("esri.layers.ImageryLayer")],xt);const jt=xt;export default jt;