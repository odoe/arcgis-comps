import{a7 as t,bJ as s}from"./p-9ae46e68.js";const i=4294967296,e=t("esri-text-decoder")?new TextDecoder("utf-8"):null,r=t("safari")||t("ios")?6:t("ff")?12:32;class h{constructor(t,s,i=0,e=(t?t.byteLength:0)){this._tag=0,this._dataType=99,this.init(t,s,i,e)}init(t,s,i,e){this._data=t,this._dataView=s,this._pos=i,this._end=e}clone(){return new h(this._data,this._dataView,this._pos,this._end)}pos(){return this._pos}move(t){this._pos=t}nextTag(t){for(;;){if(this._pos===this._end)return!1;const s=this._decodeVarint();if(this._tag=s>>3,this._dataType=7&s,!t||t===this._tag)break;this.skip()}return!0}next(){if(this._pos===this._end)return!1;const t=this._decodeVarint();return this._tag=t>>3,this._dataType=7&t,!0}empty(){return this._pos>=this._end}tag(){return this._tag}getInt32(){return this._decodeVarint()}getInt64(){return this._decodeVarint()}getUInt32(){let t=4294967295;return t=(127&this._data[this._pos])>>>0,this._data[this._pos++]<128?t:(t=(t|(127&this._data[this._pos])<<7)>>>0,this._data[this._pos++]<128?t:(t=(t|(127&this._data[this._pos])<<14)>>>0,this._data[this._pos++]<128?t:(t=(t|(127&this._data[this._pos])<<21)>>>0,this._data[this._pos++]<128?t:(t=(t|(15&this._data[this._pos])<<28)>>>0,this._data[this._pos++]<128?t:void 0))))}getUInt64(){return this._decodeVarint()}getSInt32(){const t=this.getUInt32();return t>>>1^-(1&t)|0}getSInt64(){return this._decodeSVarint()}getBool(){const t=0!==this._data[this._pos];return this._skip(1),t}getEnum(){return this._decodeVarint()}getFixed64(){const t=this._dataView,s=this._pos,e=t.getUint32(s,!0)+t.getUint32(s+4,!0)*i;return this._skip(8),e}getSFixed64(){const t=this._dataView,s=this._pos,e=t.getUint32(s,!0)+t.getInt32(s+4,!0)*i;return this._skip(8),e}getDouble(){const t=this._dataView.getFloat64(this._pos,!0);return this._skip(8),t}getFixed32(){const t=this._dataView.getUint32(this._pos,!0);return this._skip(4),t}getSFixed32(){const t=this._dataView.getInt32(this._pos,!0);return this._skip(4),t}getFloat(){const t=this._dataView.getFloat32(this._pos,!0);return this._skip(4),t}getString(){const t=this._getLength(),s=this._pos,i=this._toString(this._data,s,s+t);return this._skip(t),i}getBytes(){const t=this._getLength(),s=this._pos,i=this._toBytes(this._data,s,s+t);return this._skip(t),i}getLength(){return this._getLengthUnsafe()}processMessageWithArgs(t,s,i,e){const r=this.getMessage(),h=t(r,s,i,e);return r.release(),h}processMessage(t){const s=this.getMessage(),i=t(s);return s.release(),i}getMessage(){const t=this._getLength(),s=h.pool.acquire();return s.init(this._data,this._dataView,this._pos,this._pos+t),this._skip(t),s}release(){h.pool.release(this)}dataType(){return this._dataType}skip(){switch(this._dataType){case 0:this._decodeVarint();break;case 1:this._skip(8);break;case 2:this._skip(this._getLength());break;case 5:this._skip(4);break;default:throw new Error("Invalid data type!")}}skipLen(t){this._skip(t)}_skip(t){if(this._pos+t>this._end)throw new Error("Attempt to skip past the end of buffer!");this._pos+=t}_decodeVarint(){const t=this._data;let s,i=this._pos,e=0;if(this._end-i>=10)do{if(s=t[i++],e|=127&s,0==(128&s))break;if(s=t[i++],e|=(127&s)<<7,0==(128&s))break;if(s=t[i++],e|=(127&s)<<14,0==(128&s))break;if(s=t[i++],e|=(127&s)<<21,0==(128&s))break;if(s=t[i++],e+=268435456*(127&s),0==(128&s))break;if(s=t[i++],e+=34359738368*(127&s),0==(128&s))break;if(s=t[i++],e+=4398046511104*(127&s),0==(128&s))break;if(s=t[i++],e+=562949953421312*(127&s),0==(128&s))break;if(s=t[i++],e+=72057594037927940*(127&s),0==(128&s))break;if(s=t[i++],e+=0x8000000000000000*(127&s),0==(128&s))break;throw new Error("Varint too long!")}while(0);else{let r=1;for(;i!==this._end&&(s=t[i],0!=(128&s));)++i,e+=(127&s)*r,r*=128;if(i===this._end)throw new Error("Varint overrun!");++i,e+=s*r}return this._pos=i,e}_decodeSVarint(){const t=this._decodeVarint();return t%2?-(t+1)/2:t/2}_getLength(){if(2!==this._dataType)throw new Error("Not a delimited data type!");return this._decodeVarint()}_getLengthUnsafe(){return this.getUInt32()}_toString(t,s,i){if((i=Math.min(this._end,i))-s>r&&e){const r=t.subarray(s,i);return e.decode(r)}let h="",n="";for(let e=s;e<i;++e){const s=t[e];128&s?n+="%"+s.toString(16):(h+=decodeURIComponent(n)+String.fromCharCode(s),n="")}return n.length&&(h+=decodeURIComponent(n)),h}_toBytes(t,s,i){return i=Math.min(this._end,i),new Uint8Array(t.buffer,s,i-s)}}h.pool=new s(h,null,(t=>{t._data=null,t._dataView=null}));export{h as a}