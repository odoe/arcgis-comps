import{T as e,cN as t,cO as i,aN as s,r,h as n,w as a,cP as o,cQ as l,cR as h,bE as c,cS as d,b as u,cT as p,E as v,cU as m,e as y,d as w,cV as g,cW as f,bH as b,i as S,cX as T}from"./p-5420851c.js";import{s as j}from"./p-903ad405.js";import"./p-53bb6ab4.js";import"./p-cb40ac66.js";const x=e.getLogger("esri.core.workers.WorkerHandle");class E extends class{constructor(e,i,s,r={}){this._mainMethod=i,this._listeners=[],this._promise=t(e,{...r,schedule:s}).then((e=>{if(void 0===this._thread){this._thread=e,this._promise=null,r.hasInitialize&&this.broadcast({},"initialize");for(const e of this._listeners)this._connectListener(e)}else e.close()})),this._promise.catch((t=>x.error(`Failed to initialize ${e} worker: ${t}`)))}on(e,t){const n={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(n),this._connectListener(n),i((()=>{n.removed=!0,s(this._listeners,n),this._thread&&r(n.threadHandle)&&n.threadHandle.remove()}))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,i){if(this._thread){const s=this.getTransferList(t,e);return this._thread.invoke(e,t,{transferList:s,signal:i})}return this._promise?this._promise.then((()=>(n(i),this.invokeMethod(e,t,i)))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(e,t))):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then((t=>{e.removed||(e.threadHandle=t)}))}}{constructor(e=null){super("LercWorker","_decode",e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,i){return e&&0!==e.byteLength?this.invoke({buffer:e,options:t},i):Promise.resolve(null)}getTransferList(e){return[e.buffer]}release(){--this.ref<=0&&($.forEach(((e,t)=>{e===this&&$.delete(t)})),this.destroy())}}const $=new Map;function I(e=null){let t=$.get(a(e));return t||(r(e)?(t=new E((t=>e.schedule(t))),$.set(e,t)):(t=new E,$.set(null,t))),++t.ref,t}const L=e.getLogger("esri.layers.ElevationLayer");let k=class extends(j(o(l(h(c(T)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=I()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){this._lercDecoder=d(this._lercDecoder)}set minScale(e){this.constructed&&L.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`)}get minScale(){}set maxScale(e){this.constructed&&L.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`)}get maxScale(){}readVersion(e,t){let i=t.currentVersion;return i||(i=9.3),i}load(e){const t=r(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new u("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(p).then((()=>this._fetchImageService(t)))),Promise.resolve(this)}fetchTile(e,t,i,s){const n=r((s=s||{signal:null}).signal)?s.signal:s.signal=(new AbortController).signal,a={responseType:"array-buffer",signal:n},o={noDataValue:s.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,i,s))).then((()=>v(this.getTileUrl(e,t,i),a))).then((e=>this._lercDecoder.decode(e.data,o,n))).then((e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue})))}getTileUrl(e,t,i){const s=m({...this.parsedUrl.query,blankTile:!(!this.tilemapCache&&this.supportsBlankTile)&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${i}${s?"?"+s:""}`}async queryElevation(e,t){const{ElevationQuery:i}=await import("./p-9d51d07c.js");return n(t),(new i).query(this,e,t)}async createElevationSampler(e,t){const{ElevationQuery:i}=await import("./p-9d51d07c.js");return n(t),(new i).createSampler(this,e,t)}_fetchTileAvailability(e,t,i,s){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,i,s):Promise.resolve("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const t={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},i=await v(this.parsedUrl.path,t);i.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i.data,this.read(i.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};y([w({json:{read:{source:"copyrightText"}}})],k.prototype,"copyright",void 0),y([w({readOnly:!0,type:g})],k.prototype,"heightModelInfo",void 0),y([w({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],k.prototype,"path",void 0),y([w({type:["show","hide"]})],k.prototype,"listMode",void 0),y([w({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],k.prototype,"minScale",null),y([w({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],k.prototype,"maxScale",null),y([w({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],k.prototype,"opacity",void 0),y([w({type:["ArcGISTiledElevationServiceLayer"]})],k.prototype,"operationalLayerType",void 0),y([w()],k.prototype,"sourceJSON",void 0),y([w({json:{read:!1},value:"elevation",readOnly:!0})],k.prototype,"type",void 0),y([w(f)],k.prototype,"url",void 0),y([w()],k.prototype,"version",void 0),y([b("version",["currentVersion"])],k.prototype,"readVersion",null),k=y([S("esri.layers.ElevationLayer")],k),k.prototype.fetchTile.__isDefault__=!0;const V=k;export default V;