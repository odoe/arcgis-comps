import{O as e,U as t,e as r,d as n,i as s}from"./p-9ae46e68.js";import{e as a,r as o}from"./p-41655335.js";import{v as i,I as c,aH as u,b2 as f}from"./p-566b0715.js";import{r as p,o as l,n as m}from"./p-47bfad81.js";import{_ as y,a as S,r as d,n as g,o as h,m as j,b as O,c as J,d as N,e as b,f as q}from"./p-f12eb522.js";import{l as R}from"./p-a7080451.js";import"./p-84bf99cb.js";import"./p-fe01b82b.js";async function x(t,r,n){const s=a(t),i={...s.query,f:"json",...r.toJSON()},c=o(i,n);return e(s.path+"/areasAndLengths",c).then((e=>e.data))}async function C(t,r,n,s){const c=r[0].spatialReference,u=a(t),f={...u.query,f:"json",sr:JSON.stringify(c.toJSON()),polygons:JSON.stringify(p(r).geometries),polylines:JSON.stringify(p(n).geometries)},l=o(f,s);return e(u.path+"/autoComplete",l).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new i({spatialReference:c,rings:e})))))}async function w(t,r,n){const s=a(t),c={...s.query,f:"json",...r.toJSON()},u=r.outSpatialReference||r.geometries[0].spatialReference,f=o(c,n);return e(s.path+"/buffer",f).then((e=>(e.data.geometries||[]).map((({rings:e})=>new i({spatialReference:u,rings:e})))))}async function G(t,r,n){const s=r[0].spatialReference,i=a(t),u={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(p(r))},f=o(u,n);return e(i.path+"/convexHull",f).then((({data:e})=>c(e.geometry).set({spatialReference:s})))}async function v(t,r,n,s){const o=a(t),i=r[0].spatialReference,f={...s,query:{...o.query,f:"json",sr:JSON.stringify(i),target:JSON.stringify({geometryType:u(r[0]),geometries:r}),cutter:JSON.stringify(n)}},p=await e(o.path+"/cut",f),{cutIndexes:l,geometries:m=[]}=p.data;return{cutIndexes:l,geometries:m.map((e=>{const t=c(e);return t.spatialReference=i,t}))}}async function A(t,r,n){const s=r.geometries[0].spatialReference,i=a(t),u={...i.query,f:"json",...r.toJSON()},f=o(u,n);return e(i.path+"/densify",f).then((({data:e})=>(e.geometries||[]).map((e=>c(e).set({spatialReference:s})))))}async function H(t,r,n,s){const o=r[0].spatialReference,i=a(t);let f={query:{...i.query,f:"json",sr:JSON.stringify(o.toJSON()),geometries:JSON.stringify(p(r)),geometry:JSON.stringify({geometryType:u(n),geometry:n.toJSON()})}};return s&&(f={...s,...f}),e(i.path+"/difference",f).then((({data:e})=>(e.geometries||[]).map((e=>c(e).set({spatialReference:o})))))}async function I(t,r,n){const s=a(t),i={...s.query,f:"json",...r.toJSON()},c=o(i,n);return e(s.path+"/distance",c).then((({data:e})=>e&&e.distance))}async function T(t,r,n){const s={};s.sr=null!=r.sr&&"object"==typeof r.sr?r.sr.wkid||JSON.stringify(r.sr):r.sr,s.strings=JSON.stringify(r.strings),s.conversionType=y.toJSON(r.conversionType||"mgrs"),s.conversionMode=r.conversionMode;const i=a(t),c={...i.query,f:"json",...s},u=o(c,n);return e(i.path+"/fromGeoCoordinateString",u).then((({data:e})=>e.coordinates))}async function M(t,r,n){const s=(r=S.from(r)).toJSON(),i=d(r),u=a(t),f={...u.query,f:"json",...i},p=s.geometries[0].spatialReference,l=o(f,n);return e(u.path+"/generalize",l).then((({data:e})=>(e.geometries||[]).map((e=>c(e).set({spatialReference:p})))))}async function z(t,r,n,s){const i=r[0].spatialReference,f=a(t),l={...f.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(p(r)),geometry:JSON.stringify({geometryType:u(n),geometry:n.toJSON()})},m=o(l,s);return e(f.path+"/intersect",m).then((({data:e})=>(e.geometries||[]).map((e=>c(e).set({spatialReference:i})))))}function E(t,r,n){const s=r.map((e=>e.toJSON())),i=r[0].spatialReference,u=a(t),f={...u.query,f:"json",sr:i.wkid?i.wkid:JSON.stringify(i.toJSON()),polygons:JSON.stringify(s)},p=o(f,n);return e(u.path+"/labelPoints",p).then((({data:e})=>(e.labelPoints||[]).map((e=>c(e).set({spatialReference:i})))))}async function L(t,r,n){r=g.from(r);const s=h(r),i=a(t),c={...i.query,f:"json",...s},u=o(c,n);return e(i.path+"/lengths",u).then((({data:e})=>e))}async function P(t,r,n){r=j.from(r);const s=O(r),i=a(t),u={...i.query,f:"json",...s},f=r.geometries[0].spatialReference,p=o(u,n);return e(i.path+"/offset",p).then((({data:e})=>(e.geometries||[]).map((e=>c(e).set({spatialReference:f})))))}async function k(t,r,n){r=J.from(r);const s=N(r),i=a(t),c={...i.query,f:"json",...s},u=o(c,n);return e(i.path+"/relation",u).then((({data:e})=>e.relations))}async function D(t,r,n,s){const i=r.spatialReference,f=a(t),p={...f.query,f:"json",sr:JSON.stringify(i.toJSON()),target:JSON.stringify({geometryType:u(r),geometry:r.toJSON()}),reshaper:JSON.stringify(n.toJSON())},l=o(p,s);return e(f.path+"/reshape",l).then((({data:e})=>c(e.geometry).set({spatialReference:i})))}async function F(t,r,n){const s={};s.sr=null!=r.sr&&"object"==typeof r.sr?r.sr.wkid||JSON.stringify(r.sr):r.sr,s.coordinates=JSON.stringify(r.coordinates),s.conversionType=y.toJSON(r.conversionType||"mgrs"),s.conversionMode=r.conversionMode,s.numOfDigits=r.numOfDigits,s.rounding=r.rounding,s.addSpaces=r.addSpaces;const i=a(t),c={...i.query,f:"json",...s},u=o(c,n);return e(i.path+"/toGeoCoordinateString",u).then((({data:e})=>e.strings))}async function K(t,r,n){r=b.from(r);const s=q(r),i=a(t),c={...i.query,f:"json",...s},u=r.sr,p=o(c,n);return e(i.path+"/trimExtend",p).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new f({spatialReference:u,paths:e})))))}async function Y(t,r,n){const s=r[0].spatialReference,i=a(t),u={...i.query,f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(p(r))},f=o(u,n);return e(i.path+"/union",f).then((({data:e})=>c(e.geometry).set({spatialReference:s})))}let B=class extends R{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return x(this.url,e,t)}autoComplete(e,t,r){return C(this.url,e,t,r)}buffer(e,t){return w(this.url,e,t)}convexHull(e,t){return G(this.url,e,t)}cut(e,t,r){return v(this.url,e,t,r)}densify(e,t){return A(this.url,e,t)}difference(e,t,r){return H(this.url,e,t,r)}distance(e,t){return I(this.url,e,t)}fromGeoCoordinateString(e,t){return T(this.url,e,t)}generalize(e,t){return M(this.url,e,t)}intersect(e,t,r){return z(this.url,e,t,r)}labelPoints(e,t){return E(this.url,e,t)}lengths(e,t){return L(this.url,e,t)}offset(e,t){return P(this.url,e,t)}project(e,t){return m(this.url,e,t)}relation(e,t){return k(this.url,e,t)}reshape(e,t,r){return D(this.url,e,t,r)}simplify(r,n){return async function(r,n,s){const a="string"==typeof r?t(r):r,o=n[0].spatialReference,i=u(n[0]),c={...s,query:{...a.query,f:"json",sr:o.wkid?o.wkid:JSON.stringify(o),geometries:JSON.stringify(p(n))}},{data:f}=await e(a.path+"/simplify",c);return l(f.geometries,i,o)}(this.url,r,n)}toGeoCoordinateString(e,t){return F(this.url,e,t)}trimExtend(e,t){return K(this.url,e,t)}union(e,t){return Y(this.url,e,t)}};B.UNIT_METER=9001,B.UNIT_GERMAN_METER=9031,B.UNIT_FOOT=9002,B.UNIT_SURVEY_FOOT=9003,B.UNIT_CLARKE_FOOT=9005,B.UNIT_FATHOM=9014,B.UNIT_NAUTICAL_MILE=9030,B.UNIT_SURVEY_CHAIN=9033,B.UNIT_SURVEY_LINK=9034,B.UNIT_SURVEY_MILE=9035,B.UNIT_KILOMETER=9036,B.UNIT_CLARKE_YARD=9037,B.UNIT_CLARKE_CHAIN=9038,B.UNIT_CLARKE_LINK=9039,B.UNIT_SEARS_YARD=9040,B.UNIT_SEARS_FOOT=9041,B.UNIT_SEARS_CHAIN=9042,B.UNIT_SEARS_LINK=9043,B.UNIT_BENOIT_1895A_YARD=9050,B.UNIT_BENOIT_1895A_FOOT=9051,B.UNIT_BENOIT_1895A_CHAIN=9052,B.UNIT_BENOIT_1895A_LINK=9053,B.UNIT_BENOIT_1895B_YARD=9060,B.UNIT_BENOIT_1895B_FOOT=9061,B.UNIT_BENOIT_1895B_CHAIN=9062,B.UNIT_BENOIT_1895B_LINK=9063,B.UNIT_INDIAN_FOOT=9080,B.UNIT_INDIAN_1937_FOOT=9081,B.UNIT_INDIAN_1962_FOOT=9082,B.UNIT_INDIAN_1975_FOOT=9083,B.UNIT_INDIAN_YARD=9084,B.UNIT_INDIAN_1937_YARD=9085,B.UNIT_INDIAN_1962_YARD=9086,B.UNIT_INDIAN_1975_YARD=9087,B.UNIT_FOOT_1865=9070,B.UNIT_RADIAN=9101,B.UNIT_DEGREE=9102,B.UNIT_ARCMINUTE=9103,B.UNIT_ARCSECOND=9104,B.UNIT_GRAD=9105,B.UNIT_GON=9106,B.UNIT_MICRORADIAN=9109,B.UNIT_ARCMINUTE_CENTESIMAL=9112,B.UNIT_ARCSECOND_CENTESIMAL=9113,B.UNIT_MIL6400=9114,B.UNIT_BRITISH_1936_FOOT=9095,B.UNIT_GOLDCOAST_FOOT=9094,B.UNIT_INTERNATIONAL_CHAIN=109003,B.UNIT_INTERNATIONAL_LINK=109004,B.UNIT_INTERNATIONAL_YARD=109001,B.UNIT_STATUTE_MILE=9093,B.UNIT_SURVEY_YARD=109002,B.UNIT_50KILOMETER_LENGTH=109030,B.UNIT_150KILOMETER_LENGTH=109031,B.UNIT_DECIMETER=109005,B.UNIT_CENTIMETER=109006,B.UNIT_MILLIMETER=109007,B.UNIT_INTERNATIONAL_INCH=109008,B.UNIT_US_SURVEY_INCH=109009,B.UNIT_INTERNATIONAL_ROD=109010,B.UNIT_US_SURVEY_ROD=109011,B.UNIT_US_NAUTICAL_MILE=109012,B.UNIT_UK_NAUTICAL_MILE=109013,B.UNIT_SQUARE_INCHES="esriSquareInches",B.UNIT_SQUARE_FEET="esriSquareFeet",B.UNIT_SQUARE_YARDS="esriSquareYards",B.UNIT_ACRES="esriAcres",B.UNIT_SQUARE_MILES="esriSquareMiles",B.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",B.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",B.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",B.UNIT_SQUARE_METERS="esriSquareMeters",B.UNIT_ARES="esriAres",B.UNIT_HECTARES="esriHectares",B.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",r([n()],B.prototype,"url",void 0),B=r([s("esri.tasks.GeometryService")],B);const Q=B;export default Q;