import{aL as p,S as i,e as t,d as s,i as r}from"./p-5420851c.js";import{l as e,u as o}from"./p-e4db8bd2.js";import{i as a}from"./p-2eec0ad8.js";import{r as m}from"./p-95c8b60a.js";import"./p-53bb6ab4.js";import"./p-e2fe661c.js";import"./p-4c6040da.js";import"./p-54db165f.js";import"./p-4d140ee3.js";import"./p-ba8c567b.js";import"./p-2d0c34e5.js";import"./p-47e1bd73.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";import"./p-6df976c7.js";import"./p-50ff864e.js";import"./p-def8d692.js";import"./p-297addf1.js";import"./p-27418da2.js";import"./p-81f41410.js";import"./p-4b2b4a33.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-13d3a443.js";import"./p-8d730a3d.js";import"./p-97ec6ae5.js";import"./p-ad5a0ac5.js";import"./p-6189adb6.js";import"./p-78327456.js";import"./p-9315e4d7.js";import"./p-dcac8868.js";import"./p-c3fd4463.js";import"./p-97540775.js";import"./p-6e6d0422.js";import"./p-9047f753.js";import"./p-8bf8e457.js";import"./p-7e5e535f.js";import"./p-4d0ba4c4.js";import"./p-baad017f.js";import"./p-e991a11e.js";import"./p-b1c9647c.js";const d={remove(){},pause(){},resume(){}};let j=class extends(e(o)){initialize(){this.graphicsView=new m({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new a(this.view.featuresTilingScheme)})}attach(){this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.handles.remove("graphicslayerview2d")}hitTest(p,i){return this.suspended||!this.graphicsView?Promise.resolve(null):this.graphicsView.hitTest(p,i)}async fetchPopupFeatures(p){if(this.graphicsView)return this.graphicsView.searchFeatures(p).then((p=>p.filter((p=>!!p.popupTemplate))))}update(p){this.graphicsView.processUpdate(p)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(t){let s;return"number"==typeof t?s=[t]:t instanceof p?s=[t.uid]:Array.isArray(t)&&t.length>0?s="number"==typeof t[0]?t:t.map((p=>p&&p.uid)):i.isCollection(t)&&(s=t.map((p=>p&&p.uid)).toArray()),s=s.filter((p=>null!=p)),s.length?(this.graphicsView.addHighlight(s),{remove:()=>this.graphicsView.removeHighlight(s)}):d}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}};t([s()],j.prototype,"graphicsView",void 0),t([s()],j.prototype,"updating",void 0),j=t([r("esri.views.2d.layers.GraphicsLayerView2D")],j);const h=j;export default h;