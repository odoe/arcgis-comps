function n(n,t,r,e){const u=3*n,i=3*(r-n)-u,f=1-u-i,o=3*t,c=3*(e-t)-o,a=1-o-c;function s(n){return((f*n+i)*n+u)*n}function l(n){return(3*f*n+2*i)*n+u}return function(n,t=1e-6){return function(n){return((a*n+c)*n+o)*n}(function(n,t){let r,e,u,i,f,o;for(u=n,o=0;o<8;o++){if(i=s(u)-n,Math.abs(i)<t)return u;if(f=l(u),Math.abs(f)<1e-6)break;u-=i/f}if(r=0,e=1,u=n,u<r)return r;if(u>e)return e;for(;r<e;){if(i=s(u),Math.abs(i-n)<t)return u;n>i?r=u:e=u,u=.5*(e-r)+r}return u}(n,t))}}const t=/^cubic-bezier\((.*)\)/,r={};function e(e){let u=r[e]||null;if(!u){const r=t.exec(e);if(r){const t=r[1].split(",").map((n=>parseFloat(n.trim())));4!==t.length||t.some((n=>isNaN(n)))||(u=n.apply(n,t))}}return u}r.ease=n(.25,.1,.25,1),r.linear=n(0,0,1,1),r.easeIn=r["ease-in"]=n(.42,0,1,1),r.easeOut=r["ease-out"]=n(0,0,.58,1),r.easeInOut=r["ease-in-out"]=n(.42,0,.58,1);export{n as e,e as r,r as t}