import{e as t,d as i,i as e,b as s,b4 as r,r as a,T as h,hu as n,hN as o,hO as l,a as p,eF as c,t as m}from"./p-5420851c.js";import{r as u}from"./p-c6864032.js";import{l as d,u as f}from"./p-e4db8bd2.js";import{i as w}from"./p-8dd46af5.js";import{s as y}from"./p-bdb8e9d6.js";import{a as j}from"./p-4dafedac.js";import"./p-53bb6ab4.js";import"./p-580a17e2.js";import"./p-b3b13eb5.js";import"./p-e2fe661c.js";import"./p-4c6040da.js";import"./p-4d140ee3.js";import"./p-27418da2.js";import"./p-54db165f.js";import"./p-81f41410.js";import"./p-47e1bd73.js";import"./p-def8d692.js";import"./p-4b2b4a33.js";import"./p-b392deaf.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-13d3a443.js";import"./p-8d730a3d.js";import"./p-97ec6ae5.js";const b=h=>{let n=class extends h{async fetchPopupFeatures(t,i){const{layer:e}=this;if(!t)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:e}));if("tile"!==e.type)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:e.type}));const h=this.get("view.scale"),n=e.allSublayers.toArray().filter((t=>t.popupTemplate&&t.popupEnabled&&t.visible&&(0===t.minScale||h<=t.minScale)&&(0===t.maxScale||h>=t.maxScale)));return r(n.map((async e=>{const s=e.createQuery(),r=a(i)?i.event:null,h=y({renderer:e.renderer,event:r});return s.geometry=this.createFetchPopupFeaturesQueryGeometry(t,h),s.outFields=await e.popupTemplate.getRequiredFields(),(await e.queryFeatures(s)).features}))).then((t=>[].concat(...t.map((t=>t.value)).filter(Boolean))))}};return t([i()],n.prototype,"layer",void 0),n=t([e("esri.layers.mixins.TileLayerView")],n),n},g=h.getLogger("esri.views.2d.layers.TileLayerView2D"),v=[0,0];let T=class extends(b(w(u(d(f))))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}initialize(){const t=this.layer.tileInfo,i=t&&t.spatialReference;let e;i||(e=new s("layerview:tiling-information-missing","The layer doesn't provide tiling information",{layer:this.layer})),i.equals(this.view.spatialReference)||(e=new s("layerview:spatial-reference-incompatible","The spatial reference of this layer does not meet the requirements of the view",{layer:this.layer})),this.watch("resampling",(()=>{this.doRefresh()})),e&&this.addResolvingPromise(Promise.reject(e))}get resampling(){return!("resampling"in this.layer)||!1!==this.layer.resampling}hitTest(){return null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),this.notifyChange("updating")}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new n(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new o({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(t,i)=>this.fetchTile(t,i)}),this._tileStrategy=new l({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.container.requestRender(),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQueryGeometry(t,i){return j(t,i,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((t=>this._enqueueTileFetch(t))),this.notifyChange("updating"))}isUpdating(){var t;return(null==(t=this._fetchQueue)?void 0:t.length)>0}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(v,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(i),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",(()=>t.destroy())),this.requestUpdate()}async fetchTile(t,i){const e="tilemapCache"in this.layer?this.layer.tilemapCache:null,s=!m(i)&&i.signal;if(!e)try{return await this._fetchImage(t,s)}catch(t){if(!p(t)&&!this.resampling)return this._createBlankImage();throw t}const r=new c(0,0,0,0);let a;try{if(await e.fetchAvailabilityUpsample(t.level,t.row,t.col,r,{signal:s}),r.level!==t.level&&!this.resampling)return this._createBlankImage();a=await this._fetchImage(r,s)}catch(i){if(p(i))throw i;a=await this._fetchImage(t,s)}const{level:h,row:n,col:o}=r;return this.resampling&&h!==t.level?this._resampleImage(a,h,n,o,t.level,t.row,t.col):a}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",(()=>this.requestUpdate()))}catch(t){p(t)||g.error(t)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchTile(t.level,t.row,t.col,{signal:i})}_resampleImage(t,i,e,s,r,a,h){const n=this._tileInfoView.tileInfo.size,o=this._tileInfoView.getTileResolution(i),l=this._tileInfoView.getTileResolution(r);let p=this._tileInfoView.getLODInfoAt(r);const c=p.getXForColumn(h),m=p.getYForRow(a);p=this._tileInfoView.getLODInfoAt(i);const u=p.getXForColumn(s),d=p.getYForRow(e),f=Math.round((c-u)/o),w=Math.round(-(m-d)/o),y=Math.round(n[0]*(l/o)),j=Math.round(n[1]*(l/o)),b=this._createBlankImage();return b.getContext("2d").drawImage(t,f,w,y,j,0,0,n[0],n[1]),b}_createBlankImage(){const t=this._tileInfoView.tileInfo.size,i=document.createElement("canvas");return[i.width,i.height]=t,i}};t([i()],T.prototype,"resampling",null),T=t([e("esri.views.2d.layers.TileLayerView2D")],T);const P=T;export default P;