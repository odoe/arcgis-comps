import{J as t,E as s,O as i,r as p,t as o,Y as r,c5 as e,c7 as a,e as m,d as j,i as h}from"./p-9ae46e68.js";import{M as c,a0 as d,a1 as n,k as f}from"./p-566b0715.js";import{J as b,O as l}from"./p-bae36c84.js";import{b as w,g as u,d as v}from"./p-da56ac3e.js";import{e as g}from"./p-41655335.js";import{c as y}from"./p-8b767e6c.js";import{g as k}from"./p-fe4caffe.js";import{t as _}from"./p-71e3657b.js";import{l as L,u as S}from"./p-ebe5e529.js";import{i as V}from"./p-220bdae9.js";import{r as x}from"./p-798e3ebd.js";import"./p-84bf99cb.js";import"./p-fe01b82b.js";import"./p-138c2b2c.js";import"./p-6443bfb4.js";import"./p-94f8dc11.js";import"./p-bb07d873.js";import"./p-8ac97b63.js";import"./p-a0a931f0.js";import"./p-dfc6337f.js";import"./p-77e6a663.js";import"./p-c5b7f7c3.js";import"./p-30ddb3a0.js";import"./p-74fc1b7f.js";import"./p-b3024dec.js";import"./p-4fcbc3c5.js";import"./p-4b3ae2cf.js";import"./p-3a2e88bf.js";import"./p-98a14d68.js";import"./p-8e03c038.js";import"./p-32462343.js";import"./p-6ebb24ba.js";import"./p-4fd6e394.js";import"./p-39da60a5.js";import"./p-7a648ea5.js";import"./p-b2a0fae5.js";import"./p-4681e856.js";import"./p-a0e42f29.js";import"./p-3ffd0931.js";import"./p-8031c809.js";import"./p-3048cc18.js";import"./p-c7a0a732.js";import"./p-b2d0e2de.js";import"./p-db87794e.js";import"./p-22c8d854.js";import"./p-3d1b25b6.js";import"./p-f42060e0.js";import"./p-79553c8d.js";import"./p-32824614.js";import"./p-40d3b500.js";import"./p-c8f716a9.js";import"./p-57ae469d.js";import"./p-27ef204b.js";import"./p-9e860e7b.js";import"./p-ada83011.js";import"./p-98ce0cca.js";import"./p-4003c7ae.js";import"./p-a7080451.js";import"./p-7e9d2371.js";import"./p-8e6daf54.js";import"./p-c0757461.js";import"./p-93d9099f.js";import"./p-d3898fd7.js";import"./p-844dad6c.js";import"./p-c59d0a4d.js";import"./p-3a5fe179.js";import"./p-ae0b06e3.js";import"./p-a293872e.js";import"./p-f271906a.js";import"./p-cf2267f9.js";import"./p-d2e19070.js";import"./p-e5429b9e.js";import"./p-cf8dc9be.js";import"./p-f17028ec.js";import"./p-5c89c68e.js";import"./p-725fd184.js";import"./p-0c91ebaf.js";import"./p-72355290.js";import"./p-d68829c1.js";import"./p-81102839.js";import"./p-2f7c985e.js";import"./p-00b9ea57.js";import"./p-5a0fe1d0.js";import"./p-7818def0.js";import"./p-da143060.js";import"./p-15bb2887.js";import"./p-1f10277d.js";import"./p-2b250922.js";import"./p-285c6a34.js";import"./p-81e5b36e.js";import"./p-1d6f3ddb.js";import"./p-789e71c1.js";import"./p-523f37cd.js";import"./p-a198d6d0.js";import"./p-15515b8a.js";import"./p-264c75ac.js";import"./p-c431b12a.js";import"./p-b0f556d6.js";import"./p-8d03d70f.js";import"./p-9658240e.js";import"./p-d6725707.js";import"./p-d925341f.js";import"./p-c3efb223.js";import"./p-56ed1c7a.js";import"./p-d18723b0.js";import"./p-b62a8a4f.js";import"./p-f614dce4.js";import"./p-6ab16fcc.js";import"./p-0c60bcc4.js";import"./p-7c7c5507.js";import"./p-d40c97c9.js";import"./p-47e1bd73.js";import"./p-81abd5fc.js";import"./p-16def889.js";import"./p-eb19a862.js";import"./p-b392deaf.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-ffe0d3ad.js";import"./p-9dbf3f05.js";import"./p-97ec6ae5.js";import"./p-128c292d.js";import"./p-2d0c34e5.js";import"./p-9790d1b4.js";import"./p-47f143cb.js";import"./p-50ff864e.js";import"./p-da4ee59d.js";import"./p-dd4e6b8b.js";import"./p-0509f8e7.js";import"./p-9739c166.js";import"./p-1fb61ab0.js";import"./p-d778cb09.js";import"./p-9dcf03f7.js";import"./p-2a252a78.js";import"./p-5fb38925.js";import"./p-e6a400a0.js";import"./p-6c45ae96.js";import"./p-685003b3.js";import"./p-6e4caa55.js";import"./p-d30fd87a.js";import"./p-58fed22f.js";import"./p-e991a11e.js";import"./p-b1c9647c.js";class I{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let M=class extends(L(S)){constructor(){super(...arguments),this._handles=new t,this._bitmapIndex=new Map,this._mapImageContainer=new _,this._kmlVisualData=new I,this.allVisiblePoints=new y,this.allVisiblePolylines=new y,this.allVisiblePolygons=new y,this.allVisibleMapImages=new s}hitTest(t,s){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const i=[this._pointsView.hitTest(t,s),this._polylinesView.hitTest(t,s),this._polygonsView.hitTest(t,s)];return Promise.all(i).then((t=>t.filter((t=>(t&&(t.layer=this.layer,t.sourceLayer=this.layer),!!t)))[0]||null))}update(t){this._polygonsView&&this._polygonsView.processUpdate(t),this._polylinesView&&this._polylinesView.processUpdate(t),this._pointsView&&this._pointsView.processUpdate(t)}attach(){this._handles.add([this.allVisibleMapImages.on("change",(t=>{t.added.forEach((t=>this._addMapImage(t))),t.removed.forEach((t=>this._removeMapImage(t)))}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new x({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new V(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new x({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new V(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new x({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new V(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(t=>{for(const[t,s]of this._kmlVisualData.allSublayers)s.visibility=0;for(const s of t){const t=this._kmlVisualData.allSublayers.get(s.id);t&&(t.visibility=1)}this._refreshCollections()})),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating")}))}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(t){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&i(t.href,{responseType:"image"}).then((({data:s})=>{let i=c.fromJSON(t.extent);d(i,this.view.spatialReference)&&(i=n(i,this.view.spatialReference));const p=new k(s,"standard");p.x=i.xmin,p.y=i.ymax,p.resolution=i.width/s.naturalWidth,p.rotation=t.rotation,this._mapImageContainer.addChild(p),this._bitmapIndex.set(t,p)}))}async _getViewDependentUrl(t,s){const{viewFormat:i,viewBoundScale:m,httpQuery:j}=t;if(p(i)){if(o(s))throw new Error("Loading this network link requires a view state.");let h;if(await b(),p(m)&&1!==m){const t=new c(s.extent);t.expand(m),h=t}else h=s.extent;h=l(h,f.WGS84);const d=l(h,f.WebMercator),n=h.xmin,w=h.xmax,u=h.ymin,v=h.ymax,y=s.size[0]*s.pixelRatio,k=s.size[1]*s.pixelRatio,_=Math.max(d.width,d.height),L={"[bboxWest]":n.toString(),"[bboxEast]":w.toString(),"[bboxSouth]":u.toString(),"[bboxNorth]":v.toString(),"[lookatLon]":h.center.x.toString(),"[lookatLat]":h.center.y.toString(),"[lookatRange]":_.toString(),"[lookatTilt]":"0","[lookatHeading]":s.rotation.toString(),"[lookatTerrainLon]":h.center.x.toString(),"[lookatTerrainLat]":h.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":h.center.x.toString(),"[cameraLat]":h.center.y.toString(),"[cameraAlt]":_.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":y.toString(),"[vertPixels]":k.toString(),"[terrainEnabled]":"0","[clientVersion]":r,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},S=t=>{for(const s in t)for(const i in L)t[s]=t[s].replace(i,L[i])},V=e(i);S(V);let x={};p(j)&&(x=e(j),S(x));const I=g(t.href);return I.query={...I.query,...V,...x},`${I.path}?${a(V)}`}return t.href}async _fetchService(){const t=new I;await this._loadVisualData(this.layer.url,t),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t)))}_isSublayerVisible(t){const s=this._kmlVisualData.allSublayers.get(t);return!!s.visibility&&(-1===s.parentFolderId||this._isSublayerVisible(s.parentFolderId))}_loadVisualData(t,s){return this._fetchParsedKML(t).then((async t=>{for(const i of t.sublayers){s.allSublayers.set(i.id,i);const t=i.points?await w(i.points):[],p=i.polylines?await w(i.polylines):[],o=i.polygons?await w(i.polygons):[],r=i.mapImages||[];if(s.allPoints.push(...t.map((t=>({item:t,sublayerId:i.id})))),s.allPolylines.push(...p.map((t=>({item:t,sublayerId:i.id})))),s.allPolygons.push(...o.map((t=>({item:t,sublayerId:i.id})))),s.allMapImages.push(...r.map((t=>({item:t,sublayerId:i.id})))),i.networkLink){const t=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(t,s)}}}))}_fetchParsedKML(t){return u(t,this.view.spatialReference,this.layer.refreshInterval).then((t=>v(t.data)))}_removeMapImage(t){const s=this._bitmapIndex.get(t);s&&(this._mapImageContainer.removeChild(s),this._bitmapIndex.delete(t))}};m([j()],M.prototype,"_pointsView",void 0),m([j()],M.prototype,"_polylinesView",void 0),m([j()],M.prototype,"_polygonsView",void 0),m([j()],M.prototype,"_fetchingPromise",void 0),m([j()],M.prototype,"updating",void 0),M=m([h("esri.views.2d.layers.KMLLayerView2D")],M);const P=M;export default P;