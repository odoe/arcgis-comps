import { C as s, aL as T, r, e, a as d$1, i as i$1, f as s$2, l as t, b0 as d$2 } from './jsxFactory-c96bb45c.js';
import { r as r$1 } from './BitmapTileLayerView2D-d632e150.js';
import { l, u } from './LayerView-7c0fe9c4.js';
import { h } from './TileStore-39bbbf67.js';
import { e as e$1 } from './TileKey-c678a190.js';
import { p, r as r$2 } from './TileStrategy-8fcd9a8c.js';
import { i as i$2 } from './RefreshableLayerView-89aabbf1.js';
import { s as s$1, a } from './drapedUtils-8ab8ace4.js';
import './index-921bd636.js';
import './BitmapTileContainer-ae894749.js';
import './Graphic-6c72131a.js';
import './JSONSupport-5a9f556a.js';
import './MapView-e30b3dee.js';
import './CollectionFlattener-567ea124.js';
import './HandleOwner-6fdf8ee8.js';
import './reactiveUtils-4ba1fb4b.js';
import './workers-5ad649f9.js';
import './unitUtils-b25ae8cb.js';
import './executeQueryJSON-165e5051.js';
import './utils-8991f658.js';
import './query-0da4fa5c.js';
import './normalizeUtils-1fd7c0f1.js';
import './pbfQueryUtils-e36554ac.js';
import './pbf-1b9dc626.js';
import './OptimizedFeature-6034ce0f.js';
import './OptimizedFeatureSet-27736f1f.js';
import './queryZScale-0ff40b9b.js';
import './zscale-cec9b507.js';
import './Query-792b142d.js';
import './TimeExtent-1bc95591.js';
import './Field-2b6029f8.js';
import './RangeDomain-de3132b0.js';
import './fieldType-b9f9365f.js';
import './FeatureSet-22102ca4.js';
import './AttachmentQuery-42d07544.js';
import './Heading-7763ec3e.js';
import './utils-ce0d30fb.js';
import './asyncUtils-dc4bd819.js';
import './ItemCache-2d2e76a8.js';
import './MemCache-e219bcfb.js';
import './utils-f8425723.js';
import './widget-13824d6e.js';
import './vmEvent-bdc3bebc.js';
import './TopFeaturesQuery-31a64765.js';
import './QueryTask-f5ad3db8.js';
import './compilerUtils-128fda14.js';
import './featureConversionUtils-0aaeda4b.js';
import './Task-87780f0a.js';
import './FeatureLayer-9672bbd9.js';
import './UniqueValueRenderer-f2af8ece.js';
import './VisualVariablesMixin-bafacb39.js';
import './colorRamps-693d6433.js';
import './ColorStop-fb26d745.js';
import './sizeVariableUtils-4d3662df.js';
import './visualVariableUtils-506efb2b.js';
import './lengthUtils-7a485aa7.js';
import './diffUtils-491d81df.js';
import './jsonUtils-a31b4632.js';
import './styleUtils-8fedca21.js';
import './DictionaryRenderer-78308a28.js';
import './LRUCache-81490262.js';
import './jsonUtils-580ae154.js';
import './MultiOriginJSONSupport-f6506b2f.js';
import './HeightModelInfo-a87824be.js';
import './APIKeyMixin-4866fda4.js';
import './ArcGISService-4cc51fbf.js';
import './arcgisLayerUrl-2aeded02.js';
import './BlendLayer-70766503.js';
import './jsonUtils-352e8eb7.js';
import './mat4-ef633c62.js';
import './_commonjsHelpers-020ca939.js';
import './CustomParametersMixin-89544c0d.js';
import './labelingInfo-683f3119.js';
import './commonProperties-fa43a2ed.js';
import './LabelClass-65776e47.js';
import './labelUtils-45e9126f.js';
import './defaultsJSON-53258912.js';
import './OperationalLayer-b04e38aa.js';
import './OrderedLayer-8b694b55.js';
import './PortalLayer-df690c5a.js';
import './PortalItem-209a51a1.js';
import './RefreshableLayer-702beb88.js';
import './ScaleRangeLayer-99043c54.js';
import './TemporalLayer-b41e8e6e.js';
import './TimeInfo-9a5e9434.js';
import './FeatureType-8cae0f8f.js';
import './fieldProperties-b0c243c7.js';
import './FieldsIndex-56cf15de.js';
import './LayerFloorInfo-2c65601c.js';
import './styleUtils-e2196c57.js';
import './popupUtils-4957d444.js';
import './layerViewUtils-9cf85499.js';
import './GoTo-7624d206.js';
import './mathUtils-91a58478.js';
import './TileInfo-1fc37c81.js';
import './Basemap-37cadf63.js';
import './loadAll-85b9593d.js';
import './writeUtils-4d88cd58.js';
import './TablesMixin-93b17242.js';
import './GraphicsCollection-f199ec2b.js';
import './Scheduler-fb8ceb54.js';
import './unitBezier-0f2e6a45.js';
import './mat2d-b05e5a52.js';
import './vec2-f635f36f.js';
import './vec2f64-503345b4.js';
import './projection-32646abc.js';
import './mat3-351ead7a.js';
import './vec2f32-7c7b1123.js';
import './screenshotUtils-6f247196.js';
import './capabilities-eb3cc9c1.js';
import './Bitmap-97d3b9d9.js';
import './Container-aead67d5.js';
import './EffectList-21c65dc8.js';
import './Texture-167b44f1.js';
import './TileContainer-6be70715.js';
import './Utils-0dd7fa3e.js';
import './number-888f4898.js';
import './WGLContainer-39960109.js';
import './definitions-a1bd4630.js';
import './VertexArrayObject-1f343ba6.js';
import './ShaderCompiler-08617240.js';
import './config-768959de.js';
import './GeometryUtils-09c2f88c.js';
import './MaterialKey-b9f33132.js';
import './pixelUtils-1d6f5ad9.js';
import './earcut-05cd758b.js';
import './quickselect-ccfd8cff.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const i=i=>{let c=class extends i{async fetchPopupFeatures(e,s$2){const{layer:a}=this;if(!e)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:a}));if("tile"!==a.type)return Promise.reject(new s("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:a.type}));const i=this.get("view.scale"),c=a.allSublayers.toArray().filter((e=>{const r=0===e.minScale||i<=e.minScale,t=0===e.maxScale||i>=e.maxScale;return e.popupTemplate&&e.popupEnabled&&e.visible&&r&&t}));return T(c.map((async r$1=>{const o=r$1.createQuery(),a=r(s$2)?s$2.event:null,i=s$1({renderer:r$1.renderer,event:a});o.geometry=this.createFetchPopupFeaturesQueryGeometry(e,i),o.outFields=await r$1.popupTemplate.getRequiredFields();return (await r$1.queryFeatures(o)).features}))).then((e=>[].concat(...e.map((e=>e.value)).filter(Boolean))))}};return e([d$1()],c.prototype,"layer",void 0),c=e([i$1("esri.layers.mixins.TileLayerView")],c),c};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const w=s$2.getLogger("esri.views.2d.layers.TileLayerView2D"),d=[0,0];let _=class extends(i(i$2(r$1(l(u))))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null;}initialize(){const e=this.layer.tileInfo,i=e&&e.spatialReference;let r;i||(r=new s("layerview:tiling-information-missing","The layer doesn't provide tiling information",{layer:this.layer})),i.equals(this.view.spatialReference)||(r=new s("layerview:spatial-reference-incompatible","The spatial reference of this layer does not meet the requirements of the view",{layer:this.layer})),this.watch("resampling",(()=>{this.doRefresh();})),r&&this.addResolvingPromise(Promise.reject(r));}get resampling(){return !("resampling"in this.layer)||!1!==this.layer.resampling}hitTest(){return null}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this.notifyChange("updating");}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new h(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new p({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(e,t)=>this.fetchTile(e,t)}),this._tileStrategy=new r$2({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.container.requestRender(),super.attach();}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null;}moveStart(){this.requestUpdate();}viewChange(){this.requestUpdate();}moveEnd(){this.requestUpdate();}createFetchPopupFeaturesQueryGeometry(e,t){return a(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((e=>this._enqueueTileFetch(e))),this.notifyChange("updating"));}isUpdating(){var e;return (null==(e=this._fetchQueue)?void 0:e.length)>0}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return [i.x,i.y]=this._tileInfoView.getTileCoords(d,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>e.destroy())),this.requestUpdate();}async fetchTile(e,t$1){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,a=!t(t$1)&&t$1.signal;if(!i)try{return await this._fetchImage(e,a)}catch(m){if(!d$2(m)&&!this.resampling)return this._createBlankImage();throw m}const l=new e$1(0,0,0,0);let o;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,l,{signal:a}),l.level!==e.level&&!this.resampling)return this._createBlankImage();o=await this._fetchImage(l,a);}catch(m){if(d$2(m))throw m;o=await this._fetchImage(e,a);}const{level:h,row:n,col:u}=l;return this.resampling&&h!==e.level?this._resampleImage(o,h,n,u,e.level,e.row,e.col):o}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",(()=>this.requestUpdate()));}catch(t){d$2(t)||w.error(t);}this.requestUpdate();}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{signal:t})}_resampleImage(e,t,i,r,s,a,l){const o=this._tileInfoView.tileInfo.size,h=this._tileInfoView.getTileResolution(t),n=this._tileInfoView.getTileResolution(s);let c=this._tileInfoView.getLODInfoAt(s);const u=c.getXForColumn(l),m=c.getYForRow(a);c=this._tileInfoView.getLODInfoAt(t);const p=c.getXForColumn(r),f=c.getYForRow(i),g=Math.round((u-p)/h),y=Math.round(-(m-f)/h),w=Math.round(o[0]*(n/h)),d=Math.round(o[1]*(n/h)),_=this._createBlankImage();return _.getContext("2d").drawImage(e,g,y,w,d,0,0,o[0],o[1]),_}_createBlankImage(){const e=this._tileInfoView.tileInfo.size,t=document.createElement("canvas");return [t.width,t.height]=e,t}};e([d$1()],_.prototype,"resampling",null),_=e([i$1("esri.views.2d.layers.TileLayerView2D")],_);const I=_;

export default I;
