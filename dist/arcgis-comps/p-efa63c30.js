import{E as e,bn as t,bp as n,bk as r,cj as s,c6 as a,bF as o,ck as i,e as c,d as u,i as f,bq as l}from"./p-5420851c.js";import{r as y,o as p,n as S}from"./p-e32e360a.js";import{_ as m,a as d,r as g,n as h,o as j,m as J,b as N,c as O,d as b,e as q,f as R}from"./p-c1f9963f.js";import"./p-53bb6ab4.js";async function x(r,s,a){const o=t(r),i={...o.query,f:"json",...s.toJSON()},c=n(i,a);return e(o.path+"/areasAndLengths",c).then((e=>e.data))}async function C(s,a,o,i){const c=a[0].spatialReference,u=t(s),f={...u.query,f:"json",sr:JSON.stringify(c.toJSON()),polygons:JSON.stringify(y(a).geometries),polylines:JSON.stringify(y(o).geometries)},l=n(f,i);return e(u.path+"/autoComplete",l).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new r({spatialReference:c,rings:e})))))}async function w(s,a,o){const i=t(s),c={...i.query,f:"json",...a.toJSON()},u=a.outSpatialReference||a.geometries[0].spatialReference,f=n(c,o);return e(i.path+"/buffer",f).then((e=>(e.data.geometries||[]).map((({rings:e})=>new r({spatialReference:u,rings:e})))))}async function G(r,a,o){const i=a[0].spatialReference,c=t(r),u={...c.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(y(a))},f=n(u,o);return e(c.path+"/convexHull",f).then((({data:e})=>s(e.geometry).set({spatialReference:i})))}async function v(n,r,o,i){const c=t(n),u=r[0].spatialReference,f={...i,query:{...c.query,f:"json",sr:JSON.stringify(u),target:JSON.stringify({geometryType:a(r[0]),geometries:r}),cutter:JSON.stringify(o)}},l=await e(c.path+"/cut",f),{cutIndexes:y,geometries:p=[]}=l.data;return{cutIndexes:y,geometries:p.map((e=>{const t=s(e);return t.spatialReference=u,t}))}}async function A(r,a,o){const i=a.geometries[0].spatialReference,c=t(r),u={...c.query,f:"json",...a.toJSON()},f=n(u,o);return e(c.path+"/densify",f).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:i})))))}async function T(n,r,o,i){const c=r[0].spatialReference,u=t(n);let f={query:{...u.query,f:"json",sr:JSON.stringify(c.toJSON()),geometries:JSON.stringify(y(r)),geometry:JSON.stringify({geometryType:a(o),geometry:o.toJSON()})}};return i&&(f={...i,...f}),e(u.path+"/difference",f).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:c})))))}async function k(r,s,a){const o=t(r),i={...o.query,f:"json",...s.toJSON()},c=n(i,a);return e(o.path+"/distance",c).then((({data:e})=>e&&e.distance))}async function H(r,s,a){const o={};o.sr=null!=s.sr&&"object"==typeof s.sr?s.sr.wkid||JSON.stringify(s.sr):s.sr,o.strings=JSON.stringify(s.strings),o.conversionType=m.toJSON(s.conversionType||"mgrs"),o.conversionMode=s.conversionMode;const i=t(r),c={...i.query,f:"json",...o},u=n(c,a);return e(i.path+"/fromGeoCoordinateString",u).then((({data:e})=>e.coordinates))}async function I(r,a,o){const i=(a=d.from(a)).toJSON(),c=g(a),u=t(r),f={...u.query,f:"json",...c},l=i.geometries[0].spatialReference,y=n(f,o);return e(u.path+"/generalize",y).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:l})))))}async function M(r,o,i,c){const u=o[0].spatialReference,f=t(r),l={...f.query,f:"json",sr:JSON.stringify(u.toJSON()),geometries:JSON.stringify(y(o)),geometry:JSON.stringify({geometryType:a(i),geometry:i.toJSON()})},p=n(l,c);return e(f.path+"/intersect",p).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:u})))))}function z(r,a,o){const i=a.map((e=>e.toJSON())),c=a[0].spatialReference,u=t(r),f={...u.query,f:"json",sr:c.wkid?c.wkid:JSON.stringify(c.toJSON()),polygons:JSON.stringify(i)},l=n(f,o);return e(u.path+"/labelPoints",l).then((({data:e})=>(e.labelPoints||[]).map((e=>s(e).set({spatialReference:c})))))}async function E(r,s,a){s=h.from(s);const o=j(s),i=t(r),c={...i.query,f:"json",...o},u=n(c,a);return e(i.path+"/lengths",u).then((({data:e})=>e))}async function F(r,a,o){a=J.from(a);const i=N(a),c=t(r),u={...c.query,f:"json",...i},f=a.geometries[0].spatialReference,l=n(u,o);return e(c.path+"/offset",l).then((({data:e})=>(e.geometries||[]).map((e=>s(e).set({spatialReference:f})))))}async function L(r,s,a){s=O.from(s);const o=b(s),i=t(r),c={...i.query,f:"json",...o},u=n(c,a);return e(i.path+"/relation",u).then((({data:e})=>e.relations))}async function P(r,o,i,c){const u=o.spatialReference,f=t(r),l={...f.query,f:"json",sr:JSON.stringify(u.toJSON()),target:JSON.stringify({geometryType:a(o),geometry:o.toJSON()}),reshaper:JSON.stringify(i.toJSON())},y=n(l,c);return e(f.path+"/reshape",y).then((({data:e})=>s(e.geometry).set({spatialReference:u})))}async function D(r,s,a){const o={};o.sr=null!=s.sr&&"object"==typeof s.sr?s.sr.wkid||JSON.stringify(s.sr):s.sr,o.coordinates=JSON.stringify(s.coordinates),o.conversionType=m.toJSON(s.conversionType||"mgrs"),o.conversionMode=s.conversionMode,o.numOfDigits=s.numOfDigits,o.rounding=s.rounding,o.addSpaces=s.addSpaces;const i=t(r),c={...i.query,f:"json",...o},u=n(c,a);return e(i.path+"/toGeoCoordinateString",u).then((({data:e})=>e.strings))}async function K(r,s,a){s=q.from(s);const o=R(s),c=t(r),u={...c.query,f:"json",...o},f=s.sr,l=n(u,a);return e(c.path+"/trimExtend",l).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new i({spatialReference:f,paths:e})))))}async function Y(r,a,o){const i=a[0].spatialReference,c=t(r),u={...c.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(y(a))},f=n(u,o);return e(c.path+"/union",f).then((({data:e})=>s(e.geometry).set({spatialReference:i})))}let B=class extends l{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return x(this.url,e,t)}autoComplete(e,t,n){return C(this.url,e,t,n)}buffer(e,t){return w(this.url,e,t)}convexHull(e,t){return G(this.url,e,t)}cut(e,t,n){return v(this.url,e,t,n)}densify(e,t){return A(this.url,e,t)}difference(e,t,n){return T(this.url,e,t,n)}distance(e,t){return k(this.url,e,t)}fromGeoCoordinateString(e,t){return H(this.url,e,t)}generalize(e,t){return I(this.url,e,t)}intersect(e,t,n){return M(this.url,e,t,n)}labelPoints(e,t){return z(this.url,e,t)}lengths(e,t){return E(this.url,e,t)}offset(e,t){return F(this.url,e,t)}project(e,t){return S(this.url,e,t)}relation(e,t){return L(this.url,e,t)}reshape(e,t,n){return P(this.url,e,t,n)}simplify(t,n){return async function(t,n,r){const s="string"==typeof t?o(t):t,i=n[0].spatialReference,c=a(n[0]),u={...r,query:{...s.query,f:"json",sr:i.wkid?i.wkid:JSON.stringify(i),geometries:JSON.stringify(y(n))}},{data:f}=await e(s.path+"/simplify",u);return p(f.geometries,c,i)}(this.url,t,n)}toGeoCoordinateString(e,t){return D(this.url,e,t)}trimExtend(e,t){return K(this.url,e,t)}union(e,t){return Y(this.url,e,t)}};B.UNIT_METER=9001,B.UNIT_GERMAN_METER=9031,B.UNIT_FOOT=9002,B.UNIT_SURVEY_FOOT=9003,B.UNIT_CLARKE_FOOT=9005,B.UNIT_FATHOM=9014,B.UNIT_NAUTICAL_MILE=9030,B.UNIT_SURVEY_CHAIN=9033,B.UNIT_SURVEY_LINK=9034,B.UNIT_SURVEY_MILE=9035,B.UNIT_KILOMETER=9036,B.UNIT_CLARKE_YARD=9037,B.UNIT_CLARKE_CHAIN=9038,B.UNIT_CLARKE_LINK=9039,B.UNIT_SEARS_YARD=9040,B.UNIT_SEARS_FOOT=9041,B.UNIT_SEARS_CHAIN=9042,B.UNIT_SEARS_LINK=9043,B.UNIT_BENOIT_1895A_YARD=9050,B.UNIT_BENOIT_1895A_FOOT=9051,B.UNIT_BENOIT_1895A_CHAIN=9052,B.UNIT_BENOIT_1895A_LINK=9053,B.UNIT_BENOIT_1895B_YARD=9060,B.UNIT_BENOIT_1895B_FOOT=9061,B.UNIT_BENOIT_1895B_CHAIN=9062,B.UNIT_BENOIT_1895B_LINK=9063,B.UNIT_INDIAN_FOOT=9080,B.UNIT_INDIAN_1937_FOOT=9081,B.UNIT_INDIAN_1962_FOOT=9082,B.UNIT_INDIAN_1975_FOOT=9083,B.UNIT_INDIAN_YARD=9084,B.UNIT_INDIAN_1937_YARD=9085,B.UNIT_INDIAN_1962_YARD=9086,B.UNIT_INDIAN_1975_YARD=9087,B.UNIT_FOOT_1865=9070,B.UNIT_RADIAN=9101,B.UNIT_DEGREE=9102,B.UNIT_ARCMINUTE=9103,B.UNIT_ARCSECOND=9104,B.UNIT_GRAD=9105,B.UNIT_GON=9106,B.UNIT_MICRORADIAN=9109,B.UNIT_ARCMINUTE_CENTESIMAL=9112,B.UNIT_ARCSECOND_CENTESIMAL=9113,B.UNIT_MIL6400=9114,B.UNIT_BRITISH_1936_FOOT=9095,B.UNIT_GOLDCOAST_FOOT=9094,B.UNIT_INTERNATIONAL_CHAIN=109003,B.UNIT_INTERNATIONAL_LINK=109004,B.UNIT_INTERNATIONAL_YARD=109001,B.UNIT_STATUTE_MILE=9093,B.UNIT_SURVEY_YARD=109002,B.UNIT_50KILOMETER_LENGTH=109030,B.UNIT_150KILOMETER_LENGTH=109031,B.UNIT_DECIMETER=109005,B.UNIT_CENTIMETER=109006,B.UNIT_MILLIMETER=109007,B.UNIT_INTERNATIONAL_INCH=109008,B.UNIT_US_SURVEY_INCH=109009,B.UNIT_INTERNATIONAL_ROD=109010,B.UNIT_US_SURVEY_ROD=109011,B.UNIT_US_NAUTICAL_MILE=109012,B.UNIT_UK_NAUTICAL_MILE=109013,B.UNIT_SQUARE_INCHES="esriSquareInches",B.UNIT_SQUARE_FEET="esriSquareFeet",B.UNIT_SQUARE_YARDS="esriSquareYards",B.UNIT_ACRES="esriAcres",B.UNIT_SQUARE_MILES="esriSquareMiles",B.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",B.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",B.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",B.UNIT_SQUARE_METERS="esriSquareMeters",B.UNIT_ARES="esriAres",B.UNIT_HECTARES="esriHectares",B.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",c([u()],B.prototype,"url",void 0),B=c([f("esri.tasks.GeometryService")],B);const Q=B;export default Q;