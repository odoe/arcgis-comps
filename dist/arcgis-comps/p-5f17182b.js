import{aj as p,B as i,e as t,d as s,i as r}from"./p-c8bc3433.js";import{l as e,u as o}from"./p-c4678b0b.js";import{i as a}from"./p-bff8da07.js";import{r as m}from"./p-ad145b1b.js";import"./p-84bf99cb.js";import"./p-8fd94488.js";import"./p-feee221d.js";import"./p-a6945989.js";import"./p-30eee135.js";import"./p-b0a11892.js";import"./p-ea65d9c9.js";import"./p-47e1bd73.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";import"./p-099e7dab.js";import"./p-50ff864e.js";import"./p-fd064341.js";import"./p-b8e3591b.js";import"./p-f806c5d9.js";import"./p-2c46c687.js";import"./p-60f5af83.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-be58da65.js";import"./p-17a8cfc0.js";import"./p-97ec6ae5.js";import"./p-f9493103.js";import"./p-c167c2b1.js";import"./p-1fcdfc57.js";import"./p-38a6e03f.js";import"./p-a805321e.js";import"./p-96687495.js";import"./p-815ddfb1.js";import"./p-b220b850.js";import"./p-a989744e.js";import"./p-429d3db0.js";import"./p-167f65f1.js";import"./p-b7c042b3.js";import"./p-7c926f90.js";import"./p-e991a11e.js";import"./p-b1c9647c.js";const j={remove(){},pause(){},resume(){}};let h=class extends(e(o)){initialize(){this.graphicsView=new m({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new a(this.view.featuresTilingScheme)})}attach(){this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.handles.remove("graphicslayerview2d")}hitTest(p,i){return this.suspended||!this.graphicsView?Promise.resolve(null):this.graphicsView.hitTest(p,i)}async fetchPopupFeatures(p){if(this.graphicsView)return this.graphicsView.searchFeatures(p).then((p=>p.filter((p=>!!p.popupTemplate))))}update(p){this.graphicsView.processUpdate(p)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(t){let s;return"number"==typeof t?s=[t]:t instanceof p?s=[t.uid]:Array.isArray(t)&&t.length>0?s="number"==typeof t[0]?t:t.map((p=>p&&p.uid)):i.isCollection(t)&&(s=t.map((p=>p&&p.uid)).toArray()),s=s.filter((p=>null!=p)),s.length?(this.graphicsView.addHighlight(s),{remove:()=>this.graphicsView.removeHighlight(s)}):j}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}};t([s()],h.prototype,"graphicsView",void 0),t([s()],h.prototype,"updating",void 0),h=t([r("esri.views.2d.layers.GraphicsLayerView2D")],h);const c=h;export default c;