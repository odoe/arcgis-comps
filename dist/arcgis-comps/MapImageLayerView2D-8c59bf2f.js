import { e, i as i$1, C as s, r, aL as T, a as d$1, f as s$2, b0 as d$2 } from './jsxFactory-c96bb45c.js';
import { c as c$2 } from './GraphicsCollection-f199ec2b.js';
import { t as t$2 } from './BitmapContainer-baddc2cf.js';
import { l, u as u$1 } from './LayerView-7c0fe9c4.js';
import { t, r as rt } from './BaseGraphicContainer-2cf7fe32.js';
import { I } from './Utils-0dd7fa3e.js';
import { S } from './ExportStrategy-c7e7cc0f.js';
import { g } from './commonProperties-fa43a2ed.js';
import { c as c$1 } from './ExportImageParameters-727e0fba.js';
import { s as s$1, a as a$1 } from './drapedUtils-8ab8ace4.js';
import { k as a } from './Graphic-6c72131a.js';
import { d, t as t$1 } from './popupUtils-f206770d.js';
import { i as i$2 } from './RefreshableLayerView-89aabbf1.js';
import './index-921bd636.js';
import './HandleOwner-6fdf8ee8.js';
import './reactiveUtils-4ba1fb4b.js';
import './WGLContainer-39960109.js';
import './MapView-e30b3dee.js';
import './CollectionFlattener-567ea124.js';
import './workers-5ad649f9.js';
import './unitUtils-b25ae8cb.js';
import './executeQueryJSON-165e5051.js';
import './JSONSupport-5a9f556a.js';
import './utils-8991f658.js';
import './query-0da4fa5c.js';
import './normalizeUtils-1fd7c0f1.js';
import './pbfQueryUtils-e36554ac.js';
import './pbf-1b9dc626.js';
import './OptimizedFeature-6034ce0f.js';
import './OptimizedFeatureSet-27736f1f.js';
import './queryZScale-0ff40b9b.js';
import './zscale-cec9b507.js';
import './Query-792b142d.js';
import './TimeExtent-1bc95591.js';
import './Field-2b6029f8.js';
import './RangeDomain-de3132b0.js';
import './fieldType-b9f9365f.js';
import './FeatureSet-22102ca4.js';
import './AttachmentQuery-42d07544.js';
import './Heading-7763ec3e.js';
import './utils-ce0d30fb.js';
import './asyncUtils-dc4bd819.js';
import './ItemCache-2d2e76a8.js';
import './MemCache-e219bcfb.js';
import './utils-f8425723.js';
import './widget-13824d6e.js';
import './vmEvent-bdc3bebc.js';
import './TopFeaturesQuery-31a64765.js';
import './QueryTask-f5ad3db8.js';
import './compilerUtils-128fda14.js';
import './featureConversionUtils-0aaeda4b.js';
import './Task-87780f0a.js';
import './FeatureLayer-9672bbd9.js';
import './UniqueValueRenderer-f2af8ece.js';
import './VisualVariablesMixin-bafacb39.js';
import './colorRamps-693d6433.js';
import './ColorStop-fb26d745.js';
import './sizeVariableUtils-4d3662df.js';
import './visualVariableUtils-506efb2b.js';
import './lengthUtils-7a485aa7.js';
import './diffUtils-491d81df.js';
import './jsonUtils-a31b4632.js';
import './styleUtils-8fedca21.js';
import './DictionaryRenderer-78308a28.js';
import './LRUCache-81490262.js';
import './jsonUtils-580ae154.js';
import './MultiOriginJSONSupport-f6506b2f.js';
import './HeightModelInfo-a87824be.js';
import './APIKeyMixin-4866fda4.js';
import './ArcGISService-4cc51fbf.js';
import './arcgisLayerUrl-2aeded02.js';
import './BlendLayer-70766503.js';
import './jsonUtils-352e8eb7.js';
import './mat4-ef633c62.js';
import './_commonjsHelpers-020ca939.js';
import './CustomParametersMixin-89544c0d.js';
import './labelingInfo-683f3119.js';
import './LabelClass-65776e47.js';
import './labelUtils-45e9126f.js';
import './defaultsJSON-53258912.js';
import './OperationalLayer-b04e38aa.js';
import './OrderedLayer-8b694b55.js';
import './PortalLayer-df690c5a.js';
import './PortalItem-209a51a1.js';
import './RefreshableLayer-702beb88.js';
import './ScaleRangeLayer-99043c54.js';
import './TemporalLayer-b41e8e6e.js';
import './TimeInfo-9a5e9434.js';
import './FeatureType-8cae0f8f.js';
import './fieldProperties-b0c243c7.js';
import './FieldsIndex-56cf15de.js';
import './LayerFloorInfo-2c65601c.js';
import './styleUtils-e2196c57.js';
import './popupUtils-4957d444.js';
import './TileStore-39bbbf67.js';
import './TileKey-c678a190.js';
import './quickselect-ccfd8cff.js';
import './layerViewUtils-9cf85499.js';
import './GoTo-7624d206.js';
import './mathUtils-91a58478.js';
import './TileInfo-1fc37c81.js';
import './Basemap-37cadf63.js';
import './loadAll-85b9593d.js';
import './writeUtils-4d88cd58.js';
import './TablesMixin-93b17242.js';
import './Scheduler-fb8ceb54.js';
import './unitBezier-0f2e6a45.js';
import './mat2d-b05e5a52.js';
import './vec2-f635f36f.js';
import './vec2f64-503345b4.js';
import './projection-32646abc.js';
import './mat3-351ead7a.js';
import './vec2f32-7c7b1123.js';
import './TileStrategy-8fcd9a8c.js';
import './screenshotUtils-6f247196.js';
import './capabilities-eb3cc9c1.js';
import './definitions-a1bd4630.js';
import './VertexArrayObject-1f343ba6.js';
import './Texture-167b44f1.js';
import './ShaderCompiler-08617240.js';
import './number-888f4898.js';
import './config-768959de.js';
import './GeometryUtils-09c2f88c.js';
import './MaterialKey-b9f33132.js';
import './pixelUtils-1d6f5ad9.js';
import './Container-aead67d5.js';
import './EffectList-21c65dc8.js';
import './earcut-05cd758b.js';
import './CIMSymbolHelper-32f47e1c.js';
import './Rect-988189d5.js';
import './GeometryUtils-93aa6536.js';
import './projectionSupport-c6b7be0b.js';
import './json-cfa039ad.js';
import './FeatureContainer-7964a470.js';
import './TileContainer-6be70715.js';
import './visualVariablesUtils-44baad69.js';
import './visualVariablesUtils-fd83366e.js';
import './Matcher-4691ead7.js';
import './ComputedAttributeStorage-826eaf89.js';
import './FeatureSetReader-c80a5de6.js';
import './centroid-373eb2cf.js';
import './tileUtils-eca923af.js';
import './TileClipper-42cfaf99.js';
import './cimAnalyzer-9c84fbb4.js';
import './quantizationUtils-8990b7ec.js';
import './cimSymbolUtils-b25a8c7a.js';
import './devEnvironmentUtils-b174118e.js';
import './schemaUtils-961cbcb4.js';
import './MD5-6027098a.js';
import './vec3f32-f2e27abe.js';
import './Bitmap-97d3b9d9.js';
import './sublayerUtils-c6a17833.js';
import './floorFilterUtils-a09da11b.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
let o=class extends t{renderChildren(r){if(r.drawPhase!==I.HIGHLIGHT)return;if(this.attributeView.bindTextures(r.context),!this.children.some((r=>r.hasData)))return;super.renderChildren(r);const{painter:e}=r,t=e.effects.highlight;t.bind(r),r.context.setColorMask(!0,!0,!0,!0),r.context.clear(16384),this._renderChildren(r,t.defines.concat(["highlightAll"])),t.draw(r),t.unbind();}};o=e([i$1("esri.views.2d.layers.support.HighlightGraphicContainer")],o);const i=o;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const c=c=>{let y=class extends c{initialize(){this.exportImageParameters=new c$1({layer:this.layer});}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null;}get exportImageVersion(){var e;return null==(e=this.exportImageParameters)||e.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}async fetchPopupFeatures(e,s$2){const{layer:a}=this;if(!e)return Promise.reject(new s("mapimagelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:a}));const p=this.get("view.scale"),i=[],l=async e=>{const r$1=0===e.minScale||p<=e.minScale,o=0===e.maxScale||p>=e.maxScale;if(e.visible&&r$1&&o)if(e.sublayers)e.sublayers.forEach(l);else if(e.popupEnabled){const r$1=d(e,{...s$2,defaultPopupTemplateEnabled:!1});r(r$1)&&i.unshift({sublayer:e,popupTemplate:r$1});}},c=a.sublayers.toArray().reverse().map(l);await Promise.all(c);const y=i.map((async({sublayer:r$1,popupTemplate:o})=>{await r$1.load().catch((()=>{}));const a=r$1.createQuery(),p=r(s$2)?s$2.event:null,i=s$1({renderer:r$1.renderer,event:p}),l=this.createFetchPopupFeaturesQueryGeometry(e,i);a.geometry=l,a.outFields=await t$1(r$1,o);const u=await this._loadArcadeModules(o);u&&u.arcadeUtils.hasGeometryOperations(o)||(a.maxAllowableOffset=l.width/i);return (await r$1.queryFeatures(a)).features}));return (await T(y)).reduce(((e,r)=>r.value?[...e,...r.value]:e),[]).filter((e=>null!=e))}canResume(){var e;return !!super.canResume()&&(null==(e=this.timeExtent)||!e.isEmpty)}_loadArcadeModules(e){if(e.get("expressionInfos.length"))return a()}};return e([d$1()],y.prototype,"exportImageParameters",void 0),e([d$1({readOnly:!0})],y.prototype,"exportImageVersion",null),e([d$1()],y.prototype,"layer",void 0),e([d$1()],y.prototype,"suspended",void 0),e([d$1(g)],y.prototype,"timeExtent",void 0),y=e([i$1("esri.views.layers.MapImageLayerView")],y),y};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const u=s$2.getLogger("esri.views.2d.layers.MapImageLayerView2D");let f=class extends(c(i$2(l(u$1)))){constructor(){super(...arguments),this._highlightGraphics=new c$2;}hitTest(){return null}update(e){this.strategy.update(e).catch((e=>{d$2(e)||u.error(e);}));}attach(){const{imageMaxWidth:e,imageMaxHeight:t,version:r}=this.layer,i$1=r>=10.3,s=r>=10;this._bitmapContainer=new t$2,this.container.addChild(this._bitmapContainer);const a=new rt({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new i(this.view.featuresTilingScheme)});this.container.addChild(a.container),this.strategy=new S({container:this._bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:e,imageMaxHeight:t,imageRotationSupported:i$1,imageNormalizationSupported:s,hidpi:!0}),this.handles.add(this.watch("exportImageVersion",(()=>this.requestUpdate())),"exportImageVersion"),this.handles.add(this.watch("view.floors",(()=>this.requestUpdate())),"view.floors"),this.requestUpdate();}detach(){this.handles.remove("exportImageVersion"),this.handles.remove("view.floors"),this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren();}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate();}highlight(e,t){return this._highlightGraphics.add(e),{remove:()=>{this._highlightGraphics.remove(e);}}}createFetchPopupFeaturesQueryGeometry(e,t){return a$1(e,t,this.view)}async doRefresh(){this.requestUpdate();}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(e,t,r,i){return this.layer.fetchImage(e,t,r,{timeExtent:this.timeExtent,floors:this.view.floors,...i})}};e([d$1()],f.prototype,"strategy",void 0),e([d$1()],f.prototype,"updating",void 0),f=e([i$1("esri.views.2d.layers.MapImageLayerView2D")],f);const y=f;

export default y;
