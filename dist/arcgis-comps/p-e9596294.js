import{c as s,cp as t,E as i,A as e,h as r}from"./p-e58503d5.js";import{u as h}from"./p-480e5606.js";const o=s.getLogger("esri.core.workers.WorkerHandle");class n{constructor(s,t,i,e={}){this._mainMethod=t,this._listeners=[],this._promise=h(s,{...e,schedule:i}).then((s=>{if(void 0===this._thread){this._thread=s,this._promise=null,e.hasInitialize&&this.broadcast({},"initialize");for(const s of this._listeners)this._connectListener(s)}else s.close()})),this._promise.catch((t=>o.error(`Failed to initialize ${s} worker: ${t}`)))}on(s,r){const h={removed:!1,eventName:s,callback:r,threadHandle:null};return this._listeners.push(h),this._connectListener(h),t((()=>{h.removed=!0,i(this._listeners,h),this._thread&&e(h.threadHandle)&&h.threadHandle.remove()}))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(s,t){return this.invokeMethod(this._mainMethod,s,t)}invokeMethod(s,t,i){if(this._thread){const e=this.getTransferList(t,s);return this._thread.invoke(s,t,{transferList:e,signal:i})}return this._promise?this._promise.then((()=>(r(i),this.invokeMethod(s,t,i)))):Promise.reject(null)}broadcast(s,t){return this._thread?Promise.all(this._thread.broadcast(t,s)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(s,t))):Promise.reject()}get promise(){return this._promise}_connectListener(s){this._thread&&this._thread.on(s.eventName,s.callback).then((t=>{s.removed||(s.threadHandle=t)}))}}export{n}