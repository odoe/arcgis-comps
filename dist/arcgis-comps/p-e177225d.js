import{Q as e,Z as t,e as r,d as s,i as n}from"./p-e58503d5.js";import{e as a,r as o}from"./p-7ca40eac.js";import{v as i,m as c}from"./p-b79fcce3.js";import{r as u,o as f,n as p}from"./p-2e37d910.js";import{d as m,v as l}from"./p-c048b814.js";import{t as y,a as d}from"./p-d663a3ad.js";import{a as S,r as g,n as h,o as j,m as J,b as N,c as O,d as b,e as q,f as R}from"./p-5400b397.js";import"./p-181bf7a5.js";import{l as x}from"./p-a87cccba.js";import"./p-53bb6ab4.js";async function v(t,r,s){const n=a(t),i={...n.query,f:"json",...r.toJSON()},c=o(i,s);return e(n.path+"/areasAndLengths",c).then((e=>e.data))}async function w(t,r,s,n){const c=r[0].spatialReference,f=a(t),p={...f.query,f:"json",sr:JSON.stringify(c.toJSON()),polygons:JSON.stringify(u(r).geometries),polylines:JSON.stringify(u(s).geometries)},m=o(p,n);return e(f.path+"/autoComplete",m).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new i({spatialReference:c,rings:e})))))}async function C(t,r,s){const n=a(t),c={...n.query,f:"json",...r.toJSON()},u=r.outSpatialReference||r.geometries[0].spatialReference,f=o(c,s);return e(n.path+"/buffer",f).then((e=>(e.data.geometries||[]).map((({rings:e})=>new i({spatialReference:u,rings:e})))))}async function A(t,r,s){const n=r[0].spatialReference,i=a(t),c={...i.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify(u(r))},f=o(c,s);return e(i.path+"/convexHull",f).then((({data:e})=>m(e.geometry).set({spatialReference:n})))}async function T(t,r,s,n){const o=a(t),i=r[0].spatialReference,c={...n,query:{...o.query,f:"json",sr:JSON.stringify(i),target:JSON.stringify({geometryType:l(r[0]),geometries:r}),cutter:JSON.stringify(s)}},u=await e(o.path+"/cut",c),{cutIndexes:f,geometries:p=[]}=u.data;return{cutIndexes:f,geometries:p.map((e=>{const t=m(e);return t.spatialReference=i,t}))}}async function G(t,r,s){const n=r.geometries[0].spatialReference,i=a(t),c={...i.query,f:"json",...r.toJSON()},u=o(c,s);return e(i.path+"/densify",u).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:n})))))}async function H(t,r,s,n){const o=r[0].spatialReference,i=a(t);let c={query:{...i.query,f:"json",sr:JSON.stringify(o.toJSON()),geometries:JSON.stringify(u(r)),geometry:JSON.stringify({geometryType:l(s),geometry:s.toJSON()})}};return n&&(c={...n,...c}),e(i.path+"/difference",c).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:o})))))}async function I(t,r,s){const n=a(t),i={...n.query,f:"json",...r.toJSON()},c=o(i,s);return e(n.path+"/distance",c).then((({data:e})=>e&&e.distance))}async function M(t,r,s){const n=(r=S.from(r)).toJSON(),i=g(r),c=a(t),u={...c.query,f:"json",...i},f=n.geometries[0].spatialReference,p=o(u,s);return e(c.path+"/generalize",p).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:f})))))}async function z(t,r,s,n){const i=r[0].spatialReference,c=a(t),f={...c.query,f:"json",sr:JSON.stringify(i.toJSON()),geometries:JSON.stringify(u(r)),geometry:JSON.stringify({geometryType:l(s),geometry:s.toJSON()})},p=o(f,n);return e(c.path+"/intersect",p).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:i})))))}function E(t,r,s){const n=r.map((e=>e.toJSON())),i=r[0].spatialReference,c=a(t),u={...c.query,f:"json",sr:i.wkid?i.wkid:JSON.stringify(i.toJSON()),polygons:JSON.stringify(n)},f=o(u,s);return e(c.path+"/labelPoints",f).then((({data:e})=>(e.labelPoints||[]).map((e=>m(e).set({spatialReference:i})))))}async function L(t,r,s){r=h.from(r);const n=j(r),i=a(t),c={...i.query,f:"json",...n},u=o(c,s);return e(i.path+"/lengths",u).then((({data:e})=>e))}async function P(t,r,s){r=J.from(r);const n=N(r),i=a(t),c={...i.query,f:"json",...n},u=r.geometries[0].spatialReference,f=o(c,s);return e(i.path+"/offset",f).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:u})))))}async function k(t,r,s){r=O.from(r);const n=b(r),i=a(t),c={...i.query,f:"json",...n},u=o(c,s);return e(i.path+"/relation",u).then((({data:e})=>e.relations))}async function D(t,r,s,n){const i=r.spatialReference,c=a(t),u={...c.query,f:"json",sr:JSON.stringify(i.toJSON()),target:JSON.stringify({geometryType:l(r),geometry:r.toJSON()}),reshaper:JSON.stringify(s.toJSON())},f=o(u,n);return e(c.path+"/reshape",f).then((({data:e})=>m(e.geometry).set({spatialReference:i})))}async function F(t,r,s){r=q.from(r);const n=R(r),i=a(t),u={...i.query,f:"json",...n},f=r.sr,p=o(u,s);return e(i.path+"/trimExtend",p).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new c({spatialReference:f,paths:e})))))}async function K(t,r,s){const n=r[0].spatialReference,i=a(t),c={...i.query,f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify(u(r))},f=o(c,s);return e(i.path+"/union",f).then((({data:e})=>m(e.geometry).set({spatialReference:n})))}let Q=class extends x{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return v(this.url,e,t)}autoComplete(e,t,r){return w(this.url,e,t,r)}buffer(e,t){return C(this.url,e,t)}convexHull(e,t){return A(this.url,e,t)}cut(e,t,r){return T(this.url,e,t,r)}densify(e,t){return G(this.url,e,t)}difference(e,t,r){return H(this.url,e,t,r)}distance(e,t){return I(this.url,e,t)}fromGeoCoordinateString(e,t){return y(this.url,e,t)}generalize(e,t){return M(this.url,e,t)}intersect(e,t,r){return z(this.url,e,t,r)}labelPoints(e,t){return E(this.url,e,t)}lengths(e,t){return L(this.url,e,t)}offset(e,t){return P(this.url,e,t)}project(e,t){return p(this.url,e,t)}relation(e,t){return k(this.url,e,t)}reshape(e,t,r){return D(this.url,e,t,r)}simplify(r,s){return async function(r,s,n){const a="string"==typeof r?t(r):r,o=s[0].spatialReference,i=l(s[0]),c={...n,query:{...a.query,f:"json",sr:o.wkid?o.wkid:JSON.stringify(o),geometries:JSON.stringify(u(s))}},{data:p}=await e(a.path+"/simplify",c);return f(p.geometries,i,o)}(this.url,r,s)}toGeoCoordinateString(e,t){return d(this.url,e,t)}trimExtend(e,t){return F(this.url,e,t)}union(e,t){return K(this.url,e,t)}};Q.UNIT_METER=9001,Q.UNIT_GERMAN_METER=9031,Q.UNIT_FOOT=9002,Q.UNIT_SURVEY_FOOT=9003,Q.UNIT_CLARKE_FOOT=9005,Q.UNIT_FATHOM=9014,Q.UNIT_NAUTICAL_MILE=9030,Q.UNIT_SURVEY_CHAIN=9033,Q.UNIT_SURVEY_LINK=9034,Q.UNIT_SURVEY_MILE=9035,Q.UNIT_KILOMETER=9036,Q.UNIT_CLARKE_YARD=9037,Q.UNIT_CLARKE_CHAIN=9038,Q.UNIT_CLARKE_LINK=9039,Q.UNIT_SEARS_YARD=9040,Q.UNIT_SEARS_FOOT=9041,Q.UNIT_SEARS_CHAIN=9042,Q.UNIT_SEARS_LINK=9043,Q.UNIT_BENOIT_1895A_YARD=9050,Q.UNIT_BENOIT_1895A_FOOT=9051,Q.UNIT_BENOIT_1895A_CHAIN=9052,Q.UNIT_BENOIT_1895A_LINK=9053,Q.UNIT_BENOIT_1895B_YARD=9060,Q.UNIT_BENOIT_1895B_FOOT=9061,Q.UNIT_BENOIT_1895B_CHAIN=9062,Q.UNIT_BENOIT_1895B_LINK=9063,Q.UNIT_INDIAN_FOOT=9080,Q.UNIT_INDIAN_1937_FOOT=9081,Q.UNIT_INDIAN_1962_FOOT=9082,Q.UNIT_INDIAN_1975_FOOT=9083,Q.UNIT_INDIAN_YARD=9084,Q.UNIT_INDIAN_1937_YARD=9085,Q.UNIT_INDIAN_1962_YARD=9086,Q.UNIT_INDIAN_1975_YARD=9087,Q.UNIT_FOOT_1865=9070,Q.UNIT_RADIAN=9101,Q.UNIT_DEGREE=9102,Q.UNIT_ARCMINUTE=9103,Q.UNIT_ARCSECOND=9104,Q.UNIT_GRAD=9105,Q.UNIT_GON=9106,Q.UNIT_MICRORADIAN=9109,Q.UNIT_ARCMINUTE_CENTESIMAL=9112,Q.UNIT_ARCSECOND_CENTESIMAL=9113,Q.UNIT_MIL6400=9114,Q.UNIT_BRITISH_1936_FOOT=9095,Q.UNIT_GOLDCOAST_FOOT=9094,Q.UNIT_INTERNATIONAL_CHAIN=109003,Q.UNIT_INTERNATIONAL_LINK=109004,Q.UNIT_INTERNATIONAL_YARD=109001,Q.UNIT_STATUTE_MILE=9093,Q.UNIT_SURVEY_YARD=109002,Q.UNIT_50KILOMETER_LENGTH=109030,Q.UNIT_150KILOMETER_LENGTH=109031,Q.UNIT_DECIMETER=109005,Q.UNIT_CENTIMETER=109006,Q.UNIT_MILLIMETER=109007,Q.UNIT_INTERNATIONAL_INCH=109008,Q.UNIT_US_SURVEY_INCH=109009,Q.UNIT_INTERNATIONAL_ROD=109010,Q.UNIT_US_SURVEY_ROD=109011,Q.UNIT_US_NAUTICAL_MILE=109012,Q.UNIT_UK_NAUTICAL_MILE=109013,Q.UNIT_SQUARE_INCHES="esriSquareInches",Q.UNIT_SQUARE_FEET="esriSquareFeet",Q.UNIT_SQUARE_YARDS="esriSquareYards",Q.UNIT_ACRES="esriAcres",Q.UNIT_SQUARE_MILES="esriSquareMiles",Q.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",Q.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",Q.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",Q.UNIT_SQUARE_METERS="esriSquareMeters",Q.UNIT_ARES="esriAres",Q.UNIT_HECTARES="esriHectares",Q.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",r([s()],Q.prototype,"url",void 0),Q=r([n("esri.tasks.GeometryService")],Q);const Y=Q;export default Y;