import{e}from"./p-def8d692.js";function n(e){let n="";for(const t in e){const o=e[t];if("boolean"==typeof o)o&&(n+=`#define ${t}\n`);else if("number"==typeof o)n+=`#define ${t} ${o.toFixed()}\n`;else if("object"==typeof o){const e=o.options;let r=0;for(const t in e)n+=`#define ${e[t]} ${(r++).toFixed()}\n`;n+=`#define ${t} ${e[o.value]}\n`}}return n}function t(n,t,o,r){o=o||{},r=r||"";const s="function"==typeof t.shaders?t.shaders(o):t.shaders;return new e(n,r+s.vertexShader,r+s.fragmentShader,t.attributes)}class o{constructor(e){this.readFile=e}resolveIncludes(e){return this.resolve(e)}resolve(e,n=new Map){if(n.has(e))return n.get(e);const t=this.read(e);if(!t)throw new Error(`cannot find shader file ${e}`);const o=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let r=o.exec(t);const s=[];for(;null!=r;)s.push({path:r[1],start:r.index,length:r[0].length}),r=o.exec(t);let f=0,i="";return s.forEach((e=>{i+=t.slice(f,e.start),i+=n.has(e.path)?"":this.resolve(e.path,n),f=e.start+e.length})),i+=t.slice(f),n.set(e,i),i}read(e){return this.readFile(e)}}export{o as e,n,t}