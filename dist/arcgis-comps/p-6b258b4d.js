import{e as t,i as s,U as e,W as i,hd as p}from"./p-7b6f6c18.js";import r from"./p-94a8a82f.js";import"./p-227a5838.js";import"./p-033339b0.js";import"./p-bdb8e9d6.js";import"./p-47e1bd73.js";import"./p-0b691897.js";import"./p-a4a5967b.js";import"./p-5c077b4e.js";import"./p-804725e3.js";import"./p-1dd7027e.js";import"./p-a16c2b1d.js";import"./p-df9635e1.js";import"./p-cede17c2.js";import"./p-ea65d9c9.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";import"./p-55e3d31e.js";import"./p-9f705d18.js";import"./p-ec834938.js";import"./p-dede18bd.js";import"./p-e991a11e.js";import"./p-6bccadb6.js";import"./p-03d6250d.js";import"./p-de5d9151.js";import"./p-06264f01.js";let o=class extends r{initialize(){this.handles.add([e(this.view,"viewpoint",(()=>this._update()))])}_injectOverrides(t){let s=super._injectOverrides(t);const e=this.view.scale,r=this.layer.sublayers.filter((t=>function(t,s){return!t.visible||0!==t.minScale&&s>t.minScale||0!==t.maxScale&&s<t.maxScale}(t,e))).map((t=>t.subtypeCode));if(!r.length)return s;s=i(s)?s:(new p).toJSON();const o=`NOT ${this.layer.subtypeField} IN (${r.join(",")})`;return s.where=s.where?`(${s.where}) AND (${o})`:o,s}_setLayersForFeature(t){const s=this.layer.fieldsIndex.get(this.layer.subtypeField),e=t.attributes[s.name],i=this.layer.sublayers.find((t=>t.subtypeCode===e));t.layer=i,t.sourceLayer=this.layer}_createSchemaConfig(){const t={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map((t=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:t.labelingInfo,labelsVisible:t.labelsVisible,renderer:t.renderer,subtypeCode:t.subtypeCode,orderBy:null})))},s=this.layer.sublayers.map((t=>t.subtypeCode)).join(",");let e=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return e+=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${s})`:"1=2",{...super._createSchemaConfig(),...t,definitionExpression:e}}};o=t([s("esri.views.2d.layers.SubtypeGroupLayerView2D")],o);const d=o;export default d;