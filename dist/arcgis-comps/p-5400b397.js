import{e,d as t,i,ah as r,a1 as s,N as o}from"./p-e58503d5.js";import{d as n,v as l}from"./p-c048b814.js";import{m as a}from"./p-b79fcce3.js";let d=class extends s{constructor(e){super(e),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};e([t({type:String,json:{write:!0}})],d.prototype,"deviationUnit",void 0),e([t({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],d.prototype,"geometries",void 0),e([t({type:Number,json:{write:!0}})],d.prototype,"maxDeviation",void 0),d=e([i("esri.rest.support.GeneralizeParameters")],d),d.from=r(d);const u=d,c=new o({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});function m(e){const{geometries:t,deviationUnit:i,maxDeviation:r}=e.toJSON(),s={maxDeviation:r};return t&&t.length&&(s.geometries=JSON.stringify({geometryType:l(t[0]),geometries:t}),s.sr=JSON.stringify(t[0].spatialReference)),c.write(i,s,"deviationUnit"),s}let p=class extends s{constructor(e){super(e),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};e([t({type:String,json:{write:!0}})],p.prototype,"calculationType",void 0),e([t({type:Boolean,json:{write:!0}})],p.prototype,"geodesic",void 0),e([t({json:{write:!0}})],p.prototype,"lengthUnit",void 0),e([t({type:[a],json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],p.prototype,"polylines",void 0),p=e([i("esri.rest.support.LengthsParameters")],p),p.from=r(p);const y=p,f=new o({preserveShape:"preserve-shape"});function w(e){const{polylines:t,lengthUnit:i,geodesic:r,calculationType:s}=e.toJSON(),o={};o.polylines=JSON.stringify(t);const n=e.polylines[0].spatialReference;return o.sr=n.wkid?n.wkid:JSON.stringify(n.toJSON()),i&&(o.lengthUnit=i),r&&(o.geodesic=r),s&&(o.calculationType=f.toJSON(s)),o}let v=class extends s{constructor(e){super(e),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};e([t({type:Number,json:{write:!0}})],v.prototype,"bevelRatio",void 0),e([t({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],v.prototype,"geometries",void 0),e([t({type:Number,json:{write:!0}})],v.prototype,"offsetDistance",void 0),e([t({type:String,json:{write:!0}})],v.prototype,"offsetHow",void 0),e([t({type:String,json:{write:!0}})],v.prototype,"offsetUnit",void 0),v=e([i("esri.rest.support.OffsetParameters")],v),v.from=r(v);const h=v,g=new o({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),j=new o({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});function S(e){const{geometries:t,bevelRatio:i,offsetDistance:r,offsetHow:s,offsetUnit:o}=e.toJSON(),n={bevelRatio:i,offsetDistance:r};return t&&t.length&&(n.geometries=JSON.stringify({geometryType:l(t[0]),geometries:t}),n.sr=JSON.stringify(t[0].spatialReference)),s&&(n.offsetHow=g.toJSON(s)),o&&(n.offsetUnit=j.toJSON(o)),n}let x=class extends s{constructor(e){super(e),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};e([t({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries1=e.map((e=>e.toJSON()))}}}})],x.prototype,"geometries1",void 0),e([t({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries2=e.map((e=>e.toJSON()))}}}})],x.prototype,"geometries2",void 0),e([t({type:String,json:{write:!0}})],x.prototype,"relation",void 0),e([t({type:String,json:{write:!0}})],x.prototype,"relationParameter",void 0),x=e([i("esri.rest.support.RelationParameters")],x),x.from=r(x);const R=x,O=new o({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});function G(e){const{geometries1:t,geometries2:i,relation:r,relationParameter:s}=e.toJSON(),o={};if(t&&t.length){o.geometries1=JSON.stringify({geometryType:l(t[0]),geometries:t});const e=t[0].spatialReference;o.sr=e.wkid?e.wkid:JSON.stringify(e)}return i&&i.length>0&&(o.geometries2=JSON.stringify({geometryType:l(i[0]),geometries:i})),r&&(o.relation=O.toJSON(r)),s&&(o.relationParam=s),o}let N=class extends s{constructor(e){super(e),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};e([t({type:String,json:{write:!0}})],N.prototype,"extendHow",void 0),e([t({type:[a],json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],N.prototype,"polylines",void 0),e([t({json:{read:{reader:e=>e?n(e):null},write:{writer:(e,t)=>{t.trimExtendTo=e.toJSON()}}}})],N.prototype,"trimExtendTo",void 0),N=e([i("esri.rest.support.TrimExtendParameters")],N),N.from=r(N);const b=N,J=new o({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});function T(e){const{extendHow:t,polylines:i,trimExtendTo:r}=e.toJSON(),s={};return s.extendHow=J.toJSON(t),i&&i.length&&(s.polylines=JSON.stringify(i),s.sr=JSON.stringify(i[0].spatialReference)),r&&(s.trimExtendTo=JSON.stringify(r)),s}export{u as a,S as b,R as c,G as d,b as e,T as f,h as m,y as n,w as o,m as r}