import{P as e,e as t,d as r,i,W as s}from"./p-9ae46e68.js";import{a as o}from"./p-fe01b82b.js";import{I as n,aH as l,b2 as a}from"./p-566b0715.js";const d=new e({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"});let m=class extends o{constructor(e){super(e),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};t([r({type:String,json:{write:!0}})],m.prototype,"deviationUnit",void 0),t([r({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],m.prototype,"geometries",void 0),t([r({type:Number,json:{write:!0}})],m.prototype,"maxDeviation",void 0),m=t([i("esri.rest.support.GeneralizeParameters")],m),m.from=s(m);const u=m,c=new e({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});function p(e){const{geometries:t,deviationUnit:r,maxDeviation:i}=e.toJSON(),s={maxDeviation:i};return t&&t.length&&(s.geometries=JSON.stringify({geometryType:l(t[0]),geometries:t}),s.sr=JSON.stringify(t[0].spatialReference)),c.write(r,s,"deviationUnit"),s}let y=class extends o{constructor(e){super(e),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};t([r({type:String,json:{write:!0}})],y.prototype,"calculationType",void 0),t([r({type:Boolean,json:{write:!0}})],y.prototype,"geodesic",void 0),t([r({json:{write:!0}})],y.prototype,"lengthUnit",void 0),t([r({type:[a],json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],y.prototype,"polylines",void 0),y=t([i("esri.rest.support.LengthsParameters")],y),y.from=s(y);const f=y,w=new e({preserveShape:"preserve-shape"});function v(e){const{polylines:t,lengthUnit:r,geodesic:i,calculationType:s}=e.toJSON(),o={};o.polylines=JSON.stringify(t);const n=e.polylines[0].spatialReference;return o.sr=n.wkid?n.wkid:JSON.stringify(n.toJSON()),r&&(o.lengthUnit=r),i&&(o.geodesic=i),s&&(o.calculationType=w.toJSON(s)),o}let g=class extends o{constructor(e){super(e),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};t([r({type:Number,json:{write:!0}})],g.prototype,"bevelRatio",void 0),t([r({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],g.prototype,"geometries",void 0),t([r({type:Number,json:{write:!0}})],g.prototype,"offsetDistance",void 0),t([r({type:String,json:{write:!0}})],g.prototype,"offsetHow",void 0),t([r({type:String,json:{write:!0}})],g.prototype,"offsetUnit",void 0),g=t([i("esri.rest.support.OffsetParameters")],g),g.from=s(g);const h=g,j=new e({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),S=new e({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});function R(e){const{geometries:t,bevelRatio:r,offsetDistance:i,offsetHow:s,offsetUnit:o}=e.toJSON(),n={bevelRatio:r,offsetDistance:i};return t&&t.length&&(n.geometries=JSON.stringify({geometryType:l(t[0]),geometries:t}),n.sr=JSON.stringify(t[0].spatialReference)),s&&(n.offsetHow=j.toJSON(s)),o&&(n.offsetUnit=S.toJSON(o)),n}let G=class extends o{constructor(e){super(e),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};t([r({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries1=e.map((e=>e.toJSON()))}}}})],G.prototype,"geometries1",void 0),t([r({json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.geometries2=e.map((e=>e.toJSON()))}}}})],G.prototype,"geometries2",void 0),t([r({type:String,json:{write:!0}})],G.prototype,"relation",void 0),t([r({type:String,json:{write:!0}})],G.prototype,"relationParameter",void 0),G=t([i("esri.rest.support.RelationParameters")],G),G.from=s(G);const x=G,O=new e({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});function N(e){const{geometries1:t,geometries2:r,relation:i,relationParameter:s}=e.toJSON(),o={};if(t&&t.length){o.geometries1=JSON.stringify({geometryType:l(t[0]),geometries:t});const e=t[0].spatialReference;o.sr=e.wkid?e.wkid:JSON.stringify(e)}return r&&r.length>0&&(o.geometries2=JSON.stringify({geometryType:l(r[0]),geometries:r})),i&&(o.relation=O.toJSON(i)),s&&(o.relationParam=s),o}let b=class extends o{constructor(e){super(e),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};t([r({type:String,json:{write:!0}})],b.prototype,"extendHow",void 0),t([r({type:[a],json:{read:{reader:e=>e?e.map((e=>n(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],b.prototype,"polylines",void 0),t([r({json:{read:{reader:e=>e?n(e):null},write:{writer:(e,t)=>{t.trimExtendTo=e.toJSON()}}}})],b.prototype,"trimExtendTo",void 0),b=t([i("esri.rest.support.TrimExtendParameters")],b),b.from=s(b);const T=b,D=new e({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});function J(e){const{extendHow:t,polylines:r,trimExtendTo:i}=e.toJSON(),s={};return s.extendHow=D.toJSON(t),r&&r.length&&(s.polylines=JSON.stringify(r),s.sr=JSON.stringify(r[0].spatialReference)),i&&(s.trimExtendTo=JSON.stringify(i)),s}export{d as _,u as a,R as b,x as c,N as d,T as e,J as f,h as m,f as n,v as o,p as r}