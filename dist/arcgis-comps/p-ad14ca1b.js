import{a as n}from"./p-19bc1e3d.js";function e(n){let e="";for(const t in n){const o=n[t];if("boolean"==typeof o)o&&(e+=`#define ${t}\n`);else if("number"==typeof o)e+=`#define ${t} ${o.toFixed()}\n`;else if("object"==typeof o){const n=o.options;let r=0;for(const t in n)e+=`#define ${n[t]} ${(r++).toFixed()}\n`;e+=`#define ${t} ${n[o.value]}\n`}}return e}function t(e,t,o,r){o=o||{},r=r||"";const s="function"==typeof t.shaders?t.shaders(o):t.shaders;return new n(e,r+s.vertexShader,r+s.fragmentShader,t.attributes)}class o{constructor(n){this.readFile=n}resolveIncludes(n){return this.resolve(n)}resolve(n,e=new Map){if(e.has(n))return e.get(n);const t=this.read(n);if(!t)throw new Error(`cannot find shader file ${n}`);const o=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let r=o.exec(t);const s=[];for(;null!=r;)s.push({path:r[1],start:r.index,length:r[0].length}),r=o.exec(t);let i=0,f="";return s.forEach((n=>{f+=t.slice(i,n.start),f+=e.has(n.path)?"":this.resolve(n.path,e),i=n.start+n.length})),f+=t.slice(i),e.set(n,f),f}read(n){return this.readFile(n)}}export{o as e,e as n,t}