import{c as e,cs as t,s as i,aj as r,A as s,Q as a,d4 as o,h as p,e as n,d as l,a2 as c,i as m}from"./p-e58503d5.js";import{l as d}from"./p-d208934e.js";import{v as h}from"./p-afac6fb2.js";import{b as u}from"./p-3e39c093.js";import{s as j}from"./p-ecdff876.js";import{p as v}from"./p-c096b5df.js";import{y,f}from"./p-1ab449fc.js";import{w as b}from"./p-e44bd0a6.js";import{n as w}from"./p-24d8fcee.js";import"./p-53bb6ab4.js";import"./p-01e5a461.js";import"./p-b79fcce3.js";import"./p-8747982c.js";import"./p-efbca0ca.js";import"./p-09e4b01e.js";import"./p-db63fa0e.js";import"./p-ea916a39.js";import"./p-2f398ed1.js";import"./p-d3105731.js";import"./p-7731c620.js";import"./p-5d962998.js";import"./p-e9bae5e9.js";import"./p-b0565d49.js";import"./p-da33e926.js";import"./p-8a919d07.js";import"./p-7a5bfd29.js";import"./p-a6c8fb32.js";import"./p-765e6c28.js";import"./p-6b2eb7a7.js";import"./p-e654504b.js";import"./p-0eb619a6.js";import"./p-e9596294.js";import"./p-480e5606.js";const g=e.getLogger("esri.layers.ElevationLayer");let S=class extends(j(v(y(b(d(u)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=w()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){this._lercDecoder=t(this._lercDecoder)}set minScale(e){this.constructed&&g.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`)}get minScale(){}set maxScale(e){this.constructed&&g.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`)}get maxScale(){}readVersion(e,t){let i=t.currentVersion;return i||(i=9.3),i}load(e){const t=s(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new i("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(r).then((()=>this._fetchImageService(t)))),Promise.resolve(this)}fetchTile(e,t,i,r){const o=s((r=r||{signal:null}).signal)?r.signal:r.signal=(new AbortController).signal,p={responseType:"array-buffer",signal:o},n={noDataValue:r.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,i,r))).then((()=>a(this.getTileUrl(e,t,i),p))).then((e=>this._lercDecoder.decode(e.data,n,o))).then((e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue})))}getTileUrl(e,t,i){const r=o({...this.parsedUrl.query,blankTile:!(!this.tilemapCache&&this.supportsBlankTile)&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${i}${r?"?"+r:""}`}async queryElevation(e,t){const{ElevationQuery:i}=await import("./p-4c8c8560.js");return p(t),(new i).query(this,e,t)}async createElevationSampler(e,t){const{ElevationQuery:i}=await import("./p-4c8c8560.js");return p(t),(new i).createSampler(this,e,t)}_fetchTileAvailability(e,t,i,r){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,i,r):Promise.resolve("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const t={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},i=await a(this.parsedUrl.path,t);i.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i.data,this.read(i.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};n([l({json:{read:{source:"copyrightText"}}})],S.prototype,"copyright",void 0),n([l({readOnly:!0,type:h})],S.prototype,"heightModelInfo",void 0),n([l({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],S.prototype,"path",void 0),n([l({type:["show","hide"]})],S.prototype,"listMode",void 0),n([l({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],S.prototype,"minScale",null),n([l({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],S.prototype,"maxScale",null),n([l({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],S.prototype,"opacity",void 0),n([l({type:["ArcGISTiledElevationServiceLayer"]})],S.prototype,"operationalLayerType",void 0),n([l()],S.prototype,"sourceJSON",void 0),n([l({json:{read:!1},value:"elevation",readOnly:!0})],S.prototype,"type",void 0),n([l(f)],S.prototype,"url",void 0),n([l()],S.prototype,"version",void 0),n([c("version",["currentVersion"])],S.prototype,"readVersion",null),S=n([m("esri.layers.ElevationLayer")],S),S.prototype.fetchTile.__isDefault__=!0;const T=S;export default T;