import{e as t,i as e,A as s,c9 as r}from"./p-e58503d5.js";import{m as i}from"./p-889f7a78.js";import{o}from"./p-12f9c767.js";import{o as p}from"./p-47e1bd73.js";import{p as n}from"./p-a13ee19e.js";import{l as a}from"./p-237460e0.js";import"./p-53bb6ab4.js";import"./p-2f398ed1.js";import"./p-d3105731.js";import"./p-7731c620.js";import"./p-5d962998.js";import"./p-5e833dfc.js";import"./p-b79fcce3.js";import"./p-7a5bfd29.js";import"./p-a9a30646.js";import"./p-c048b814.js";import"./p-a131049b.js";import"./p-a2324023.js";import"./p-77b9a0fc.js";class c{constructor(t,e){this.offset=t,this.extent=e}}let m=class extends n{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(t,e){const s=e.schema.processors[0];"heatmap"===s.type&&i(this._schema,s)&&(t.mesh=!0,this._schema=s)}onTileUpdate(t){for(const e of t.removed)this._tileKeyToFeatureSets.delete(e.key.id)}onTileClear(t){return this._tileKeyToFeatureSets.delete(t.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:{clear:!0}})}async onTileMessage(t,e,i){this._tileKeyToFeatureSets.has(t.key.id)||this._tileKeyToFeatureSets.set(t.key.id,new Map);const n=this._tileKeyToFeatureSets.get(t.key.id);if(s(e.addOrUpdate)&&e.addOrUpdate.hasFeatures&&n.set(e.addOrUpdate.instance,e),e.end){const e=[],s=function(t){const e=t.key,s=new Map,r=256,i=p,o=t.tileInfoView.tileInfo.isWrappable;return s.set(a(e,-1,-1,o).id,new c([-i,-i],[i-r,i-r,i,i])),s.set(a(e,0,-1,o).id,new c([0,-i],[0,i-r,i,i])),s.set(a(e,1,-1,o).id,new c([i,-i],[0,i-r,r,i])),s.set(a(e,-1,0,o).id,new c([-i,0],[i-r,0,i,i])),s.set(a(e,1,0,o).id,new c([i,0],[0,0,r,i])),s.set(a(e,-1,1,o).id,new c([-i,i],[i-r,0,i,r])),s.set(a(e,0,1,o).id,new c([0,i],[0,0,i,r])),s.set(a(e,1,1,o).id,new c([i,i],[0,0,r,r])),s}(t);this._tileKeyToFeatureSets.forEach(((i,o)=>{if(o===t.key.id)i.forEach((t=>r(t.addOrUpdate,(t=>e.push(t)))));else if(s.has(o)){const t=s.get(o),[p,n]=t.offset;i.forEach((t=>r(t.addOrUpdate,(t=>{const s=t.transform(p,n,1,1);e.push(s)}))))}}));const n=o(e,this._schema.mesh,512,512);return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.key.id,intensityInfo:n},{...i,transferList:[n.matrix]})}}onTileError(t,e,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:t.id,error:e},s)}};m=t([e("esri.views.2d.layers.features.processors.HeatmapProcessor")],m);const f=m;export default f;