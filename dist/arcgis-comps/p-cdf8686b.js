import{e,i as t,r as s,bF as r}from"./p-9ae46e68.js";import{m as i}from"./p-30ddb3a0.js";import{o}from"./p-a70ca537.js";import{o as n}from"./p-47e1bd73.js";import{p}from"./p-9bf53fee.js";import{l as a}from"./p-5fb38925.js";import"./p-84bf99cb.js";import"./p-566b0715.js";import"./p-fe01b82b.js";import"./p-6ebb24ba.js";import"./p-4fd6e394.js";import"./p-f42060e0.js";import"./p-79553c8d.js";import"./p-8e03c038.js";import"./p-32462343.js";import"./p-2b250922.js";class c{constructor(e,t){this.offset=e,this.extent=t}}let m=class extends p{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(e,t){const s=t.schema.processors[0];"heatmap"===s.type&&i(this._schema,s)&&(e.mesh=!0,this._schema=s)}onTileUpdate(e){for(const t of e.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(e){return this._tileKeyToFeatureSets.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:{clear:!0}})}async onTileMessage(e,t,i){this._tileKeyToFeatureSets.has(e.key.id)||this._tileKeyToFeatureSets.set(e.key.id,new Map);const p=this._tileKeyToFeatureSets.get(e.key.id);if(s(t.addOrUpdate)&&t.addOrUpdate.hasFeatures&&p.set(t.addOrUpdate.instance,t),t.end){const t=[],s=function(e){const t=e.key,s=new Map,r=256,i=n,o=e.tileInfoView.tileInfo.isWrappable;return s.set(a(t,-1,-1,o).id,new c([-i,-i],[i-r,i-r,i,i])),s.set(a(t,0,-1,o).id,new c([0,-i],[0,i-r,i,i])),s.set(a(t,1,-1,o).id,new c([i,-i],[0,i-r,r,i])),s.set(a(t,-1,0,o).id,new c([-i,0],[i-r,0,i,i])),s.set(a(t,1,0,o).id,new c([i,0],[0,0,r,i])),s.set(a(t,-1,1,o).id,new c([-i,i],[i-r,0,i,r])),s.set(a(t,0,1,o).id,new c([0,i],[0,0,i,r])),s.set(a(t,1,1,o).id,new c([i,i],[0,0,r,r])),s}(e);this._tileKeyToFeatureSets.forEach(((i,o)=>{if(o===e.key.id)i.forEach((e=>r(e.addOrUpdate,(e=>t.push(e)))));else if(s.has(o)){const e=s.get(o),[n,p]=e.offset;i.forEach((e=>r(e.addOrUpdate,(e=>{const s=e.transform(n,p,1,1);t.push(s)}))))}}));const p=o(t,this._schema.mesh,512,512);return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.key.id,intensityInfo:p},{...i,transferList:[p.matrix]})}}onTileError(e,t,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:e.id,error:t},s)}};m=e([t("esri.views.2d.layers.features.processors.HeatmapProcessor")],m);const f=m;export default f;