import{u as t,hq as s,B as i,H as e,a8 as a,di as o,ev as h,W as r,g as p,gZ as n,ew as m,ad as c,aX as l,eF as d,af as f,e9 as b,e as j,d as w,i as u}from"./p-c8bc3433.js";import{b as v,g,d as y}from"./p-a1eb726e.js";import{g as k}from"./p-b7e18a4c.js";import{t as _}from"./p-f171280f.js";import{l as L,u as S}from"./p-c4678b0b.js";import{i as V}from"./p-bff8da07.js";import{r as x}from"./p-ad145b1b.js";import"./p-84bf99cb.js";import"./p-8fd94488.js";import"./p-feee221d.js";import"./p-30eee135.js";import"./p-2c46c687.js";import"./p-47e1bd73.js";import"./p-fd064341.js";import"./p-a6945989.js";import"./p-60f5af83.js";import"./p-b392deaf.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-be58da65.js";import"./p-17a8cfc0.js";import"./p-97ec6ae5.js";import"./p-b0a11892.js";import"./p-ea65d9c9.js";import"./p-9790d1b4.js";import"./p-099e7dab.js";import"./p-50ff864e.js";import"./p-b8e3591b.js";import"./p-f806c5d9.js";import"./p-f9493103.js";import"./p-c167c2b1.js";import"./p-1fcdfc57.js";import"./p-38a6e03f.js";import"./p-a805321e.js";import"./p-96687495.js";import"./p-815ddfb1.js";import"./p-b220b850.js";import"./p-a989744e.js";import"./p-429d3db0.js";import"./p-167f65f1.js";import"./p-b7c042b3.js";import"./p-7c926f90.js";import"./p-e991a11e.js";import"./p-b1c9647c.js";class I{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let M=class extends(L(S)){constructor(){super(...arguments),this._handles=new t,this._bitmapIndex=new Map,this._mapImageContainer=new _,this._kmlVisualData=new I,this.allVisiblePoints=new s,this.allVisiblePolylines=new s,this.allVisiblePolygons=new s,this.allVisibleMapImages=new i}hitTest(t,s){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const i=[this._pointsView.hitTest(t,s),this._polylinesView.hitTest(t,s),this._polygonsView.hitTest(t,s)];return Promise.all(i).then((t=>t.filter((t=>(t&&(t.layer=this.layer,t.sourceLayer=this.layer),!!t)))[0]||null))}update(t){this._polygonsView&&this._polygonsView.processUpdate(t),this._polylinesView&&this._polylinesView.processUpdate(t),this._pointsView&&this._pointsView.processUpdate(t)}attach(){this._handles.add([this.allVisibleMapImages.on("change",(t=>{t.added.forEach((t=>this._addMapImage(t))),t.removed.forEach((t=>this._removeMapImage(t)))}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new x({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new V(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new x({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new V(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new x({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new V(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(t=>{for(const[t,s]of this._kmlVisualData.allSublayers)s.visibility=0;for(const s of t){const t=this._kmlVisualData.allSublayers.get(s.id);t&&(t.visibility=1)}this._refreshCollections()})),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating")}))}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(t){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&e(t.href,{responseType:"image"}).then((({data:s})=>{let i=a.fromJSON(t.extent);o(i,this.view.spatialReference)&&(i=h(i,this.view.spatialReference));const e=new k(s,"standard");e.x=i.xmin,e.y=i.ymax,e.resolution=i.width/s.naturalWidth,e.rotation=t.rotation,this._mapImageContainer.addChild(e),this._bitmapIndex.set(t,e)}))}async _getViewDependentUrl(t,s){const{viewFormat:i,viewBoundScale:e,httpQuery:o}=t;if(r(i)){if(p(s))throw new Error("Loading this network link requires a view state.");let h;if(await n(),r(e)&&1!==e){const t=new a(s.extent);t.expand(e),h=t}else h=s.extent;h=m(h,c.WGS84);const j=m(h,c.WebMercator),w=h.xmin,u=h.xmax,v=h.ymin,g=h.ymax,y=s.size[0]*s.pixelRatio,k=s.size[1]*s.pixelRatio,_=Math.max(j.width,j.height),L={"[bboxWest]":w.toString(),"[bboxEast]":u.toString(),"[bboxSouth]":v.toString(),"[bboxNorth]":g.toString(),"[lookatLon]":h.center.x.toString(),"[lookatLat]":h.center.y.toString(),"[lookatRange]":_.toString(),"[lookatTilt]":"0","[lookatHeading]":s.rotation.toString(),"[lookatTerrainLon]":h.center.x.toString(),"[lookatTerrainLat]":h.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":h.center.x.toString(),"[cameraLat]":h.center.y.toString(),"[cameraAlt]":_.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":y.toString(),"[vertPixels]":k.toString(),"[terrainEnabled]":"0","[clientVersion]":l,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},S=t=>{for(const s in t)for(const i in L)t[s]=t[s].replace(i,L[i])},V=d(i);S(V);let x={};r(o)&&(x=d(o),S(x));const I=f(t.href);return I.query={...I.query,...V,...x},`${I.path}?${b(V)}`}return t.href}async _fetchService(){const t=new I;await this._loadVisualData(this.layer.url,t),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((t=>this._isSublayerVisible(t.sublayerId))).map((({item:t})=>t)))}_isSublayerVisible(t){const s=this._kmlVisualData.allSublayers.get(t);return!!s.visibility&&(-1===s.parentFolderId||this._isSublayerVisible(s.parentFolderId))}_loadVisualData(t,s){return this._fetchParsedKML(t).then((async t=>{for(const i of t.sublayers){s.allSublayers.set(i.id,i);const t=i.points?await v(i.points):[],e=i.polylines?await v(i.polylines):[],a=i.polygons?await v(i.polygons):[],o=i.mapImages||[];if(s.allPoints.push(...t.map((t=>({item:t,sublayerId:i.id})))),s.allPolylines.push(...e.map((t=>({item:t,sublayerId:i.id})))),s.allPolygons.push(...a.map((t=>({item:t,sublayerId:i.id})))),s.allMapImages.push(...o.map((t=>({item:t,sublayerId:i.id})))),i.networkLink){const t=await this._getViewDependentUrl(i.networkLink,this.view.state);await this._loadVisualData(t,s)}}}))}_fetchParsedKML(t){return g(t,this.view.spatialReference,this.layer.refreshInterval).then((t=>y(t.data)))}_removeMapImage(t){const s=this._bitmapIndex.get(t);s&&(this._mapImageContainer.removeChild(s),this._bitmapIndex.delete(t))}};j([w()],M.prototype,"_pointsView",void 0),j([w()],M.prototype,"_polylinesView",void 0),j([w()],M.prototype,"_polygonsView",void 0),j([w()],M.prototype,"_fetchingPromise",void 0),j([w()],M.prototype,"updating",void 0),M=j([u("esri.views.2d.layers.KMLLayerView2D")],M);const P=M;export default P;