import{bt as t}from"./p-e58503d5.js";import{B as n,H as e,t as i,j as r,u as s}from"./p-765e6c28.js";class o{constructor(){this.code=null,this.description=null}}class l{constructor(t){this.error=new o,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function u(t){return new l(t)}class a{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function c(t){return new a(t)}const f=new Set;function h(t,n,e,i=!1,o){f.clear();for(const l in e){const a=t.get(l);if(!a)continue;const c=e[l],h=p(a,c);if(h!==c&&o&&o.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:a,originalValue:c,sanitizedValue:h}}),f.add(a.name),a&&(i||a.editable)){const t=r(a,h);if(t)return u(s(t,a,h));n[a.name]=h}}for(const n of t.requiredFields)if(!f.has(n.name))return u(`missing required field "${n.name}"`);return null}function p(t,r){let s=r;return"string"==typeof r&&n(t)?s=parseFloat(r):null!=r&&e(t)&&"string"!=typeof r&&(s=String(r)),i(s)}let m;function y(n,e){if(!n||!t(e))return n;if("rings"in n||"paths"in n){if(!m)throw new TypeError("geometry engine not loaded");return m.simplify(e,n)}return n}async function d(n,e){!t(n)||"esriGeometryPolygon"!==e&&"esriGeometryPolyline"!==e||await async function(){return m||(m=await import("./p-ce933f99.js"),m)}()}export{c,h as d,y as h,u,d as y}