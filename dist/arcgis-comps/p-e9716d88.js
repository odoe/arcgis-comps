import{e,d as p,i,a7 as r}from"./p-7b6f6c18.js";import s from"./p-94a8a82f.js";import"./p-227a5838.js";import"./p-033339b0.js";import"./p-bdb8e9d6.js";import"./p-47e1bd73.js";import"./p-0b691897.js";import"./p-a4a5967b.js";import"./p-5c077b4e.js";import"./p-804725e3.js";import"./p-1dd7027e.js";import"./p-a16c2b1d.js";import"./p-df9635e1.js";import"./p-cede17c2.js";import"./p-ea65d9c9.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";import"./p-55e3d31e.js";import"./p-9f705d18.js";import"./p-ec834938.js";import"./p-dede18bd.js";import"./p-e991a11e.js";import"./p-6bccadb6.js";import"./p-03d6250d.js";import"./p-de5d9151.js";import"./p-06264f01.js";const t=s=>{let t=class extends s{initialize(){const{layer:e,view:p}=this;e.source.supportsSpatialReference(p.spatialReference)||this.addResolvingPromise(Promise.reject(new r("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:e})))}get availableFields(){return this.layer.fieldsIndex.fields.map((e=>e.name))}};return e([p()],t.prototype,"layer",void 0),e([p({readOnly:!0})],t.prototype,"availableFields",null),t=e([i("esri.views.layers.OGCFeatureLayerView")],t),t};let a=class extends(t(s)){};a=e([i("esri.views.2d.layers.OGCFeatureLayerView2D")],a);const o=a;export default o;