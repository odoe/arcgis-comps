import{v as t,H as s,N as e,aW as i,O as r,m as n,r as o,e as a,d as l,i as c}from"./p-9ae46e68.js";import{D as u,ai as h,P as f,an as p,ao as y,d as m}from"./p-566b0715.js";import{e as d}from"./p-4b3ae2cf.js";import{v as b,p as w}from"./p-bb07d873.js";import"./p-84bf99cb.js";import"./p-fe01b82b.js";import"./p-3a2e88bf.js";import"./p-8ac97b63.js";import"./p-a0a931f0.js";import"./p-dfc6337f.js";import"./p-77e6a663.js";import"./p-c5b7f7c3.js";var g;const j=t.getLogger("esri.renderers.DictionaryRenderer"),v={type:"CIMSimpleLineCallout",lineSymbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",width:.5,color:[0,0,0,255]}]}};let S=g=class extends(b(w)){constructor(t){super(t),this._ongoingRequests=new Map,this._symbolCache=new d(100),this.config=null,this.fieldMap=null,this.scaleExpression=null,this.scaleExpressionTitle=null,this.url=null,this.type="dictionary"}writeData(t,s){t&&(s.scalingExpressionInfo={expression:t,returnType:"number"})}writeVisualVariables(t,s,e,i){null!=i&&i.origin||super.writeVisualVariables(t,s,e,i)}clone(){return new g({config:s(this.config),scaleExpression:this.scaleExpression,scaleExpressionTitle:this.scaleExpressionTitle,fieldMap:s(this.fieldMap),url:s(this.url),visualVariables:s(this.visualVariables)})}async getSymbolAsync(t,s){let r;this._dictionaryPromise||(this._dictionaryPromise=this.fetchResources(s));try{r=await this._dictionaryPromise}catch(t){if(e(t))return this._dictionaryPromise=null,null}const n={};if(this.fieldMap)for(const s of this._symbolFields){const e=this.fieldMap[s];n[s]=e&&null!=t.attributes[e]?""+t.attributes[e]:""}const a=r(n,s);if(!a||"string"!=typeof a)return null;const l=i(a).toString(),c=this._symbolCache.get(l);if(c)return c.catch((()=>{this._symbolCache.pop(l)})),c;const h=a.split(";"),f=[],p=[];for(const t of h)if(t&&0!==t.length)if(-1===t.indexOf("po:"))if(-1!==t.indexOf("|")){for(const s of t.split("|"))if(this._itemNames.has(s)){f.push(s);break}}else this._itemNames.has(t)&&f.push(t);else{const s=t.substr(3).split("|");if(3===s.length){const t=s[0],e=s[1];let i=s[2];if("DashTemplate"===e)i=i.split(" ").map((t=>Number(t)));else if("Color"===e){const t=new u(i).toRgba();i=[t[0],t[1],t[2],255*t[3]]}else i=Number(i);p.push({primitiveName:t,propertyName:e,value:i})}}const y=!o(t.geometry)||!t.geometry.hasZ&&"point"===t.geometry.type,m=this._cimPartsToCIMSymbol(f,p,y,s);return this._symbolCache.put(l,m,1),m}async collectRequiredFields(t,s){await this.collectVVRequiredFields(t,s),this.scaleExpression&&await h(t,s,this.scaleExpression);for(const e in this.fieldMap){const i=this.fieldMap[e];s.has(i)&&t.add(i)}}get arcadeRequired(){return!0}async fetchResources(t){if(this._dictionaryPromise)return this._dictionaryPromise;if(!this.url)return void j.error("no valid URL!");const s=o(t)?t.abortOptions:null,e=r(this.url+"/resources/styles/dictionary-info.json",{responseType:"json",query:{f:"json"},...s}),[{data:i}]=await Promise.all([e,f()]);if(!i)throw this._dictionaryPromise=null,new n("esri.renderers.DictionaryRenderer","Bad dictionary data!");const a=i.expression,l=i.authoringInfo;this._refSymbolUrlTemplate=this.url+"/"+i.cimRefTemplateUrl,this._itemNames=new Set(i.itemsNames),this._symbolFields=l.symbol;const c={};if(this.config){const t=this.config;for(const s in t)c[s]=t[s]}if(l.configuration)for(const t of l.configuration)c.hasOwnProperty(t.name)||(c[t.name]=t.value);const u=[];if(o(t)&&t.fields&&this.fieldMap)for(const s of this._symbolFields){const e=this.fieldMap[s],i=t.fields.filter((t=>t.name===e));i.length>0&&u.push({...i[0],name:s})}return this._dictionaryPromise=p(a,o(t)?t.spatialReference:null,u,c).then((t=>{const s={scale:0};return(e,i)=>{const r=t.repurposeFeature({geometry:null,attributes:e});return s.scale=o(i)?i.scale:void 0,t.evaluate({$feature:r,$view:s})}})).catch((t=>(j.error("Creating dictinoary expression failed:",t),null))),this._dictionaryPromise}getSymbol(){return null}getSymbols(){return[]}getAttributeHash(){return this.visualVariables&&this.visualVariables.reduce(((t,s)=>t+s.getAttributeHash()),"")}getMeshHash(){return`${this.url}-${JSON.stringify(this.fieldMap)}`}getSymbolFields(){return this._symbolFields}async _getSymbolPart(t,s){if(this._ongoingRequests.has(t))return this._ongoingRequests.get(t).then((t=>t.data));const e=this._refSymbolUrlTemplate.replace(/\{itemName\}/gi,t),i=r(e,{responseType:"json",query:{f:"json"},...s});this._ongoingRequests.set(t,i);try{return(await i).data}catch(s){return this._ongoingRequests.delete(t),Promise.reject(s)}}_combineSymbolParts(t,s,e){if(!t||0===t.length)return null;const i={...t[0]};if(t.length>1){i.symbolLayers=[];for(const s of t)i.symbolLayers.unshift(...s.symbolLayers)}return e&&(i.callout=v),{type:"CIMSymbolReference",symbol:i,primitiveOverrides:s}}async _cimPartsToCIMSymbol(t,s,e,i){const r=new Array(t.length);for(let s=0;s<t.length;s++)r[s]=this._getSymbolPart(t[s],i);const n=await Promise.all(r);return new y({data:this._combineSymbolParts(n,s,e)})}};a([l({type:Object,json:{read:{source:"configuration"},write:{target:"configuration"}}})],S.prototype,"config",void 0),a([l({type:Object,json:{write:!0}})],S.prototype,"fieldMap",void 0),a([l({type:String,json:{read:{source:"scalingExpressionInfo.expression"},write:!0}})],S.prototype,"scaleExpression",void 0),a([m("scaleExpression")],S.prototype,"writeData",null),a([l({type:String,json:{read:{source:"scalingExpressionInfo.title"},write:{target:"scalingExpressionInfo.title",overridePolicy(t){return{enabled:!!t&&!!this.scaleExpression}}}}})],S.prototype,"scaleExpressionTitle",void 0),a([l({type:String,json:{write:!0}})],S.prototype,"url",void 0),a([m("visualVariables")],S.prototype,"writeVisualVariables",null),S=g=a([c("esri.renderers.DictionaryRenderer")],S);const x=S;export default x;