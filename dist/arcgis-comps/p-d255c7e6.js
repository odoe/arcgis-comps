import{e,d as p,i,a7 as r}from"./p-c8bc3433.js";import s from"./p-3bb7f837.js";import"./p-84bf99cb.js";import"./p-feee221d.js";import"./p-bdb8e9d6.js";import"./p-47e1bd73.js";import"./p-c4678b0b.js";import"./p-8fd94488.js";import"./p-7c926f90.js";import"./p-a6945989.js";import"./p-30eee135.js";import"./p-be58da65.js";import"./p-c167c2b1.js";import"./p-b0a11892.js";import"./p-ea65d9c9.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";import"./p-167f65f1.js";import"./p-a989744e.js";import"./p-429d3db0.js";import"./p-b7c042b3.js";import"./p-e991a11e.js";import"./p-edc70151.js";import"./p-03d6250d.js";import"./p-d6d28c7b.js";import"./p-472ecb7f.js";const t=s=>{let t=class extends s{initialize(){const{layer:e,view:p}=this;e.source.supportsSpatialReference(p.spatialReference)||this.addResolvingPromise(Promise.reject(new r("layerview:spatial-reference-incompatible","The spatial references supported by this OGC layer are incompatible with the spatial reference of the view",{layer:e})))}get availableFields(){return this.layer.fieldsIndex.fields.map((e=>e.name))}};return e([p()],t.prototype,"layer",void 0),e([p({readOnly:!0})],t.prototype,"availableFields",null),t=e([i("esri.views.layers.OGCFeatureLayerView")],t),t};let a=class extends(t(s)){};a=e([i("esri.views.2d.layers.OGCFeatureLayerView2D")],a);const o=a;export default o;