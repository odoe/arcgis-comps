import{c as i,e,d as s,i as n}from"./p-e58503d5.js";import{WhereClause as r}from"./p-61f47d2b.js";import{s as t}from"./p-85e8677e.js";const o=i.getLogger("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView"),l=i=>{let l=class extends i{constructor(){super(...arguments),this._definitionExpressionErrors=0,this._maxDefinitionExpressionErrors=20,this.logError=i=>{this._definitionExpressionErrors<this._maxDefinitionExpressionErrors&&o.error("Error while evaluating definitionExpression: "+i),this._definitionExpressionErrors++,this._definitionExpressionErrors===this._maxDefinitionExpressionErrors&&o.error("Further errors are ignored")}}get parsedDefinitionExpression(){if(!this.i3slayer||!this.i3slayer.definitionExpression)return null;try{const i=r.create(this.i3slayer.definitionExpression,this.i3slayer.fieldsIndex);if(!i.isStandardized)return o.error("definitionExpression is using non standard function"),null;const e=[];return t(i.fieldNames,this.i3slayer.fields,{missingFields:e}),e.length>0?(o.error(`definitionExpression references unknown fields: ${e.join(", ")}`),null):(this._definitionExpressionErrors=0,i)}catch(i){return o.error("Failed to parse definitionExpression: "+i),null}}get definitionExpressionFields(){return this.parsedDefinitionExpression?this.parsedDefinitionExpression.fieldNames:null}_evaluateClause(i,e){try{return i.testFeature(e)}catch(i){return this.logError(i),!1}}_addDefinitionExpressionToQuery(i){if(!this.parsedDefinitionExpression)return i;const e=this.i3slayer.definitionExpression,s=i.clone();return s.where=s.where?`(${e}) AND (${s.where})`:e,s}};return e([s()],l.prototype,"i3slayer",void 0),e([s({readOnly:!0})],l.prototype,"parsedDefinitionExpression",null),e([s({readOnly:!0})],l.prototype,"definitionExpressionFields",null),l=e([n("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView")],l),l};export{l as p}