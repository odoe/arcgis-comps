import{iw as e,iz as t,cQ as s,cR as i,iy as r,bE as o,cX as l,fn as a,cT as n,E as u,j5 as y,bu as d,e as h,d as c,bH as p,o as v,iD as S,j6 as m,cW as b,i as g,fI as f,bx as C,bw as j,b0 as x,b1 as w,r as G}from"./p-5420851c.js";import"./p-53bb6ab4.js";const P=["atom","xml"],k={base:f,key:"type",typeMap:{"simple-line":C},errorContext:"symbol"},F={base:f,key:"type",typeMap:{"picture-marker":j,"simple-marker":x},errorContext:"symbol"},R={base:f,key:"type",typeMap:{"simple-fill":w},errorContext:"symbol"};let M=class extends(e(t(s(i(r(o(l))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const s=e.layerDefinition.drawingInfo.renderer.symbol;s&&"esriSFS"===s.type&&null!=(t=s.outline)&&t.style.includes("esriSFS")&&(s.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?a(this.url,P)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=G(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const s=this.spatialReference,{data:i}=await u(d.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:y(s)?void 0:null!=(t=s.wkid)?t:JSON.stringify(s)},signal:e});return i}_hasGeometry(e){var t,s;return null!=(t=null==(s=this.featureCollections)?void 0:s.some((t=>{var s,i;return(null==(s=t.featureSet)?void 0:s.geometryType)===e&&(null==(i=t.featureSet.features)?void 0:i.length)>0})))&&t}};h([c()],M.prototype,"description",void 0),h([c()],M.prototype,"featureCollections",void 0),h([p("service","featureCollections",["featureCollection.layers"])],M.prototype,"readFeatureCollections",null),h([c({type:v,json:{name:"lookAtExtent"}})],M.prototype,"fullExtent",void 0),h([c(S)],M.prototype,"id",void 0),h([c(m)],M.prototype,"legendEnabled",void 0),h([c({types:k,json:{write:!0}})],M.prototype,"lineSymbol",void 0),h([c({type:["show","hide"]})],M.prototype,"listMode",void 0),h([c({types:F,json:{write:!0}})],M.prototype,"pointSymbol",void 0),h([c({types:R,json:{write:!0}})],M.prototype,"polygonSymbol",void 0),h([c({type:["GeoRSS"]})],M.prototype,"operationalLayerType",void 0),h([c(b)],M.prototype,"url",void 0),h([c({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],M.prototype,"title",null),h([c({readOnly:!0,json:{read:!1},value:"geo-rss"})],M.prototype,"type",void 0),M=h([g("esri.layers.GeoRSSLayer")],M);const E=M;export default E;