import { u as u$1, k as S, E, A as r, g as t$1, bs as a, bS as b, bU as C$1, e as e$1, a as d$1, i as i$1 } from './jsxFactory-b8b7429b.js';
import { M as M$1, at as g, au as M$2, z as k } from './Graphic-75d1efd2.js';
import { J, O } from './projection-6b3ce748.js';
import { b as b$1, g as g$2, d } from './kmlUtils-055206fa.js';
import { e } from './utils-5cb95ff2.js';
import { c } from './GraphicsCollection-94ceaf9a.js';
import { g as g$1 } from './Bitmap-9df1c5b8.js';
import { t } from './BitmapContainer-8d809e79.js';
import { l, u } from './LayerView-4c0164d7.js';
import { i } from './GraphicContainer-f0235184.js';
import { r as rt } from './BaseGraphicContainer-1c376840.js';
import './index-921bd636.js';
import './JSONSupport-15eefdaf.js';
import './mat4-7dc89e3f.js';
import './jsonUtils-5413cd65.js';
import './UniqueValueRenderer-c001e8b8.js';
import './VisualVariablesMixin-a733e60f.js';
import './colorRamps-564a1b52.js';
import './ColorStop-6bbf8625.js';
import './sizeVariableUtils-4d3662df.js';
import './visualVariableUtils-d30b1042.js';
import './compilerUtils-fd4d1928.js';
import './lengthUtils-c1fc84e6.js';
import './diffUtils-7afe88f2.js';
import './jsonUtils-904bd6e1.js';
import './styleUtils-2aef643e.js';
import './DictionaryRenderer-5a73e1dd.js';
import './LRUCache-4697cf73.js';
import './MemCache-ba22e87a.js';
import './FeatureSet-ac01aefd.js';
import './Field-3662c57d.js';
import './fieldType-1c6ed2e9.js';
import './HandleOwner-89177892.js';
import './reactiveUtils-37eae8e4.js';
import './mat3-9ad554b9.js';
import './MapView-99a05548.js';
import './CollectionFlattener-011440e6.js';
import './workers-abd4af5a.js';
import './executeQueryJSON-c8bf8101.js';
import './query-99f5f334.js';
import './normalizeUtils-097054a0.js';
import './pbfQueryUtils-fe0206b7.js';
import './pbf-ac00f72c.js';
import './OptimizedFeature-ac6d77d3.js';
import './OptimizedFeatureSet-27736f1f.js';
import './queryZScale-ca210e89.js';
import './zscale-aa683312.js';
import './Query-d6a1dd36.js';
import './TimeExtent-11f1925b.js';
import './TopFeaturesQuery-cb0fdf83.js';
import './Heading-d3c07d3f.js';
import './utils-64bd22f7.js';
import './asyncUtils-4aacff64.js';
import './ItemCache-4c9e4246.js';
import './utils-f8425723.js';
import './widget-fd14b780.js';
import './vmEvent-bdc3bebc.js';
import './QueryTask-56cd56c4.js';
import './featureConversionUtils-3b0788c3.js';
import './Task-04425ab7.js';
import './FeatureLayer-f6c171eb.js';
import './MultiOriginJSONSupport-409caa57.js';
import './HeightModelInfo-6673666d.js';
import './APIKeyMixin-e6f88474.js';
import './ArcGISService-78aba528.js';
import './arcgisLayerUrl-f16875e5.js';
import './BlendLayer-8a19cb4c.js';
import './jsonUtils-9b8c4071.js';
import './_commonjsHelpers-020ca939.js';
import './CustomParametersMixin-65dc0d22.js';
import './labelingInfo-7446840d.js';
import './commonProperties-c39cb6e7.js';
import './LabelClass-37380caa.js';
import './labelUtils-27593fd8.js';
import './defaultsJSON-53258912.js';
import './OperationalLayer-7b6946f0.js';
import './OrderedLayer-d05dde4e.js';
import './PortalLayer-c699b91c.js';
import './PortalItem-86be48d7.js';
import './RefreshableLayer-eff019c1.js';
import './ScaleRangeLayer-fd3df739.js';
import './TemporalLayer-1525e917.js';
import './TimeInfo-1e2583f2.js';
import './FeatureType-f5fde895.js';
import './fieldProperties-666e1160.js';
import './FieldsIndex-b4d96270.js';
import './LayerFloorInfo-35df5ab8.js';
import './styleUtils-ccdf1dd0.js';
import './popupUtils-62f80c9e.js';
import './TileStore-0849dbc4.js';
import './TileKey-ca920992.js';
import './quickselect-ccfd8cff.js';
import './GoTo-3a7bfc1d.js';
import './mathUtils-ed056359.js';
import './TileInfo-a600dd32.js';
import './Basemap-c5f20d06.js';
import './loadAll-78f2a3b0.js';
import './writeUtils-840b5f7a.js';
import './TablesMixin-4e7e4fb2.js';
import './Scheduler-f38cd3ae.js';
import './unitBezier-0f2e6a45.js';
import './mat2d-c0cd43b0.js';
import './vec2-81a18cb4.js';
import './vec2f64-503345b4.js';
import './vec2f32-7c7b1123.js';
import './TileStrategy-34d0ce47.js';
import './screenshotUtils-61ccf49a.js';
import './capabilities-828d86c4.js';
import './Container-86ac9c83.js';
import './EffectList-ad3aebe3.js';
import './Texture-95288d63.js';
import './WGLContainer-55b93482.js';
import './definitions-a1bd4630.js';
import './VertexArrayObject-2da47f5b.js';
import './Utils-0cbcb18a.js';
import './number-888f4898.js';
import './ShaderCompiler-f4762cde.js';
import './config-768959de.js';
import './GeometryUtils-09c2f88c.js';
import './MaterialKey-35547bf1.js';
import './pixelUtils-b6fb0f03.js';
import './earcut-05cd758b.js';
import './CIMSymbolHelper-e9c59cd4.js';
import './Rect-988189d5.js';
import './GeometryUtils-93aa6536.js';
import './projectionSupport-c9da56ef.js';
import './json-cfa039ad.js';
import './FeatureContainer-3a57e567.js';
import './TileContainer-334f67bb.js';
import './visualVariablesUtils-5fb2593d.js';
import './visualVariablesUtils-f8563608.js';
import './Matcher-3b50fe03.js';
import './ComputedAttributeStorage-41f5746f.js';
import './FeatureSetReader-cba66de5.js';
import './centroid-42fbbfc8.js';
import './tileUtils-ec58e13c.js';
import './TileClipper-7a0f3fdb.js';
import './cimAnalyzer-1f61ef7a.js';
import './quantizationUtils-5cc7bb8b.js';
import './cimSymbolUtils-a42f9fe7.js';
import './devEnvironmentUtils-3628b10d.js';
import './schemaUtils-6fd3558d.js';
import './MD5-6027098a.js';
import './vec3f32-f2e27abe.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
class C{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[];}}let j=class extends(l(u)){constructor(){super(...arguments),this._handles=new u$1,this._bitmapIndex=new Map,this._mapImageContainer=new t,this._kmlVisualData=new C,this.allVisiblePoints=new c,this.allVisiblePolylines=new c,this.allVisiblePolygons=new c,this.allVisibleMapImages=new S;}hitTest(e,i){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const t=[this._pointsView.hitTest(e,i),this._polylinesView.hitTest(e,i),this._polygonsView.hitTest(e,i)];return Promise.all(t).then((e=>e.filter((e=>(e&&(e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e);}attach(){this._handles.add([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)));}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new rt({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new i(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new rt({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new i(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new rt({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new i(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(e=>{for(const[i,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const i of e){const e=this._kmlVisualData.allSublayers.get(i.id);e&&(e.visibility=1);}this._refreshCollections();})),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating");}));}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null);}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange();}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&E(e.href,{responseType:"image"}).then((({data:i})=>{let t=M$1.fromJSON(e.extent);g(t,this.view.spatialReference)&&(t=M$2(t,this.view.spatialReference));const s=new g$1(i,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s);}));}async _getViewDependentUrl(e$1,t){const{viewFormat:s,viewBoundScale:a$1,httpQuery:h}=e$1;if(r(s)){if(t$1(t))throw new Error("Loading this network link requires a view state.");let p;if(await J(),r(a$1)&&1!==a$1){const e=new M$1(t.extent);e.expand(a$1),p=e;}else p=t.extent;p=O(p,k.WGS84);const w=O(p,k.WebMercator),g=p.xmin,u=p.xmax,_=p.ymin,V=p.ymax,f=t.size[0]*t.pixelRatio,v=t.size[1]*t.pixelRatio,S=Math.max(w.width,w.height),I={"[bboxWest]":g.toString(),"[bboxEast]":u.toString(),"[bboxSouth]":_.toString(),"[bboxNorth]":V.toString(),"[lookatLon]":p.center.x.toString(),"[lookatLat]":p.center.y.toString(),"[lookatRange]":S.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":p.center.x.toString(),"[lookatTerrainLat]":p.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":p.center.x.toString(),"[cameraLat]":p.center.y.toString(),"[cameraAlt]":S.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":f.toString(),"[vertPixels]":v.toString(),"[terrainEnabled]":"0","[clientVersion]":a,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},P=e=>{for(const i in e)for(const t in I)e[i]=e[i].replace(t,I[t]);},x=b(s);P(x);let k$1={};r(h)&&(k$1=b(h),P(k$1));const C=e(e$1.href);C.query={...C.query,...x,...k$1};return `${C.path}?${C$1(x)}`}return e$1.href}async _fetchService(){const e=new C;await this._loadVisualData(this.layer.url,e),this._kmlVisualData=e,this._refreshCollections();}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e)));}_isSublayerVisible(e){const i=this._kmlVisualData.allSublayers.get(e);return !!i.visibility&&(-1===i.parentFolderId||this._isSublayerVisible(i.parentFolderId))}_loadVisualData(e,i){return this._fetchParsedKML(e).then((async e=>{for(const t of e.sublayers){i.allSublayers.set(t.id,t);const e=t.points?await b$1(t.points):[],s=t.polylines?await b$1(t.polylines):[],a=t.polygons?await b$1(t.polygons):[],o=t.mapImages||[];if(i.allPoints.push(...e.map((e=>({item:e,sublayerId:t.id})))),i.allPolylines.push(...s.map((e=>({item:e,sublayerId:t.id})))),i.allPolygons.push(...a.map((e=>({item:e,sublayerId:t.id})))),i.allMapImages.push(...o.map((e=>({item:e,sublayerId:t.id})))),t.networkLink){const e=await this._getViewDependentUrl(t.networkLink,this.view.state);await this._loadVisualData(e,i);}}}))}_fetchParsedKML(e){return g$2(e,this.view.spatialReference,this.layer.refreshInterval).then((e=>d(e.data)))}_removeMapImage(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e));}};e$1([d$1()],j.prototype,"_pointsView",void 0),e$1([d$1()],j.prototype,"_polylinesView",void 0),e$1([d$1()],j.prototype,"_polygonsView",void 0),e$1([d$1()],j.prototype,"_fetchingPromise",void 0),e$1([d$1()],j.prototype,"updating",void 0),j=e$1([i$1("esri.views.2d.layers.KMLLayerView2D")],j);const M=j;

export default M;
