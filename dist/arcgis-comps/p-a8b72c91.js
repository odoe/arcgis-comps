import{v as e,c4 as t,I as i,r as s,ae as r,_ as o,ca as a,m as n,aa as l,O as h,c7 as p,e as c,d,i as u}from"./p-9ae46e68.js";import{l as m,b as f}from"./p-8e6daf54.js";import{o as v}from"./p-566b0715.js";import{v as y}from"./p-c0757461.js";import{s as j}from"./p-821d62e2.js";import{p as w}from"./p-d3898fd7.js";import{y as b}from"./p-cf8dc9be.js";import{w as g}from"./p-5c89c68e.js";import{f as S}from"./p-f271906a.js";import{u as T}from"./p-4681e856.js";import"./p-84bf99cb.js";import"./p-fe01b82b.js";import"./p-abcf0bfd.js";import"./p-523f37cd.js";import"./p-81e5b36e.js";import"./p-6ebb24ba.js";import"./p-4fd6e394.js";import"./p-4b3ae2cf.js";import"./p-3a2e88bf.js";import"./p-844dad6c.js";import"./p-57ae469d.js";import"./p-725fd184.js";import"./p-79553c8d.js";import"./p-c5b7f7c3.js";const x=e.getLogger("esri.core.workers.WorkerHandle");class I extends class{constructor(e,t,i,s={}){this._mainMethod=t,this._listeners=[],this._promise=T(e,{...s,schedule:i}).then((e=>{if(void 0===this._thread){this._thread=e,this._promise=null,s.hasInitialize&&this.broadcast({},"initialize");for(const e of this._listeners)this._connectListener(e)}else e.close()})),this._promise.catch((t=>x.error(`Failed to initialize ${e} worker: ${t}`)))}on(e,r){const o={removed:!1,eventName:e,callback:r,threadHandle:null};return this._listeners.push(o),this._connectListener(o),t((()=>{o.removed=!0,i(this._listeners,o),this._thread&&s(o.threadHandle)&&o.threadHandle.remove()}))}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,i){if(this._thread){const s=this.getTransferList(t,e);return this._thread.invoke(e,t,{transferList:s,signal:i})}return this._promise?this._promise.then((()=>(r(i),this.invokeMethod(e,t,i)))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then((()=>{})):this._promise?this._promise.then((()=>this.broadcast(e,t))):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then((t=>{e.removed||(e.threadHandle=t)}))}}{constructor(e=null){super("LercWorker","_decode",e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,i){return e&&0!==e.byteLength?this.invoke({buffer:e,options:t},i):Promise.resolve(null)}getTransferList(e){return[e.buffer]}release(){--this.ref<=0&&($.forEach(((e,t)=>{e===this&&$.delete(t)})),this.destroy())}}const $=new Map;function E(e=null){let t=$.get(o(e));return t||(s(e)?(t=new I((t=>e.schedule(t))),$.set(e,t)):(t=new I,$.set(null,t))),++t.ref,t}const L=e.getLogger("esri.layers.ElevationLayer");let k=class extends(j(w(b(g(m(f)))))){constructor(...e){super(...e),this.copyright=null,this.heightModelInfo=null,this.path=null,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=E()}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}destroy(){this._lercDecoder=a(this._lercDecoder)}set minScale(e){this.constructed&&L.warn(`${this.declaredClass}.minScale support has been removed (since 4.5)`)}get minScale(){}set maxScale(e){this.constructed&&L.warn(`${this.declaredClass}.maxScale support has been removed (since 4.5)`)}get maxScale(){}readVersion(e,t){let i=t.currentVersion;return i||(i=9.3),i}load(e){const t=s(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{for(let t=0;t<e.typeKeywords.length;t++)if("elevation 3d layer"===e.typeKeywords[t].toLowerCase())return!0;throw new n("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch(l).then((()=>this._fetchImageService(t)))),Promise.resolve(this)}fetchTile(e,t,i,r){const o=s((r=r||{signal:null}).signal)?r.signal:r.signal=(new AbortController).signal,a={responseType:"array-buffer",signal:o},n={noDataValue:r.noDataValue,returnFileInfo:!0};return this.load().then((()=>this._fetchTileAvailability(e,t,i,r))).then((()=>h(this.getTileUrl(e,t,i),a))).then((e=>this._lercDecoder.decode(e.data,n,o))).then((e=>({values:e.pixelData,width:e.width,height:e.height,maxZError:e.fileInfo.maxZError,noDataValue:e.noDataValue,minValue:e.minValue,maxValue:e.maxValue})))}getTileUrl(e,t,i){const s=p({...this.parsedUrl.query,blankTile:!(!this.tilemapCache&&this.supportsBlankTile)&&null});return`${this.parsedUrl.path}/tile/${e}/${t}/${i}${s?"?"+s:""}`}async queryElevation(e,t){const{ElevationQuery:i}=await import("./p-f2cde0db.js");return r(t),(new i).query(this,e,t)}async createElevationSampler(e,t){const{ElevationQuery:i}=await import("./p-f2cde0db.js");return r(t),(new i).createSampler(this,e,t)}_fetchTileAvailability(e,t,i,s){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,t,i,s):Promise.resolve("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const t={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},i=await h(this.parsedUrl.path,t);i.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i.data,this.read(i.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};c([d({json:{read:{source:"copyrightText"}}})],k.prototype,"copyright",void 0),c([d({readOnly:!0,type:y})],k.prototype,"heightModelInfo",void 0),c([d({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],k.prototype,"path",void 0),c([d({type:["show","hide"]})],k.prototype,"listMode",void 0),c([d({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],k.prototype,"minScale",null),c([d({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}}})],k.prototype,"maxScale",null),c([d({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],k.prototype,"opacity",void 0),c([d({type:["ArcGISTiledElevationServiceLayer"]})],k.prototype,"operationalLayerType",void 0),c([d()],k.prototype,"sourceJSON",void 0),c([d({json:{read:!1},value:"elevation",readOnly:!0})],k.prototype,"type",void 0),c([d(S)],k.prototype,"url",void 0),c([d()],k.prototype,"version",void 0),c([v("version",["currentVersion"])],k.prototype,"readVersion",null),k=c([u("esri.layers.ElevationLayer")],k),k.prototype.fetchTile.__isDefault__=!0;const V=k;export default V;