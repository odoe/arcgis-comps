import{P as t,hu as i,hN as s,hO as e,a as h,e as r,d as p,i as a}from"./p-5420851c.js";import{r as n}from"./p-c6864032.js";import{l,u as o}from"./p-e4db8bd2.js";import{i as u}from"./p-8dd46af5.js";import"./p-53bb6ab4.js";import"./p-580a17e2.js";import"./p-b3b13eb5.js";import"./p-e2fe661c.js";import"./p-4c6040da.js";import"./p-4d140ee3.js";import"./p-27418da2.js";import"./p-54db165f.js";import"./p-81f41410.js";import"./p-47e1bd73.js";import"./p-def8d692.js";import"./p-4b2b4a33.js";import"./p-b392deaf.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-13d3a443.js";import"./p-8d730a3d.js";import"./p-97ec6ae5.js";const d=[102113,102100,3857,3785,900913];let c=class extends(u(n(l(o)))){constructor(){super(...arguments),this._handles=new t,this._tileStrategy=null,this._fetchQueue=null,this._tileRequests=new Map,this.layer=null}get tileMatrixSet(){if(this.layer.activeLayer.tileMatrixSetId)return this.layer.activeLayer.tileMatrixSet;const t=this._getTileMatrixSetBySpatialReference(this.layer.activeLayer);return t?(this.layer.activeLayer.tileMatrixSetId=t.id,t):null}hitTest(){return null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),this.notifyChange("updating")}attach(){if(!this.tileMatrixSet)return;const{tileInfo:t}=this.tileMatrixSet;this._tileInfoView=new i(t),this._fetchQueue=new s({tileInfoView:this._tileInfoView,process:t=>this.fetchTile(t)}),this._tileStrategy=new e({cachePolicy:"keep",acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this._handles.add(this.watch(["layer.activeLayer.styleId","tileMatrixSet"],(()=>this._refresh()))),super.attach()}detach(){super.detach(),this._handles.removeAll(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}async doRefresh(){this.updateRequested||this.suspended||this._refresh()}isUpdating(){return this._fetchQueue.length>0}acquireTile(t){const i=this._bitmapView.createTile(t),s=i.bitmap;[s.x,s.y]=this._tileInfoView.getTileCoords([0,0],i.key),s.resolution=this._tileInfoView.getTileResolution(i.key),[s.width,s.height]=this._tileInfoView.tileInfo.size,this._tileInfoView.getTileCoords(s,i.key);const e={id:t.id,fulfilled:!1,promise:this._fetchQueue.push(i.key).then((t=>{i.bitmap.source=t,i.once("attach",(()=>this.requestUpdate())),this._bitmapView.addChild(i)})).catch((t=>{h(t)||(i.bitmap.source=null,i.once("attach",(()=>this.requestUpdate())),this._bitmapView.addChild(i))}))};return e.promise.finally((()=>e.fulfilled=!0)),this._tileRequests.set(i,e),this.requestUpdate(),i}releaseTile(t){const i=this._tileRequests.get(t);i.fulfilled||this._fetchQueue.abort(i.id),this._tileRequests.delete(t),this._bitmapView.removeChild(t),t.once("detach",(()=>t.destroy())),this.requestUpdate()}async fetchTile(t){return this.layer.fetchTile(t.level,t.row,t.col)}canResume(){const t=super.canResume();return t?null!==this.tileMatrixSet:t}_refresh(){this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((t=>{if(!t.bitmap.source)return;const i={id:t.key.id,fulfilled:!1,promise:this._fetchQueue.push(t.key).then((i=>{t.bitmap.source=i})).catch((i=>{h(i)||(t.bitmap.source=null)})).finally((()=>{t.requestRender(),this.notifyChange("updating"),i.fulfilled=!0}))};this._tileRequests.set(t,i)})),this.notifyChange("updating")}_getTileMatrixSetBySpatialReference(t){const i=this.view.spatialReference;if(!t.tileMatrixSets)return null;let s=t.tileMatrixSets.find((t=>t.tileInfo.spatialReference.wkid===i.wkid));return!s&&i.isWebMercator&&(s=t.tileMatrixSets.find((t=>d.indexOf(t.tileInfo.spatialReference.wkid)>-1))),s}};r([p()],c.prototype,"suspended",void 0),r([p({readOnly:!0})],c.prototype,"tileMatrixSet",null),c=r([a("esri.views.2d.layers.WMTSLayerView2D")],c);const m=c;export default m;