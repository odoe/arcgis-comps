import{x as n}from"./p-97ec6ae5.js";import{f as t}from"./p-b79fcce3.js";import{n as o}from"./p-382f7028.js";function r(t){const r=e(t.rings,t.hasZ,1),c=[];let i=0,s=0;for(const t of r.polygons){const o=t.index,e=new Float64Array(r.position.buffer,3*o*r.position.BYTES_PER_ELEMENT,3*t.count),f=t.holeIndices.map((n=>n-o)),l=new Uint32Array(n(e,f,3));c.push({position:e,faces:l}),i+=e.length,s+=l.length}const f=function(n,t,o){if(1===n.length)return n[0];const r=new Float64Array(t),e=new Uint32Array(o);let c=0,i=0,s=0;for(const t of n){for(let n=0;n<t.position.length;n++)r[c++]=t.position[n];for(let n=0;n<t.faces.length;n++)e[i++]=t.faces[n]+s;s=c/3}return{position:r,faces:e}}(c,i,s),l=o(f.position.buffer,6,{originalIndices:f.faces});return f.position=new Float64Array(l.buffer),f.faces=l.indices,f}function e(n,t,o){const r=n.length,e=new Array(r),s=new Array(r),f=new Array(r);let l=0,a=0,u=0,p=0;for(let t=0;t<r;++t)p+=n[t].length;const y=new Float64Array(3*p);let w=0;for(let p=r-1;p>=0;p--){const A=n[p],d=1===o&&i(A);if(d&&1!==r)e[l++]=A;else{let n=A.length;for(let t=0;t<l;++t)n+=e[t].length;const o={index:w,pathLengths:new Array(l+1),count:n,holeIndices:new Array(l)};o.pathLengths[0]=A.length,A.length>0&&(f[u++]={index:w,count:A.length}),w=d?c(A,A.length-1,-1,y,w,A.length,t):c(A,0,1,y,w,A.length,t);for(let n=0;n<l;++n){const r=e[n];o.holeIndices[n]=w,o.pathLengths[n+1]=r.length,r.length>0&&(f[u++]={index:w,count:r.length}),w=c(r,0,1,y,w,r.length,t)}l=0,o.count>0&&(s[a++]=o)}}for(let n=0;n<l;++n){const o=e[n];o.length>0&&(f[u++]={index:w,count:o.length}),w=c(o,0,1,y,w,o.length,t)}return a<r&&(s.length=a),u<r&&(f.length=u),{position:y,polygons:s,outlines:f}}function c(n,t,o,r,e,c,i){e*=3;for(let s=0;s<c;++s){const c=n[t];r[e++]=c[0],r[e++]=c[1],r[e++]=i?c[2]:0,t+=o}return e/3}function i(n){return!t(n,!1,!1)}export{e as l,r as o}