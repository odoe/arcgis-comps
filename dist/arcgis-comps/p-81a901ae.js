import{e,d as t,i as s,bj as i,T as r,cP as n,cQ as a,cR as o,iy as l,bE as d,iA as p,cX as u,r as h,f2 as y,j9 as c,cT as f,db as g,g$ as m,iI as v,t as b,b as w,fo as I,E as j,a as S,jQ as F,jR as T,jS as E,iJ as L,bH as O,iZ as P,jc as D,iK as A,jd as R,j6 as x,jT as N,iM as q,iE as k,bA as Q,jf as U,iT as _,iH as C}from"./p-5420851c.js";import{N as G}from"./p-65a8a7f6.js";import{l as V,s as M}from"./p-bed0eb19.js";import{s as $,l as K,u as W,m as Z}from"./p-5facf67c.js";import"./p-53bb6ab4.js";import"./p-207b5a2e.js";import"./p-f5b7843f.js";let z=class extends i{constructor(){super(...arguments),this.name=null,this.field=null,this.currentRangeExtent=null,this.fullRangeExtent=null,this.type="rangeInfo"}};e([t({type:String,json:{read:!0,write:!0}})],z.prototype,"name",void 0),e([t({type:String,json:{read:!0,write:!0}})],z.prototype,"field",void 0),e([t({type:[Number],json:{read:!0,write:!0}})],z.prototype,"currentRangeExtent",void 0),e([t({type:[Number],json:{read:!0,write:!0}})],z.prototype,"fullRangeExtent",void 0),e([t({type:["rangeInfo"],readOnly:!0,json:{read:!1,write:!0}})],z.prototype,"type",void 0),z=e([s("esri.layers.support.RangeInfo")],z);const H=z,B=["3DObject","Point"],J=r.getLogger("esri.layers.SceneLayer"),X=_();let Y=class extends(G(n(a(o(l(d(p(u)))))))){constructor(...e){super(...e),this.featureReduction=null,this.rangeInfos=null,this.operationalLayerType="ArcGISSceneServiceLayer",this.type="scene",this.fields=null,this.floorInfo=null,this.outFields=null,this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.definitionExpression=null,this.path=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.cachedDrawingInfo={color:!1},this.popupEnabled=!0,this.popupTemplate=null,this.objectIdField=null,this.globalIdField=null,this._fieldUsageInfo={},this.screenSizePerspectiveEnabled=!0}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}getField(e){return this.fieldsIndex.get(e)}getFieldDomain(e,t){var s,i,r,n;const a=null==(s=this.getFeatureType(null==t?void 0:t.feature))||null==(i=s.domains)?void 0:i[e];return a&&"inherited"!==a.type?a:null!=(r=null==(n=this.getField(e))?void 0:n.domain)?r:null}getFeatureType(e){return e&&h(this.associatedLayer)?this.associatedLayer.getFeatureType(e):null}get types(){return h(this.associatedLayer)?this.associatedLayer.types:[]}get typeIdField(){return h(this.associatedLayer)?this.associatedLayer.typeIdField:null}get formTemplate(){return h(this.associatedLayer)?this.associatedLayer.formTemplate:null}get fieldsIndex(){return new y(this.fields)}readNodePages(e,t,s){return"Point"===t.layerType&&(e=t.pointNodePages),null==e||"object"!=typeof e?null:$.fromJSON(e,s)}set elevationInfo(e){this._set("elevationInfo",e),this.loaded&&this._validateElevationInfo()}get geometryType(){return te[this.profile]||"mesh"}set renderer(e){c(e,this.fieldsIndex),this._set("renderer",e)}readCachedDrawingInfo(e){return null!=e&&"object"==typeof e||(e={}),null==e.color&&(e.color=!1),e}get capabilities(){const e=h(this.associatedLayer)&&this.associatedLayer.capabilities?this.associatedLayer.capabilities:M,{query:t,editing:{supportsGlobalId:s,supportsRollbackOnFailure:i,supportsUploadWithItemId:r,supportsReturnServiceEditsInSourceSpatialReference:n},data:{supportsZ:a,supportsM:o,isVersioned:l,supportsAttachment:d},operations:{supportsEditing:p,supportsUpdate:u,supportsQuery:y,supportsQueryAttachments:c}}=e,f=e.operations.supportsChangeTracking;return{query:t,editing:{supportsGlobalId:s,supportsReturnServiceEditsInSourceSpatialReference:n,supportsRollbackOnFailure:i,supportsGeometryUpdate:!1,supportsUploadWithItemId:r},data:{supportsAttachment:d,supportsZ:a,supportsM:o,isVersioned:l},operations:{supportsQuery:y,supportsQueryAttachments:c,supportsEditing:p&&f,supportsAdd:!1,supportsDelete:!1,supportsUpdate:u&&f}}}get editingEnabled(){return this._isOverridden("editingEnabled")?this._get("editingEnabled"):this.userHasEditingPrivileges}set editingEnabled(e){null!=e?this._override("editingEnabled",e):this._clearOverride("editingEnabled")}get defaultPopupTemplate(){return h(this.associatedLayer)||this.attributeStorageInfo?this.createPopupTemplate():null}readObjectIdField(e,t){return!e&&t.fields&&t.fields.some((t=>("esriFieldTypeOID"===t.type&&(e=t.name),!!e))),e||void 0}readGlobalIdField(e,t){return!e&&t.fields&&t.fields.some((t=>("esriFieldTypeGlobalID"===t.type&&(e=t.name),!!e))),e||void 0}get displayField(){return h(this.associatedLayer)?this.associatedLayer.displayField:null}readProfile(e,t){const s=t.store.profile;return null!=s&&ee[s]?ee[s]:(J.error("Unknown or missing profile",{profile:s,layer:this}),"mesh-pyramids")}load(e){const t=h(e)?e.signal:null,s=this.loadFromPortal({supportedTypes:["Scene Service"]},e).catch(f).then((()=>this._fetchService(t))).then((()=>Promise.all([this._fetchIndexAndUpdateExtent(this.nodePages,t),this._setAssociatedFeatureLayer(t)]))).then((()=>this._validateElevationInfo())).then((()=>this._applyAssociatedLayerOverrides())).then((()=>this._populateFieldUsageInfo())).then((()=>g(this,{origin:"service"},t))).then((()=>c(this.renderer,this.fieldsIndex))).then((()=>this.finishLoadEditablePortalLayer(e)));return this.addResolvingPromise(s),Promise.resolve(this)}createQuery(){const e=new m;return"mesh"!==this.geometryType&&(e.returnGeometry=!0,e.returnZ=!0),e.where=this.definitionExpression||"1=1",e.sqlFormat="standard",e}queryExtent(e,t){return this._getAssociatedLayerForQuery().then((s=>s.queryExtent(e||this.createQuery(),t)))}queryFeatureCount(e,t){return this._getAssociatedLayerForQuery().then((s=>s.queryFeatureCount(e||this.createQuery(),t)))}queryFeatures(e,t){return this._getAssociatedLayerForQuery().then((s=>s.queryFeatures(e||this.createQuery(),t))).then((e=>{if(null!=e&&e.features)for(const t of e.features)t.layer=this,t.sourceLayer=this;return e}))}queryObjectIds(e,t){return this._getAssociatedLayerForQuery().then((s=>s.queryObjectIds(e||this.createQuery(),t)))}queryAttachments(e,t){return this._getAssociatedLayerForQuery().then((s=>s.queryAttachments(e,t)))}getFieldUsageInfo(e){const t={supportsLabelingInfo:!1,supportsRenderer:!1,supportsPopupTemplate:!1,supportsLayerQuery:!1};return this.loaded?this._fieldUsageInfo[e]||t:(J.error("#getFieldUsageInfo()","Unavailable until layer is loaded"),t)}createPopupTemplate(e){return v(this,e)}_getAssociatedLayerForQuery(){const e=this.associatedLayer;return h(e)&&e.loaded?Promise.resolve(e):this._loadAssociatedLayerForQuery()}async _loadAssociatedLayerForQuery(){if(await this.load(),b(this.associatedLayer))throw new w("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});try{await this.associatedLayer.load()}catch(e){throw new w("scenelayer:query-not-available","SceneLayer associated feature layer could not be loaded",{layer:this,error:e})}return this.associatedLayer}hasCachedStatistics(e){return null!=this.statisticsInfo&&this.statisticsInfo.some((t=>t.name===e))}async queryCachedStatistics(e,t){if(await this.load(t),!this.statisticsInfo)throw new w("scenelayer:no-cached-statistics","Cached statistics are not available for this layer");const s=this.fieldsIndex.get(e);if(!s)throw new w("scenelayer:field-unexisting",`Field '${e}' does not exist on the layer`);for(const e of this.statisticsInfo)if(e.name===s.name){const s=I(this.parsedUrl.path,e.href);return j(s,{query:{f:"json",token:this.apiKey},responseType:"json",signal:t?t.signal:null}).then((e=>e.data))}throw new w("scenelayer:no-cached-statistics","Cached statistics for this attribute are not available")}async saveAs(e,t){return this._debouncedSaveOperations(1,{...t,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"},e)}async save(){return this._debouncedSaveOperations(0,{getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"})}async applyEdits(e,t){const s=await import("./p-c3ee51b2.js");if(await this.load(),b(this.associatedLayer))throw new w(`${this.type}-layer:not-editable`,"Service is not editable");return await this.associatedLayer.load(),s.applyEdits(this,this.associatedLayer.source,e,t)}on(e,t){return super.on(e,t)}validateLayer(e){if(e.layerType&&-1===B.indexOf(e.layerType))throw new w("scenelayer:layer-type-not-supported","SceneLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new w("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new w("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});!function(e,t){let s=!1,i=!1;if(null==e)s=!0,i=!0;else{const r=t&&t.isGeographic;switch(e){case"east-north-up":case"earth-centered":s=!0,i=r;break;case"vertex-reference-frame":s=!0,i=!r;break;default:s=!1}}if(!s)throw new w("scenelayer:unsupported-normal-reference-frame","Normal reference frame is invalid.");if(!i)throw new w("scenelayer:incompatible-normal-reference-frame","Normal reference frame is incompatible with layer spatial reference.")}(this.normalReferenceFrame,this.spatialReference)}_getTypeKeywords(){const e=[];if("points"===this.profile)e.push("Point");else{if("mesh-pyramids"!==this.profile)throw new w("scenelayer:unknown-profile","SceneLayer:save() encountered an unknown SceneLayer profile: "+this.profile);e.push("3DObject")}return e}_populateFieldUsageInfo(){if(this._fieldUsageInfo={},this.fields)for(const e of this.fields){const t=!(!this.attributeStorageInfo||!this.attributeStorageInfo.some((t=>t.name===e.name))),s=!!(h(this.associatedLayer)&&this.associatedLayer.fields&&this.associatedLayer.fields.some((t=>t&&e.name===t.name)));this._fieldUsageInfo[e.name]={supportsLabelingInfo:t,supportsRenderer:t,supportsPopupTemplate:t||s,supportsLayerQuery:s}}}_applyAssociatedLayerOverrides(){this._applyAssociatedLayerFieldsOverrides(),this._applyAssociatedLayerPopupOverrides()}_applyAssociatedLayerFieldsOverrides(){if(b(this.associatedLayer)||!this.associatedLayer.fields)return;let e=null;for(const t of this.associatedLayer.fields){const s=this.getField(t.name);s?(!s.domain&&t.domain&&(s.domain=t.domain.clone()),s.editable=t.editable,s.nullable=t.nullable,s.length=t.length):(e||(e=this.fields?this.fields.slice():[]),e.push(t.clone()))}e&&this._set("fields",e)}_applyAssociatedLayerPopupOverrides(){if(b(this.associatedLayer))return;const e=["popupTemplate","popupEnabled"],t=C(this);for(let s=0;s<e.length;s++){const i=e[s],r=this.originIdOf(i),n=this.associatedLayer.originIdOf(i);r<n&&(2===n||3===n)&&t.setAtOrigin(i,this.associatedLayer[i],n)}}async _setAssociatedFeatureLayer(e){if(-1===["mesh-pyramids","points"].indexOf(this.profile))return;const t=new V(this.parsedUrl,this.portalItem,this.apiKey,e);try{this.associatedLayer=await t.fetch()}catch(e){S(e)||this._logWarningOnPopupEnabled()}}_logWarningOnPopupEnabled(){F(this,["popupTemplate","popupEnabled"],(()=>this.popupEnabled&&null!=this.popupTemplate)).then((()=>()=>{const e=`this SceneLayer: ${this.title}`;null==this.attributeStorageInfo?J.warn(`Associated FeatureLayer could not be loaded and no binary attributes found. Popups will not work on ${e}`):J.info(`Associated FeatureLayer could not be loaded. Falling back to binary attributes for Popups on ${e}`)}))}_validateElevationInfo(){const e=this.elevationInfo;e&&("mesh-pyramids"===this.profile&&"absolute-height"!==e.mode&&J.warn(".elevationInfo=","Mesh scene layers only support absolute-height elevation mode"),e.featureExpressionInfo&&"0"!==e.featureExpressionInfo.expression&&J.warn(".elevationInfo=","Scene layers do not support featureExpressionInfo"))}};e([t({types:{key:"type",base:T,typeMap:{selection:E}},json:{origins:{"web-scene":{name:"layerDefinition.featureReduction",write:!0},"portal-item":{name:"layerDefinition.featureReduction",write:!0}}}})],Y.prototype,"featureReduction",void 0),e([t({type:[H],json:{read:!1,origins:{"web-scene":{name:"layerDefinition.rangeInfos",write:!0},"portal-item":{name:"layerDefinition.rangeInfos",write:!0}}}})],Y.prototype,"rangeInfos",void 0),e([t({json:{read:!1}})],Y.prototype,"associatedLayer",void 0),e([t({type:["show","hide"]})],Y.prototype,"listMode",void 0),e([t({type:["ArcGISSceneServiceLayer"]})],Y.prototype,"operationalLayerType",void 0),e([t({json:{read:!1},readOnly:!0})],Y.prototype,"type",void 0),e([t({...X.fields,readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}})],Y.prototype,"fields",void 0),e([t()],Y.prototype,"types",null),e([t()],Y.prototype,"typeIdField",null),e([t()],Y.prototype,"formTemplate",null),e([t({readOnly:!0})],Y.prototype,"fieldsIndex",null),e([t({type:L,json:{read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo"}}})],Y.prototype,"floorInfo",void 0),e([t(X.outFields)],Y.prototype,"outFields",void 0),e([t({type:$,readOnly:!0,json:{read:!1}})],Y.prototype,"nodePages",void 0),e([O("service","nodePages",["nodePages","pointNodePages"])],Y.prototype,"readNodePages",null),e([t({type:[K],readOnly:!0})],Y.prototype,"materialDefinitions",void 0),e([t({type:[W],readOnly:!0})],Y.prototype,"textureSetDefinitions",void 0),e([t({type:[Z],readOnly:!0})],Y.prototype,"geometryDefinitions",void 0),e([t({readOnly:!0})],Y.prototype,"serviceUpdateTimeStamp",void 0),e([t({readOnly:!0})],Y.prototype,"attributeStorageInfo",void 0),e([t({readOnly:!0})],Y.prototype,"statisticsInfo",void 0),e([t({type:String,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],Y.prototype,"definitionExpression",void 0),e([t({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],Y.prototype,"path",void 0),e([t(P)],Y.prototype,"elevationInfo",null),e([t({type:String})],Y.prototype,"geometryType",null),e([t(D)],Y.prototype,"labelsVisible",void 0),e([t({type:[A],json:{origins:{service:{name:"drawingInfo.labelingInfo",read:{reader:R},write:!1}},name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:R},write:!0}})],Y.prototype,"labelingInfo",void 0),e([t(x)],Y.prototype,"legendEnabled",void 0),e([t({type:Number,json:{origins:{"web-document":{default:1,write:{enabled:!0,target:{opacity:{type:Number},"layerDefinition.drawingInfo.transparency":{type:Number}}},read:{source:["opacity","layerDefinition.drawingInfo.transparency"],reader(e,t){var s,i;if("number"==typeof e&&e>=0&&e<=1)return e;const r=null==(s=t.layerDefinition)||null==(i=s.drawingInfo)?void 0:i.transparency;return void 0!==r?N(r):void 0}}},"portal-item":{write:!0},service:{read:!1}}}})],Y.prototype,"opacity",void 0),e([t({types:q,json:{origins:{service:{read:{source:"drawingInfo.renderer"}}},name:"layerDefinition.drawingInfo.renderer",write:!0},value:null})],Y.prototype,"renderer",null),e([t({json:{read:!1}})],Y.prototype,"cachedDrawingInfo",void 0),e([O("service","cachedDrawingInfo")],Y.prototype,"readCachedDrawingInfo",null),e([t({readOnly:!0,json:{read:!1}})],Y.prototype,"capabilities",null),e([t({type:Boolean,json:{read:!1}})],Y.prototype,"editingEnabled",null),e([t(k)],Y.prototype,"popupEnabled",void 0),e([t({type:Q,json:{name:"popupInfo",write:!0}})],Y.prototype,"popupTemplate",void 0),e([t({readOnly:!0,json:{read:!1}})],Y.prototype,"defaultPopupTemplate",null),e([t({type:String,json:{read:!1}})],Y.prototype,"objectIdField",void 0),e([O("service","objectIdField",["objectIdField","fields"])],Y.prototype,"readObjectIdField",null),e([t({type:String,json:{read:!1}})],Y.prototype,"globalIdField",void 0),e([O("service","globalIdField",["globalIdField","fields"])],Y.prototype,"readGlobalIdField",null),e([t({readOnly:!0,type:String,json:{read:!1}})],Y.prototype,"displayField",null),e([t({type:String,json:{read:!1}})],Y.prototype,"profile",void 0),e([O("service","profile",["store.profile"])],Y.prototype,"readProfile",null),e([t({readOnly:!0,type:String,json:{origins:{service:{read:{source:"store.normalReferenceFrame"}}},read:!1}})],Y.prototype,"normalReferenceFrame",void 0),e([t(U)],Y.prototype,"screenSizePerspectiveEnabled",void 0),Y=e([s("esri.layers.SceneLayer")],Y);const ee={"mesh-pyramids":"mesh-pyramids",meshpyramids:"mesh-pyramids","features-meshes":"mesh-pyramids",points:"points","features-points":"points",lines:"lines","features-lines":"lines",polygons:"polygons","features-polygons":"polygons"},te={"mesh-pyramids":"mesh",points:"point",lines:"polyline",polygons:"polygon"},se=Y;export default se;