import{i0 as e,i2 as t,e6 as s,e7 as i,i1 as r,aG as o,ec as l,eQ as a,cY as n,H as u,it as y,an as d,e as h,d as p,aL as c,a8 as v,ij as S,iu as m,eb as g,i as f,eK as b,at as C,ar as j,y as G,A as x,W as P}from"./p-7b6f6c18.js";import"./p-227a5838.js";const k=["atom","xml"],w={base:b,key:"type",typeMap:{"simple-line":C},errorContext:"symbol"},F={base:b,key:"type",typeMap:{"picture-marker":j,"simple-marker":G},errorContext:"symbol"},M={base:b,key:"type",typeMap:{"simple-fill":x},errorContext:"symbol"};let R=class extends(e(t(s(i(r(o(l))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const s=e.layerDefinition.drawingInfo.renderer.symbol;s&&"esriSFS"===s.type&&null!=(t=s.outline)&&t.style.includes("esriSFS")&&(s.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?a(this.url,k)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=P(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const s=this.spatialReference,{data:i}=await u(d.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:y(s)?void 0:null!=(t=s.wkid)?t:JSON.stringify(s)},signal:e});return i}_hasGeometry(e){var t,s;return null!=(t=null==(s=this.featureCollections)?void 0:s.some((t=>{var s,i;return(null==(s=t.featureSet)?void 0:s.geometryType)===e&&(null==(i=t.featureSet.features)?void 0:i.length)>0})))&&t}};h([p()],R.prototype,"description",void 0),h([p()],R.prototype,"featureCollections",void 0),h([c("service","featureCollections",["featureCollection.layers"])],R.prototype,"readFeatureCollections",null),h([p({type:v,json:{name:"lookAtExtent"}})],R.prototype,"fullExtent",void 0),h([p(S)],R.prototype,"id",void 0),h([p(m)],R.prototype,"legendEnabled",void 0),h([p({types:w,json:{write:!0}})],R.prototype,"lineSymbol",void 0),h([p({type:["show","hide"]})],R.prototype,"listMode",void 0),h([p({types:F,json:{write:!0}})],R.prototype,"pointSymbol",void 0),h([p({types:M,json:{write:!0}})],R.prototype,"polygonSymbol",void 0),h([p({type:["GeoRSS"]})],R.prototype,"operationalLayerType",void 0),h([p(g)],R.prototype,"url",void 0),h([p({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],R.prototype,"title",null),h([p({readOnly:!0,json:{read:!1},value:"geo-rss"})],R.prototype,"type",void 0),R=h([f("esri.layers.GeoRSSLayer")],R);const L=R;export default L;