import{e as t,i as s}from"./p-7b6f6c18.js";import{a as i,n as e}from"./p-cbacdb36.js";import{n as r}from"./p-8ead26b3.js";import{o}from"./p-d284d67f.js";import"./p-227a5838.js";import"./p-cde787e2.js";import"./p-a4a5967b.js";import"./p-033339b0.js";import"./p-1dd7027e.js";import"./p-1088d11f.js";import"./p-804725e3.js";import"./p-e53f77c2.js";import"./p-47e1bd73.js";import"./p-54e8960f.js";import"./p-5bfd1d7e.js";import"./p-b392deaf.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-a16c2b1d.js";import"./p-167d094f.js";import"./p-97ec6ae5.js";class p{constructor(){this.gradient=null,this.height=512,this.width=512}render(t){i(t,512,this.intensities,this.gradient,this.minPixelIntensity,this.maxPixelIntensity)}}let n=class extends o{constructor(t){super(t),this._intensityInfo={minPixelIntensity:0,maxPixelIntensity:0},this.featuresView={attributeView:{initialize:()=>{},requestUpdate:()=>{}},requestRender:()=>{}},this._container=new r(t.tileInfoView)}createTile(t){const s=this._container.createTile(t);return this.tileInfoView.getTileCoords(s.bitmap,t),s.bitmap.resolution=this.tileInfoView.getTileResolution(t),s}onConfigUpdate(){const t=this.layer.renderer;if("heatmap"===t.type){const{minPixelIntensity:s,maxPixelIntensity:i}=t;this._intensityInfo.minPixelIntensity=s,this._intensityInfo.maxPixelIntensity=i,this._gradient=e(t.toJSON()),this.tiles.forEach((t=>{const e=t.bitmap.source;e&&(e.minPixelIntensity=s,e.maxPixelIntensity=i,e.gradient=this._gradient,t.bitmap.invalidateTexture())}))}}hitTest(){return Promise.resolve([])}install(t){t.addChild(this._container)}uninstall(t){this._container.removeAllChildren(),t.removeChild(this._container)}disposeTile(t){this._container.removeChild(t),t.destroy()}supportsRenderer(t){return t&&"heatmap"===t.type}onTileData(t){const s=this.tiles.get(t.tileKey);if(!s)return;const i=t.intensityInfo,{minPixelIntensity:e,maxPixelIntensity:r}=this._intensityInfo,o=s.bitmap.source||new p;o.intensities=i&&i.matrix||null,o.minPixelIntensity=e,o.maxPixelIntensity=r,o.gradient=this._gradient,s.bitmap.source=o,this._container.addChild(s),this.requestUpdate()}onTileError(t){console.error(t)}lockGPUUploads(){}unlockGPUUploads(){}fetchResource(t,s){return console.error(t),Promise.reject()}};n=t([s("esri.views.2d.layers.features.tileRenderers.HeatmapTileRenderer")],n);const a=n;export default a;