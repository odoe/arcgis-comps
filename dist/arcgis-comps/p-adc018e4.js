import{e,i as t,e$ as s,r as i,eG as r}from"./p-5420851c.js";import{o as n}from"./p-65c95837.js";import{o}from"./p-47e1bd73.js";import{p as a}from"./p-10de1daa.js";import{l as p}from"./p-97540775.js";import"./p-53bb6ab4.js";class c{constructor(e,t){this.offset=e,this.extent=t}}let l=class extends a{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(e,t){const i=t.schema.processors[0];"heatmap"===i.type&&s(this._schema,i)&&(e.mesh=!0,this._schema=i)}onTileUpdate(e){for(const t of e.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(e){return this._tileKeyToFeatureSets.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:{clear:!0}})}async onTileMessage(e,t,s){this._tileKeyToFeatureSets.has(e.key.id)||this._tileKeyToFeatureSets.set(e.key.id,new Map);const a=this._tileKeyToFeatureSets.get(e.key.id);if(i(t.addOrUpdate)&&t.addOrUpdate.hasFeatures&&a.set(t.addOrUpdate.instance,t),t.end){const t=[],i=function(e){const t=e.key,s=new Map,i=256,r=o,n=e.tileInfoView.tileInfo.isWrappable;return s.set(p(t,-1,-1,n).id,new c([-r,-r],[r-i,r-i,r,r])),s.set(p(t,0,-1,n).id,new c([0,-r],[0,r-i,r,r])),s.set(p(t,1,-1,n).id,new c([r,-r],[0,r-i,i,r])),s.set(p(t,-1,0,n).id,new c([-r,0],[r-i,0,r,r])),s.set(p(t,1,0,n).id,new c([r,0],[0,0,i,r])),s.set(p(t,-1,1,n).id,new c([-r,r],[r-i,0,r,i])),s.set(p(t,0,1,n).id,new c([0,r],[0,0,r,i])),s.set(p(t,1,1,n).id,new c([r,r],[0,0,i,i])),s}(e);this._tileKeyToFeatureSets.forEach(((s,n)=>{if(n===e.key.id)s.forEach((e=>r(e.addOrUpdate,(e=>t.push(e)))));else if(i.has(n)){const e=i.get(n),[o,a]=e.offset;s.forEach((e=>r(e.addOrUpdate,(e=>{const s=e.transform(o,a,1,1);t.push(s)}))))}}));const a=n(t,this._schema.mesh,512,512);return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.key.id,intensityInfo:a},{...s,transferList:[a.matrix]})}}onTileError(e,t,s){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:e.id,error:t},s)}};l=e([t("esri.views.2d.layers.features.processors.HeatmapProcessor")],l);const h=l;export default h;