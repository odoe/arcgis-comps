import{v as t,e,d as i,o as s,i as n,t as r,r as a,O as l,X as o,m as h,_ as u,aA as c,a0 as f,b7 as d,U as p,aa as m,R as y}from"./p-9ae46e68.js";import{M as w,k as g,a9 as x,E as v,f as b,x as I,o as T}from"./p-566b0715.js";import{p as R,d as S,X as M,T as k,S as P,j,c as F,b as C,o as B,a as D}from"./p-fddf20e9.js";import{l as E,b as A}from"./p-8e6daf54.js";import{i as O}from"./p-c59d0a4d.js";import{o as _}from"./p-ae0b06e3.js";import{g as H}from"./p-844dad6c.js";import{f as L,c as N}from"./p-f271906a.js";import{j as z}from"./p-523f37cd.js";import{f as W,c as G}from"./p-cb5759ce.js";import{N as $,P as U,p as J,r as V,l as q,O as X,b as Y,C as K,c as Q,d as Z,e as tt,D as et,g as it}from"./p-3cbf7b8d.js";import{y as st}from"./p-cf8dc9be.js";import{w as nt}from"./p-5c89c68e.js";import{n as rt}from"./p-0c91ebaf.js";import{s as at}from"./p-72355290.js";import{a as lt}from"./p-d68829c1.js";import{y as ot}from"./p-8e03c038.js";import{v as ht}from"./p-81102839.js";import{a as ut}from"./p-fe01b82b.js";import{m as ct,x as ft,d as dt,h as pt,i as mt}from"./p-4a6cae2b.js";import{y as yt,B as wt,v as gt,s as xt,b as vt,M as bt,u as It}from"./p-9dbf3f05.js";import{d as Tt,v as Rt,A as St,q as Mt,j as kt,R as Pt,L as jt,T as Ft,P as Ct,G as Bt}from"./p-40c5644b.js";import{e as Dt,l as Et,m as At,a as Ot}from"./p-05ca30ed.js";import _t from"./p-98a14d68.js";import{n as Ht,T as Lt}from"./p-abcf0bfd.js";import{a as Nt}from"./p-15bb2887.js";import"./p-84bf99cb.js";import"./p-4681e856.js";import"./p-94f8dc11.js";import"./p-bb07d873.js";import"./p-8ac97b63.js";import"./p-a0a931f0.js";import"./p-dfc6337f.js";import"./p-77e6a663.js";import"./p-c5b7f7c3.js";import"./p-30ddb3a0.js";import"./p-74fc1b7f.js";import"./p-b3024dec.js";import"./p-8031c809.js";import"./p-c8f716a9.js";import"./p-57ae469d.js";import"./p-27ef204b.js";import"./p-3a2e88bf.js";import"./p-9e860e7b.js";import"./p-0659cf81.js";import"./p-3a5fe179.js";import"./p-138c2b2c.js";import"./p-79553c8d.js";import"./p-81e5b36e.js";import"./p-1a607bd0.js";import"./p-e4802f24.js";import"./p-725fd184.js";import"./p-32462343.js";import"./p-bae36c84.js";import"./p-6ebb24ba.js";import"./p-4fd6e394.js";import"./p-4b3ae2cf.js";const zt=t.getLogger("esri.layers.mixins.ImageryTileMixin"),Wt=t=>{let o=class extends t{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set url(t){this._set("url",H(t,zt))}set renderer(t){this._set("renderer",t),this.updateRenderer()}async convertVectorFieldData(t,e){if(r(t))return null;const i=this._rasterJobHandler.instance,s=this.rasterInfo.dataType;return i?i.convertVectorFieldData({pixelBlock:t,dataType:s},e):W(t,s)}normalizeRasterFetchOptions(t){const{multidimensionalInfo:e}=this.rasterInfo;if(r(e))return t;let i=t.multidimensionalDefinition||this.multidimensionalDefinition;!r(i)&&i.length||(i=this._getDefaultSlice());const s=t.timeExtent||this.timeExtent;if(a(i)&&a(s)&&(a(s.start)||a(s.end))){var n,l;i=i.map((t=>t.clone()));const o=null==(n=e.variables.find((({name:t})=>t===i[0].variableName)))||null==(l=n.dimensions)?void 0:l.find((({name:t})=>"StdTime"===t)),h=i.find((({dimensionName:t})=>"StdTime"===t));if(!o||!h)return{...t,multidimensionalDefinition:null};const{start:u,end:c}=s,f=r(u)?null:u.getTime(),d=r(c)?null:c.getTime(),p=null!=f?f:d,m=null!=d?d:f;if(a(o.values)){const t=o.values.filter((t=>Array.isArray(t)?t[0]<=p&&t[1]>=p||t[0]<=m&&t[1]>=m:p===m?t===p:t>=p&&t<=m));if(t.length){const e=t.sort(((t,e)=>{var i;return(null!=(i=e[1])?i:e)-(t[0]||t)}))[0];h.values=[e]}else i=null}else if(o.hasRegularIntervals&&o.extent){const[t,e]=o.extent;p>e||m<t?i=null:h.values=p===m?[p]:[Math.max(t,p),Math.min(e,m)]}}return{...t,multidimensionalDefinition:i}}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const t=this._rasterJobHandler.instance;t&&(this.symbolizer.rendererJSON=M(this.renderer.toJSON()),this.symbolizer.bind(),await t.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(t,e){const i=t&&t.pixelBlock;if(!(a(i)&&i.pixels&&i.pixels.length>0))return null;let s;await this.updateRenderer();const n=this._rasterJobHandler.instance,{bandIds:r}=this;return s=n?await n.symbolize({...t,simpleStretchParams:e,bandIds:r}):this.symbolizer.symbolize({...t,simpleStretchParams:e,bandIds:r}),s}getTileUrl(t,e,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${t}/${e}/${i}`:""}getCompatibleTileInfo(t,e,i=!1){if(!this.loaded||r(e))return null;if(i&&t.equals(this.spatialReference))return this.tileInfo;const s=x(t);return z.create({size:256,spatialReference:t,origin:s?{x:s.origin[0],y:s.origin[1]}:{x:e.xmin,y:e.ymax}})}getCompatibleFullExtent(t){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(t)||(this._compatibleFullExtent=this.raster.computeExtent(t)),this._compatibleFullExtent):null}async fetchTile(t,e,i,s={}){if(s.requestAsImageElement){const n=this.getTileUrl(t,e,i);return l(n,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:s.signal}).then((t=>t.data))}return a(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),r(s.multidimensionalDefinition))?{extent:this.raster.getTileExtentFromTileInfo(t,e,i,s.tileInfo||this.rasterInfo.storageInfo.tileInfo),pixelBlock:null}:(await this._initJobHandler(),"raster-shaded-relief"===this.renderer.type&&(s={...s,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,e,i,s))}async fetchPixels(t,e,i,s={}){return a(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),r(s.multidimensionalDefinition))?{extent:t,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(t,e,i,s))}async identify(t,e={}){return a(this.rasterInfo.multidimensionalInfo)&&(e=this.normalizeRasterFetchOptions(e),r(e.multidimensionalDefinition))?{location:t,value:null}:this.raster.identify(t,e)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){var t;const e=this.rasterInfo.multidimensionalInfo;if(!a(e)||"standard-time"!==this.rasterInfo.dataType)return!1;const i=null==(t=this.multidimensionalDefinition[0])?void 0:t.variableName;return e.variables.some((t=>t.name===i&&t.dimensions.some((t=>"StdTime"===t.name))))}getStandardTimeValue(t){return new Date(24*(t-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=this._getDefaultSlice()),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const t=new F;return this._rasterJobHandler.connectionPromise=t.initialize().then((()=>{this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,this.renderer&&this.updateRenderer()})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null}_configDefaultInterpolation(){if(null==this.interpolation){var t;const e=k(this.rasterInfo,this.raster.tileType,null==(t=this.sourceJSON)?void 0:t.defaultResamplingMethod);this._set("interpolation",e)}}_getDefaultSlice(){const{multidimensionalInfo:t}=this.raster.rasterInfo;if(!a(t))return null;const e=t.variables[0];return e.dimensions.map((t=>new R({variableName:e.name,dimensionName:t.name,values:t.hasRegularIntervals?t.extent[0]:t.values[0],isSlice:!0})))}_configDefaultRenderer(){const t=this.raster.rasterInfo;var e;this.bandIds||(this.bandIds=P(t)),this.renderer||(this.renderer=j(t,{bandIds:this.bandIds,variableName:a(this.multidimensionalDefinition)?null==(e=this.multidimensionalDefinition[0])?void 0:e.variableName:null})),this.symbolizer?(this.symbolizer.rendererJSON=M(this.renderer.toJSON()),this.symbolizer.rasterInfo=t):this.symbolizer=new $({rendererJSON:this.renderer.toJSON(),rasterInfo:t}),this.symbolizer.bind()||zt.warn("imagery-tile-mixin","The given renderer is not supported by the layer.")}};return e([i()],o.prototype,"_cachedRendererJson",void 0),e([i()],o.prototype,"_compatibleFullExtent",void 0),e([i()],o.prototype,"_rasterJobHandler",void 0),e([i()],o.prototype,"bandIds",void 0),e([i()],o.prototype,"copyright",void 0),e([i({type:w}),s("rasterInfo.extent")],o.prototype,"fullExtent",void 0),e([i()],o.prototype,"interpolation",void 0),e([i()],o.prototype,"ioConfig",void 0),e([i({type:[R]})],o.prototype,"multidimensionalDefinition",void 0),e([i()],o.prototype,"raster",void 0),e([i({readOnly:!0}),s("raster.rasterInfo")],o.prototype,"rasterInfo",void 0),e([i()],o.prototype,"sourceJSON",void 0),e([i({type:g}),s("rasterInfo.spatialReference")],o.prototype,"spatialReference",void 0),e([i({type:z}),s("rasterInfo.storageInfo.tileInfo")],o.prototype,"tileInfo",void 0),e([i(L)],o.prototype,"url",null),e([i({types:S})],o.prototype,"renderer",null),e([i()],o.prototype,"symbolizer",void 0),o=e([n("esri.layers.ImageryTileMixin")],o),o};let Gt=class extends(o(ut)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const t=Tt();this.addResolvingPromise(t),await this.when()}normalizeCtorArgs(t){return t&&t.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:z.create(),...t.ioConfig}}),t}set url(e){this._set("url",H(e,t.getLogger(this.declaredClass)))}async open(t){throw new h("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(t,e,i,s={}){const n=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,r=this.getTileExtentFromTileInfo(t,e,i,n);return this.fetchPixels(r,n.size[0],n.size[1],s)}async identify(t,e={}){e=this._getRequestOptionsWithSliceId(e);const{spatialReference:i,extent:s}=this.rasterInfo,{datumTransformation:n}=e;let l=Rt(t,i,n);if(!s.intersects(l))return{location:l,value:null};if(a(this.rasterInfo.transform)){const t=this.rasterInfo.transform.inverseTransform(l);if(!this.rasterInfo.nativeExtent.intersects(t))return{location:t,value:null};l=t}let o=0;if(e.srcResolution)o=St(e.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(o=await this.computeBestPyramidLevelForLocation(t,e),null==o)return{location:l,value:null};const h=this.identifyPixelLocation(l,o,null);if(null===h)return{location:l,value:null};const{row:u,col:c,rowOffset:f,colOffset:d}=h,p=mt(this.url,e.sliceId),m=`${o}/${u}/${c}`;let y=ct(p,null,m);r(y)&&(y=this.fetchRawTile(o,u,c,e),ft(p,null,m,y));const w=await y;if(r(w)||!w.pixels||0===w.pixels.length)return{location:l,value:null};const g=f*this.rasterInfo.storageInfo.blockHeight+d,x=!w.mask||w.mask[g]?w.pixels.map((t=>t[g])):null,v=this.rasterInfo.dataType;return("vector-magdir"===v||"vector-uv"===v)&&(null==x?void 0:x.length)>1?{location:l,value:x,magdirValue:"vector-magdir"===v?[x[0],x[1]]:G([x[0],x[1]]),pyramidLevel:o}:{location:l,value:x,pyramidLevel:o}}async fetchPixels(t,e,i,s={}){t=Mt(t);const n=Ct(t.spatialReference),l=Bt(t),o=Ct(this.rasterInfo.spatialReference),h=a(o)&&this.rasterInfo.extent.width>=o/2;if(s=this._getRequestOptionsWithSliceId(s),r(n)||0===l||1===l&&h)return this._fetchPixels(t,e,i,s);if(l>=3)return{extent:t,pixelBlock:null};const u=[],{xmin:c,xmax:f}=t,d=Math.round(n/(f-c)*e),p=d-Math.round((n/2-c)/(f-c)*e);let m=0;const y=[];for(let r=0;r<=l;r++){const a=new w({xmin:0===r?c:-n/2,xmax:r===l?f-n*r:n/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),o=0===r?d-p:r===l?e-m:d;m+=o,y.push(o);const h=this._fetchPixels(a,o,i,s);u.push(h)}const g=(await Promise.all(u)).map((t=>null==t?void 0:t.pixelBlock));let x=null;const v={width:e,height:i};return x=this.rasterJobHandler?await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:g,srcMosaicSize:v,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:y},s):yt(g,v,{blockWidths:y}),{extent:t,srcExtent:kt(t,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:x}}async fetchRawPixels(t,e,i,s){const{origin:n,blockBoundary:r}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(t);let{x:o,y:h}=e,{width:c,height:f,wrapCount:d}=i;const p=u(this._getRasterTileAlignmentInfo(t,0));s.buffer&&(o-=s.buffer.cols,h-=s.buffer.rows,c+=2*s.buffer.cols,f+=2*s.buffer.rows);const m=Math.floor(o/a),y=Math.floor(h/l),g=Math.floor((o+c-1)/a),x=Math.floor((h+f-1)/l),v=r[t];if(!v)return null;const{minRow:b,minCol:I,maxCol:T,maxRow:R}=v;if(0===d&&(x<b||g<I||y>R||m>T))return null;const S=new Array;let M=!1;const k=null==this.ioConfig.allowPartialFill?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let e=y;e<=x;e++)for(let i=m;i<=g;i++){const n=0===d||null==p||i<p.worldColumnCountFromOrigin?i:i%p.worldColumnCountFromOrigin-p.originColumnOffset;if(e>=b&&n>=I&&R>=e&&T>=n){const i=this._fetchRawTile(t,e,n,s);S.push(k?new Promise((t=>{i.then((e=>t(e))).catch((()=>{M=!0,t(null)}))})):i)}else S.push(null)}if(0===S.length)return null;const P=await Promise.all(S),j={height:(x-y+1)*l,width:(g-m+1)*a},{spatialReference:F}=this.rasterInfo,C=this.getPyramidPixelSize(t),{x:B,y:D}=C;return{extent:new w({xmin:n.x+m*a*B,xmax:n.x+(g+1)*a*B,ymin:n.y-(x+1)*l*D,ymax:n.y-y*l*D,spatialReference:F}),pixelBlocks:P,mosaicSize:j,isPartiallyFilled:M}}fetchRawTile(t,e,i,s){throw new h("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return kt(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?U(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,e,i){var s,n;const{customFetchParameters:r}=this.ioConfig,{range:a,query:o,headers:h}=e;i=null!=(s=null!=(n=i)?n:e.retryCount)?s:this.ioConfig.retryCount;const u=a?{Range:`bytes=${a.from}-${a.to}`}:null;try{return await l(t,{...e,query:{...o,...r},headers:{...h,...u}})}catch(s){if(i>0)return i--,this.request(t,e,i);throw s}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;if(!a(e))return null;if(!a(t)||0===t.length)return null;let i=0;const s=t[0].variableName;for(let n=0;n<e.variables.length;n++){const r=e.variables[n],a=r.dimensions;if(r.name!==s){i+=a.map((t=>this._getDimensionValuesCount(t))).reduce(((t,e)=>t+e));break}const l=a.map((t=>this._getDimensionValuesCount(t))),o=a.length;for(let e=0;e<o;e++){const s=t.filter((t=>t.dimensionName===a[e].name))[0];if(null==s)return null;const n=Array.isArray(s.values[0])?s.values[0][0]:s.values[0],r=this._getIndexFromDimensions(n,a[e]);if(-1===r)return null;l.shift(),i+=e===o-1?r:r*l.reduce(((t,e)=>t+e))}}return i}getTileExtentFromTileInfo(t,e,i,s){const n=s.lodAt(t);return this.getTileExtent({x:n.resolution,y:n.resolution},e,i,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:i,pixelSize:s}=this.rasterInfo;if(!t.tileInfo){const n=[],r=t.maximumPyramidLevel||0;let a=Math.max(s.x,s.y),l=1/.0254*96*a;for(let t=0;t<=r;t++)n.push({level:r-t,resolution:a,scale:l}),a*=2,l*=2;const o=new v({x:i.xmin,y:i.ymax,spatialReference:e});t.tileInfo=new z({origin:o,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:n}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,i=512,s){const{width:n,height:r,nativeExtent:a,pixelSize:l,spatialReference:o}=t,h=new v({x:a.xmin,y:a.ymax,spatialReference:o});null==s&&(s=Math.max(0,Math.round(Math.log(Math.max(n,r))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[l],s);t.storageInfo=new J({blockWidth:e,blockHeight:i,pyramidBlockWidth:e,pyramidBlockHeight:i,origin:h,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:u})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,i,s,n,r=0,a=2){if(1===n.length&&r>0){n=[...n];let{x:t,y:e}=n[0];for(let i=0;i<r;i++)t*=a,e*=a,n.push({x:t,y:e})}const l=[],{x:o,y:h}=s;for(let s=0;s<n.length;s++){const{x:r,y:a}=n[s];l.push({minCol:Math.floor((t.xmin-o+.1*r)/e/r),maxCol:Math.floor((t.xmax-o-.1*r)/e/r),minRow:Math.floor((h-t.ymax+.1*a)/i/a),maxRow:Math.floor((h-t.ymin-.1*a)/i/a)})}return l}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(0===t)return e;if(a(i)&&i.length)return i[t-1];const n=s**t;return{x:e.x*n,y:e.y*n}}identifyPixelLocation(t,e,i){const{spatialReference:s,nativeExtent:n}=this.rasterInfo,{blockWidth:r,blockHeight:a,maximumPyramidLevel:l,origin:o}=this.rasterInfo.storageInfo,h=Rt(t,s,i);if(!n.intersects(h))return null;if(e<0||e>l)return null;const u=this.getPyramidPixelSize(e),{x:c,y:f}=u,d=(o.y-h.y)/f/a,p=(h.x-o.x)/c/r,m=Math.min(a-1,Math.floor((d-Math.floor(d))*a)),y=Math.min(r-1,Math.floor((p-Math.floor(p))*r));return{pyramidLevel:e,row:Math.floor(d),col:Math.floor(p),rowOffset:m,colOffset:y,srcLocation:h}}getTileExtent(t,e,i,s,n,r){const[a,l]=r,o=s.x+i*a*t.x,h=s.y-e*l*t.y;return new w({xmin:o,xmax:o+a*t.x,ymin:h-l*t.y,ymax:h,spatialReference:n})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,i){const s=this.rasterInfo.storageInfo.blockBoundary[t];return!s||s.maxRow<e||s.maxCol<i||s.minRow>e||s.minCol>i}async _fetchPixels(t,e,i,s={}){const n=this.rasterInfo.spatialReference,r=!t.spatialReference.equals(n),{datumTransformation:a}=s,l=new v({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/i,spatialReference:t.spatialReference}),o=s.srcResolution||(r?Pt(l,n,t,a):l);if(!o)return{extent:t,pixelBlock:null};const{pyramidLevel:h,pyramidResolution:c,excessiveReading:f}=St(o,this.rasterInfo,this.ioConfig.sampling);if(f)return{extent:t,pixelBlock:null};const d=this.rasterInfo.storageInfo;let p=r?kt(t,n,a):t;if(null==p)return{extent:t,srcExtent:p,pixelBlock:null};const m=u(this.rasterInfo.transform);m&&(p=m.inverseTransform(p));const y={x:Math.floor((p.xmin-d.origin.x)/c.x+.1),y:Math.floor((d.origin.y-p.ymax)/c.y+.1)},w=Math.ceil((p.xmax-p.xmin)/c.x-.1),g=Math.ceil((p.ymax-p.ymin)/c.y-.1),x=Bt(t);if(w/e>8||g/i>8||x>=2)return{extent:t,srcExtent:p,pixelBlock:null};const b=await this.fetchRawPixels(h,y,{width:w,height:g,wrapCount:x},s);if(!b)return{extent:t,srcExtent:p,pixelBlock:null};const I=h>0?d.pyramidBlockWidth:d.blockWidth,T=h>0?d.pyramidBlockHeight:d.blockHeight;if(!r&&I===w&&T===g&&y.x%I==0&&y.y%T==0&&1===b.pixelBlocks.length&&I===e&&T===i&&o.x===l.x&&o.y===l.y)return{extent:t,srcExtent:p,pixelBlock:b.pixelBlocks[0]};const R=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:b.extent,pixelSize:l.toJSON(),datumTransformation:a,rasterTransform:m,hasWrapAround:x>0,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy},s):jt({projectedExtent:t,srcBufferExtent:b.extent,pixelSize:l,datumTransformation:a,rasterTransform:m,hasWrapAround:x>0,isAdaptive:!1});let S;const M=!s.requestRawData,k={rows:R.spacing[0],cols:R.spacing[1]},P=u(this._getRasterTileAlignmentInfo(h,b.extent.xmin)),{pixelBlocks:j,mosaicSize:F,isPartiallyFilled:C}=b;if(this.rasterJobHandler)S=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:j,srcMosaicSize:F,destDimension:M?{width:e,height:i}:null,coefs:M?R.coefficients:null,sampleSpacing:M?k:null,interpolation:s.interpolation,alignmentInfo:P,blockWidths:null},s);else{const t=yt(j,F,{alignmentInfo:P});S=M?wt(t,{width:e,height:i},R.coefficients,k,s.interpolation):t}return s.requestRawData?{srcExtent:p,pixelBlock:S,transformGrid:R,extent:t,isPartiallyFilled:C}:{srcExtent:p,extent:t,pixelBlock:S}}_fetchRawTile(t,e,i,s){const n=this.rasterInfo.storageInfo.blockBoundary[t];if(!n)return Promise.resolve(null);const{minRow:a,minCol:l,maxCol:o,maxRow:h}=n;if(e<a||i<l||e>h||i>o)return Promise.resolve(null);const u=mt(this.url,s.sliceId),f=`${t}/${e}/${i}`;let d=ct(u,s.registryId,f);if(r(d)){const n=new AbortController;d=this.fetchRawTile(t,e,i,{...s,signal:n.signal}),ft(u,s.registryId,f,d,n),d.catch((()=>dt(u,s.registryId,f)))}return s.signal&&c(s,(()=>{pt(u,s.registryId,f)})),d}_getIndexFromDimensions(t,e){const{extent:i,interval:s,unit:n,values:r}=e;if(null!=r&&r.length)return Array.isArray(r[0])?r.findIndex((e=>e[0]<=t&&e[1]>=t)):r.indexOf(t);if(t>i[1])return-1;const a=i[0];let l=-1;if("ISO8601"===n){var o;switch((null==(o=e.intervalUnit)?void 0:o.toLowerCase())||"seconds"){case"seconds":l=Math.round((t-a)/1e3/s);break;case"minutes":l=Math.round((t-a)/6e4/s);break;case"hours":l=Math.round((t-a)/36e5/s);break;case"days":l=Math.round((t-a)/864e5/s);break;case"years":l=Math.round((new Date(t).getUTCFullYear()-new Date(a).getUTCFullYear())/s);break;case"decades":l=Math.round((new Date(t).getUTCFullYear()-new Date(a).getUTCFullYear())/10/s)}return l}return Math.round((t-a)/s)}_getDimensionValuesCount(t){const{extent:e,interval:i,unit:s,values:n}=t;let r=(null==n?void 0:n.length)||0;if(r)return r;const a=e[0];if(0===r&&"ISO8601"===s){var l;switch((null==(l=t.intervalUnit)?void 0:l.toLowerCase())||"seconds"){case"seconds":r=Math.round((e[1]-e[0])/1e3/i);break;case"minutes":r=Math.round((e[1]-e[0])/6e4/i);break;case"hours":r=Math.round((e[1]-e[0])/36e5/i);break;case"days":r=Math.round((e[1]-e[0])/864e5/i);break;case"years":r=Math.round((new Date(e[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/i);break;case"decades":r=Math.round((new Date(e[1]).getUTCFullYear()-new Date(a).getUTCFullYear())/10/i)}return r}return Math.round((e[1]-e[0])/i)}_getRasterTileAlignmentInfo(t,e){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=Ft(this.rasterInfo)),a(this._rasterTileAlighmentInfo.pyramidsInfo)?{startX:e,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[t]}:null}_getRequestOptionsWithSliceId(t){return a(this.rasterInfo.multidimensionalInfo)&&null==t.sliceId&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}};e([i()],Gt.prototype,"_rasterTileAlighmentInfo",void 0),e([i(L)],Gt.prototype,"url",null),e([i({type:String,json:{write:!0}})],Gt.prototype,"datasetName",void 0),e([i({type:String,json:{write:!0}})],Gt.prototype,"datasetFormat",void 0),e([i()],Gt.prototype,"rasterInfo",void 0),e([i()],Gt.prototype,"ioConfig",void 0),e([i()],Gt.prototype,"sourceJSON",void 0),Gt=e([n("esri.layers.support.rasterDatasets.BaseRaster")],Gt);const $t=Gt;function Ut(t){const e=t.fields,i=t.records,s=e.some((t=>"oid"===t.name.toLowerCase()))?"OBJECTID":"OID",n=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map((t=>({name:t.name,type:"esriFieldType"+t.typeName,alias:t.name})))),r=n.map((t=>t.name)),a=[];let l=0,o=0;return i.forEach((t=>{const e={};for(e[s]=l++,o=1;o<r.length;o++)e[r[o]]=t[o-1];a.push({attributes:e})})),{displayFieldName:"",fields:n,features:a}}const Jt=new Map;Jt.set("int16","esriFieldTypeSmallInteger"),Jt.set("int32","esriFieldTypeInteger"),Jt.set("int64","esriFieldTypeInteger"),Jt.set("float32","esriFieldTypeSingle"),Jt.set("float64","esriFieldTypeDouble"),Jt.set("text","esriFieldTypeString");let Vt=class extends $t{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(t){await this.init();const{data:e}=await this.request(this.url+"/conf.json",{signal:null==t?void 0:t.signal});if(!this._validateHeader(e))throw new h("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:s}=this._parseHeader(e);if("thematic"===s.dataType){const t=await this._fetchAuxiliaryInformation();s.attributeTable=t}this._set("storageInfo",i),this._set("rasterInfo",s),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(t,e,i,s={}){const n=this.rasterInfo.storageInfo.maximumPyramidLevel-t;if(n<0)return null;const r=this._buildCacheFilePath(n,e,i,s.multidimensionalDefinition),a=this._getIndexRecordFromBundle(e,i),l=await this.request(r,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:s.signal});if(!l)return null;const o=new Uint8Array(l.data),h=this._getTileEndAndContentType(o,a);if(0===h.recordSize)return null;const u=await this.request(r,{range:{from:h.position,to:h.position+h.recordSize},responseType:"array-buffer",signal:s.signal});return u?this.decodePixelBlock(u.data,{width:this.rasterInfo.storageInfo.tileInfo.size[0],height:this.rasterInfo.storageInfo.tileInfo.size[1],planes:null,pixelType:null}):null}_validateHeader(t){return t&&"RasterInfo"===t.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((e=>!t[e]))}_parseHeader(t){var e,i;const s=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][t.pixelType],{bandCount:n,histograms:r,colormap:a,blockWidth:l,blockHeight:o,firstPyramidLevel:h,maximumPyramidLevel:u}=t,c=t.statistics&&t.statistics.map((t=>({min:t.min,max:t.max,avg:t.mean,stddev:t.standardDeviation,median:t.median,mode:t.mode}))),f=t.extent.spatialReference,d=null==(e=t.geodataXform)?void 0:e.spatialReference,p=new g(null!=f&&f.wkid||null!=f&&f.wkt?f:d);let m=new w({xmin:t.extent.xmin,ymin:t.extent.ymin,xmax:t.extent.xmax,ymax:t.extent.ymax,spatialReference:p});const y=new v({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:p}),x=Math.round((m.xmax-m.xmin)/y.x),b=Math.round((m.ymax-m.ymin)/y.y),I=this._parseTransform(t.geodataXform),T=I?m:null;I&&(m=I.forwardTransform(m),y.x=(m.xmax-m.xmin)/x,y.y=(m.ymax-m.ymin)/b);const R=null!=(i=t.properties)?i:{},S=t.format.toLowerCase().replace("cache/",""),M=new v(t.origin.x,t.origin.y,p);let k,P,j,F;if(a&&a.colors)for(k=[],P=0;P<a.colors.length;P++)j=a.colors[P],F=a.values?a.values[P]:P,k.push([F,255&j,j<<16>>>24,j<<8>>>24,j>>>24]);const C=t.LODInfos,B=[];for(P=0;P<C.levels.length;P++)B.push({level:C.levels[P],resolution:C.resolutions[P],scale:96/.0254*C.resolutions[P]});const D=new z({dpi:96,lods:B,format:S,origin:M,size:[l,o],spatialReference:p}),E={recordSize:8,packetSize:t.packetSize,headerSize:t.packetSize*t.packetSize*8+64},A=[{maxCol:Math.ceil(x/l)-1,maxRow:Math.ceil(b/o)-1,minCol:0,minRow:0}];let O=2;if(u>0)for(P=0;P<u;P++)A.push({maxCol:Math.ceil(x/O/l)-1,maxRow:Math.ceil(b/O/o)-1,minCol:0,minRow:0}),O*=2;return{storageInfo:E,rasterInfo:new q({width:x,height:b,pixelType:s,bandCount:n,extent:m,nativeExtent:T,transform:I,spatialReference:p,pixelSize:y,keyProperties:R,statistics:c,histograms:r,multidimensionalInfo:t.mdInfo,colormap:k,storageInfo:new J({blockWidth:l,blockHeight:o,pyramidBlockWidth:l,pyramidBlockHeight:o,origin:M,tileInfo:D,firstPyramidLevel:h,maximumPyramidLevel:u,blockBoundary:A})})}}_parseTransform(t){var e,i;if(!Dt(t))throw new h("cloudraster:open","the data contains unsupported geodata transform types");const s=Et(t);if("identity"===s.type)return null;if("polynomial"!==s.type||null==(e=s.forwardCoefficients)||!e.length||null==(i=s.inverseCoefficients)||!i.length)throw new h("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return s}async _fetchAuxiliaryInformation(t){const e=this.request(this.url+"/conf.vat.json",{signal:t}).then((t=>t.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:t}).then((t=>t.data)).catch((()=>null)),s=await Promise.all([e,i]);let n;if(s[0]){let t=s[0].fields;const e=s[0].values;if(t&&e){t=t.map((t=>({type:"OID"===t.name?"esriFieldTypeOID":Jt.get(t.type),name:t.name,alias:t.alias||t.name})));const i=e.map((t=>({attributes:t})));t&&e&&(n={fields:t,features:i})}}return!n&&s[1]&&(n=class{static get supportedVersions(){return[5]}static parse(t){const e=new DataView(t),i=3&e.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const s=e.getUint32(4,!0),n=e.getUint16(8,!0),r=e.getUint16(10,!0),a={version:i,recordCount:s,headerByteCount:n,recordByteCount:r};let l=32;const o=[],h=[];let u;if(3===i){for(;13!==e.getUint8(l);)u=String.fromCharCode(e.getUint8(l+11)).trim(),o.push({name:V(new Uint8Array(t,l,11)),type:u,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(u)],length:e.getUint8(l+16)}),l+=32;if(l+=1,o.length>0)for(;h.length<s&&t.byteLength-l>r;){const i=[];32===e.getUint8(l)?(l+=1,o.forEach((e=>{if("C"===e.type)i.push(V(new Uint8Array(t,l,e.length)).trim());else if("N"===e.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim(),10));else if("F"===e.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim()));else if("D"===e.type){const s=String.fromCharCode.apply(null,new Uint8Array(t,l,e.length)).trim();i.push(new Date(parseInt(s.substring(0,4),10),parseInt(s.substring(4,6),10)-1,parseInt(s.substring(6,8),10)))}l+=e.length})),h.push(i)):l+=r}}return{header:a,fields:o,records:h,recordSet:Ut({fields:o,records:h})}}}.parse(s[1]).recordSet),_t.fromJSON(n)}_buildCacheFilePath(t,e,i,s){const n=this.storageInfo.packetSize,r=Math.floor(e/n)*n,l=Math.floor(i/n)*n,o="R"+this._toHexString4(r)+"C"+this._toHexString4(l);let h="L";h+=t>=10?t.toString():"0"+t.toString();const{multidimensionalInfo:u}=this.rasterInfo,c=null==s?void 0:s[0];if(!a(u)||!c)return`${this.url}/_alllayers/${h}/${o}.bundle`;let f=u.variables.filter((t=>t.name===c.variableName))[0].dimensions[0].values.indexOf(c.values[0]).toString(16);const d=4-f.length;for(let t=0;t<d;t++)f="0"+f;return f="S"+f,`${this.url}/_alllayers/${c.variableName}/${f}/${h}/${o}.bundle`}_getIndexRecordFromBundle(t,e){const i=this.storageInfo.packetSize,s=i*(t%i)+e%i;if(s<0)throw"Invalid level / row / col";return 20+s*this.storageInfo.recordSize+44}_getTileEndAndContentType(t,e){const i=t.subarray(e,e+8);let s,n=0;for(s=0;s<5;s++)n|=(255&i[s])<<8*s;const r=0xffffffffff&n;for(n=0,s=5;s<8;s++)n|=(255&i[s])<<8*(s-5);return{position:r,recordSize:0xffffffffff&n}}_toHexString4(t){let e=t.toString(16);if(4!==e.length){let t=4-e.length;for(;t-- >0;)e="0"+e}return e}};e([i({readOnly:!0})],Vt.prototype,"storageInfo",void 0),e([i({type:String,json:{write:!0}})],Vt.prototype,"datasetFormat",void 0),Vt=e([n("esri.layers.support.rasterDatasets.CloudRaster")],Vt);const qt=Vt;let Xt=class extends $t{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(t){var e;await this.init();const{pixelBlock:i,statistics:s,histograms:n,name:r,keyProperties:a,nativeExtent:l,transform:o}=this.data,{width:h,height:u,pixelType:c}=i,f=this.data.extent||new w({xmin:-.5,ymin:.5,xmax:h-.5,ymax:u-.5,spatialReference:new g({wkid:3857})}),d=null!=(e=this.data.isPseudoSpatialReference)?e:!this.data.extent,p=new q({width:h,height:u,pixelType:c,extent:f,nativeExtent:l,transform:o,pixelSize:{x:f.width/h,y:f.height/u},spatialReference:f.spatialReference,bandCount:3,keyProperties:a||{},statistics:s,isPseudoSpatialReference:d,histograms:n});this.createRemoteDatasetStorageInfo(p,512,512),this._set("rasterInfo",p),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},t),this.datasetName=r,this.url="/InMemory/"+r}fetchRawTile(t,e,i,s={}){const n=this._pixelBlockTiles.get(`${t}/${e}/${i}`);return Promise.resolve(n)}async _buildInMemoryRaster(t,e,i){const s=this.rasterInfo.storageInfo.maximumPyramidLevel,n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:s},i):Promise.resolve(gt(t,e,s)),r=a(this.rasterInfo.statistics),l=a(this.rasterInfo.histograms),o=r&&l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},i):Promise.resolve(xt(t)),u=await f([n,o]);if(!u[0].value&&u[1].value)throw new h("inmemory-raster:open","failed to build in memory raster");var c,d;this._pixelBlockTiles=u[0].value,r||(this.rasterInfo.statistics=null==(c=u[1].value)?void 0:c.statistics),l&&(this.rasterInfo.histograms=null==(d=u[1].value)?void 0:d.histograms)}};e([i({type:String,json:{write:!0}})],Xt.prototype,"datasetFormat",void 0),e([i()],Xt.prototype,"data",void 0),Xt=e([n("esri.layers.support.rasterDatasets.InMemoryRaster")],Xt);const Yt=Xt;function Kt(t,e){if(!t||!e)return[];let i=e;e.indexOf("/")>-1?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=[];if(e){const n=Kt(t,i);for(let t=0;t<n.length;t++)Kt(n[t],e).forEach((t=>s.push(t)));return s}const n=t.getElementsByTagNameNS("*",i);if(!n||0===n.length)return[];for(let t=0;t<n.length;t++)s.push(n[t]||n.item[t]);return s}function Qt(t,e){if(!t||!e)return null;let i=e;e.indexOf("/")>-1?(i=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=Kt(t,i);return s.length>0?e?Qt(s[0],e):s[0]:null}function Zt(t,e=null){const i=e?Qt(t,e):t;let s;return i?(s=i.textContent||i.nodeValue,s?s.trim():null):null}function te(t,e){return function(t,e){const i=Kt(t,e),s=[];let n;for(let t=0;t<i.length;t++)n=i[t].textContent||i[t].nodeValue,n&&(n=n.trim(),""!==n&&s.push(n));return s}(t,e).map((t=>Number(t)))}function ee(t,e){const i=Zt(t,e);return Number(i)}function ie(t,e){var i;const s=null==t||null==(i=t.nodeName)?void 0:i.toLowerCase(),n=e.toLowerCase();return s.slice(s.lastIndexOf(":")+1)===n}function se(t,e){if(!t||!e)return null;const i=[];for(let s=0;s<t.length;s++)i.push(t[s]),i.push(e[s]);return i}function ne(t){var e;const i=Qt(t,"GeodataXform"),s=ae(ee(i,"SpatialReference/WKID")||Zt(i,"SpatialReference/WKT"));if("typens:PolynomialXform"!==i.getAttribute("xsi:type"))return{spatialReference:s,transform:null};const n=null!=(e=ee(i,"PolynomialOrder"))?e:1,r=te(i,"CoeffX/Double"),a=te(i,"CoeffY/Double"),l=te(i,"InverseCoeffX/Double"),o=te(i,"InverseCoeffY/Double"),h=se(r,a),u=se(l,o);return{spatialReference:s,transform:new At({spatialReference:s,polynomialOrder:n,forwardCoefficients:h,inverseCoefficients:u})}}function re(t){var e;const i=ee(t,"NoDataValue"),s=Qt(t,"Histograms/HistItem"),n=ee(s,"HistMin"),r=ee(s,"HistMax"),a=ee(s,"BucketCount"),l=null==(e=Zt(s,"HistCounts"))?void 0:e.split("|").map((t=>Number(t)));let o,h,u,c;Kt(t,"Metadata/MDI").forEach((t=>{var e;const i=Number(null!=(e=t.textContent)?e:t.nodeValue);switch(t.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=i;break;case"STATISTICS_MAXIMUM":h=i;break;case"STATISTICS_MEAN":u=i;break;case"STATISTICS_STDDEV":c=i}}));const f=ee(t,"Metadata/SourceBandIndex");return{noDataValue:i,histogram:null!=l&&l.length&&null!=o&&null!=h?{min:n,max:r,size:a||l.length,counts:l}:null,sourceBandIndex:f,statistics:null!=o&&null!=h?{min:o,max:h,avg:u,stddev:c}:null}}function ae(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&0!==e)return new g({wkid:e});if((t=String(t)).startsWith("COMPD_CS")){if(!t.includes("VERTCS")||!t.includes("GEOGCS")&&!t.startsWith("PROJCS"))return null;const i=t.indexOf("VERTCS"),s=t.indexOf("PROJCS"),n=s>-1?s:t.indexOf("GEOGCS");if(-1===n)return null;const r=t.slice(n,t.lastIndexOf("]",i)+1).trim(),a=t.slice(i,t.lastIndexOf("]")).trim();e=le(r);const l=new g(e?{wkid:e}:{wkt:r}),o=le(a);return o&&(l.vcsWkid=o),l}return t.startsWith("GEOGCS")||t.startsWith("PROJCS")?(e=le(t),new g(0!==e?{wkid:e}:{wkt:t})):null}function le(t){var e;const i=t.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((t=>t.trim())).filter((t=>""!==t)),s=i[i.length-1].split(","),n=null==(e=s[0])?void 0:e.toLowerCase();if(("epsg"===n||"esri"===n)&&t.endsWith('"]]')){const t=Number(s[1]);if(!isNaN(t)&&0!==t)return t}return 0}function oe(t){var e;if("pamdataset"!==(null==t||null==(e=t.documentElement.tagName)?void 0:e.toLowerCase()))return{};const i={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach((t=>{if(1===t.nodeType)if(ie(t,"SRS")){if(!i.spatialReference){const e=Zt(t);i.spatialReference=ae(e)}}else if(ie(t,"Metadata"))if("xml:ESRI"===t.getAttribute("domain")){const{spatialReference:e,transform:s}=ne(t);i.transform=s,i.spatialReference||(i.spatialReference=e)}else Kt(t,"MDI").forEach((t=>i.metadata[t.getAttribute("key")]=Zt(t)));else if(ie(t,"PAMRasterBand")){const e=re(t);null!=e.sourceBandIndex&&null==i.rasterBands[e.sourceBandIndex]?i.rasterBands[e.sourceBandIndex]=e:i.rasterBands.push(e)}}));const s=i.rasterBands;return s&&(i.statistics=s[0].statistics?s.map((t=>t.statistics)):null,i.histograms=s[0].histogram?s.map((t=>t.histogram)):null),i}let he=class extends $t{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:i,statistics:s,histograms:n,transform:r}=await this._fetchAuxiliaryData(t);const a=!i;a&&(i=new g({wkid:3857})),null!=n&&n.length&&null==s&&(s=vt(n));const{width:l,height:o}=e;let h=new w({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:i});const u=r?r.forwardTransform(h):h;let c=!0;if(r){const t=r.forwardCoefficients;c=t&&0===t[1]&&0===t[2],c&&(r=null,h=u)}const f=new Yt({data:{extent:u,nativeExtent:h,transform:r,pixelBlock:e,statistics:s,histograms:n,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await f.open(),this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}fetchRawTile(t,e,i,s={}){return this._inMemoryRaster.fetchRawTile(t,e,i,s)}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:null==t?void 0:t.signal}),i=X(e).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new h("image-aux-raster:open","the data is not a supported format");return this._set("datasetFormat",i),await this.decodePixelBlock(e,{format:"jpg",width:1,height:1,useCanvas:!0})}async _fetchAuxiliaryData(t){var e,i;const s=u(null==t?void 0:t.signal),n=null!=(e=this.ioConfig.skipExtensions)?e:[],r=n.indexOf("aux.xml")>-1?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:s}),a=this.datasetFormat,l="JPG"===a?"jgw":"PNG"===a?"pgw":"BMP"===a?"bpw":null,o=n.indexOf(l)>-1?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+l,{responseType:"text",signal:s}),h=await f([r,o]);if(null!=s&&s.aborted)throw d();const c=oe(null==(i=h[0].value)?void 0:i.data);if(!c.transform){const t=h[1].value?h[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;c.transform=6===(null==t?void 0:t.length)?new At({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null}return c}};e([i({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),he=e([n("esri.layers.support.rasterDatasets.ImageAuxRaster")],he);const ue=he;let ce=class extends Ot{constructor(){super(...arguments),this.type="gcs-shift",this.tolerance=1e-8}forwardTransform(t){return"point"===(t=t.clone()).type?(t.x>180+this.tolerance&&(t.x-=360),t):(t.xmin>=180-this.tolerance?(t.xmax-=360,t.xmin-=360):t.xmax>180+this.tolerance&&(t.xmin=-180,t.xmax=180),t)}inverseTransform(t){return"point"===(t=t.clone()).type?(t.x<-this.tolerance&&(t.x+=360),t):(t.xmin<-this.tolerance&&(t.xmin+=360,t.xmax+=360),t)}};e([b({GCSShiftXform:"gcs-shift"})],ce.prototype,"type",void 0),e([i()],ce.prototype,"tolerance",void 0),ce=e([n("esri.layers.support.rasterTransforms.GCSShiftTransform")],ce);const fe=ce;let de=class extends $t{constructor(){super(...arguments),this._levelOffset=0,this._slices=null,this._tilemapCache=null,this.datasetFormat="RasterTileServer"}async open(t){await this.init();const e=t&&t.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=i.data;if(this.sourceJSON=s,!s)throw new h("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new h("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo(),this.tileType=s.cacheType,null==this.tileType&&(this.tileType=["jpg","jpeg","png","png8","png24","png32","mixed"].indexOf(s.tileInfo.format.toLowerCase())>-1?"Map":"lerc"===s.tileInfo.format.toLowerCase()?"Elevation":"Raster"),this.datasetName=s.name.slice(s.name.indexOf("/")+1);const n=await this._fetchRasterInfo({signal:e});if(!a(n))throw new h("image-server-raster:open","cannot initialize image service");{const t="Map"===this.tileType?Ht(s.tileInfo,s):z.fromJSON(s.tileInfo),{extent:e,pixelSize:i}=n,r=.5/n.width*i.x;let a,l;const o=t.lodAt(Math.max.apply(null,t.lods.map((t=>t.level))));"Map"!==this.tileType&&0!==s.maxScale&&("Raster"===this.tileType?(a=t.lods.filter((t=>t.resolution===i.x))[0],a||(a=t.lods[t.lods.length-1])):(a=t.lods.filter((t=>Math.abs(t.scale-s.maxScale)<r))[0],a||(a=t.lods.filter((t=>t.scale>s.maxScale)).sort(((t,e)=>t.scale>e.scale?1:-1))[0])),i.x=i.y=a.resolution,n.width=Math.ceil((e.xmax-e.xmin)/i.x-.1),n.height=Math.ceil((e.ymax-e.ymin)/i.y-.1)),a||(a=o);const h=t.lodAt(Math.min.apply(null,t.lods.map((t=>t.level))));"Map"===this.tileType?this._levelOffset=t.lods[0].level:0!==s.minScale&&"Elevation"===this.tileType&&(l=t.lods.filter((t=>Math.abs(t.scale-s.minScale)<r))[0],this._levelOffset=l.level-h.level),l||(l=h);const u=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>r||!t.lods.some((t=>Math.abs(t.resolution-u)<r)))&&(i.x=i.y=a.resolution,n.width=Math.ceil((e.xmax-e.xmin)/i.x-.1),n.height=Math.ceil((e.ymax-e.ymin)/i.y-.1));const c=a.level-l.level,[f,d]=t.size,p=[];t.lods.forEach((t=>{t.level>=l.level&&t.level<=a.level&&p.push({x:t.resolution,y:t.resolution})})),p.sort(((t,e)=>t.x-e.x));const m=this.computeBlockBoundary(e,f,d,t.origin,p,c),y=p.length>1?p.slice(1):null;n.storageInfo=new J({blockWidth:t.size[0],blockHeight:t.size[1],pyramidBlockWidth:t.size[0],pyramidBlockHeight:t.size[1],pyramidResolutions:y,compression:t.format,origin:t.origin,firstPyramidLevel:1,maximumPyramidLevel:c,tileInfo:t,blockBoundary:m}),this._fixGCSShift(n),this._set("rasterInfo",n)}if(s.capabilities.toLowerCase().indexOf("tilemap")>-1){const t={tileInfo:n.storageInfo.tileInfo,parsedUrl:p(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new Lt({layer:t})}}async fetchRawTile(t,e,i,s={}){if(this._slices&&null==s.sliceId)return null;const{storageInfo:n,extent:r}=this.rasterInfo,a=`${this.url}/tile/${n.maximumPyramidLevel-t+this._levelOffset}/${e}/${i}`,l=this._slices?{sliceId:s.sliceId||0}:null,{data:o}=await this.request(a,{query:l,responseType:"array-buffer",signal:s.signal});if(!o)return null;const h=await this.decodePixelBlock(o,{width:n.tileInfo.size[0],height:n.tileInfo.size[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType}),u=n.blockBoundary[t];if("jpg"!==n.compression||i>u.minCol&&i<u.maxCol&&e>u.minRow&&e<u.maxRow)return h;const{origin:c,blockWidth:f,blockHeight:d}=n,{x:p,y:m}=this.getPyramidPixelSize(t),y=Math.round((r.xmin-c.x)/p)%f,w=Math.round((r.xmax-c.x)/p)%f,g=Math.round((c.y-r.ymax)/m)%d,x=Math.round((c.y-r.ymin)/m)%d,v=i===u.minCol?y:0,b=e===u.minRow?g:0;return bt(h,{x:v,y:b},{width:(i===u.maxCol?w:f)-v,height:(e===u.maxRow?x:d)-b}),h}getSliceIndex(t){if(!this._slices||r(t)||0===t.length)return null;const e=t;for(let t=0;t<this._slices.length;t++){const i=this._slices[t].multidimensionalDefinition;if(i.length===e.length&&!i.some((t=>{const i=e.filter((e=>t.variableName===e.variableName&&e.dimensionName===t.dimensionName))[0];return!i||(Array.isArray(t.values[0])?`${t.values[0][0]}-${t.values[0][1]}`:t.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return t}return null}async fetchVariableStatisticsHistograms(t,e){const i=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then((t=>{var e;return null==(e=t.data)?void 0:e.statistics})),s=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then((t=>{var e;return null==(e=t.data)?void 0:e.histograms})),n=await Promise.all([i,s]);return n[0]&&n[0].forEach((t=>{t.avg=t.mean,t.stddev=t.standardDeviation})),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(t,0,u(e.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:n}=this.rasterInfo.storageInfo;let r=n-s+this._levelOffset;const a=i.srcLocation;for(;r>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(r,i.row,i.col,e))break}catch{}if(r--,s++,i=this.identifyPixelLocation(a,s,u(e.datumTransformation)),null===i)return null}return-1===r||null==i?null:s}async _fetchRasterInfo(t){const e=this.sourceJSON,i=Math.ceil((e.extent.xmax-e.extent.xmin)/e.pixelSizeX-.1),s=Math.ceil((e.extent.ymax-e.extent.ymin)/e.pixelSizeY-.1),n=g.fromJSON(e.spatialReference||e.extent.spatialReference);if("Map"===this.tileType)return new q({width:i,height:s,bandCount:3,extent:w.fromJSON(e.extent),spatialReference:n,pixelSize:new v({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:n}),pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}});const{slice:r,signal:a}=t,l=!!e.hasRasterAttributeTable&&this.request(this.url+"/rasterAttributeTable",{query:{slice:r,f:"json"},signal:a}).then((t=>_t.fromJSON(t.data))).catch((()=>null)),o=!!e.hasColormap&&this.request(this.url+"/colormap",{query:{slice:r,f:"json"},signal:a}).then((t=>{var e;return null==(e=t.data)?void 0:e.colormap})),h=!!e.hasHistograms&&this.request(this.url+"/histograms",{query:{slice:r,f:"json"},signal:a}).then((t=>{var e;return null==(e=t.data)?void 0:e.histograms})),u=this.request(this.url+"/keyProperties",{query:{f:"json"},signal:a}).then((t=>t.data)).catch((()=>{})),c=!!e.hasMultidimensions&&this._fetchMultidimensionalInfo(),f=!!e.hasMultidimensions&&this.request(this.url+"/slices",{query:{f:"json"},signal:a}).then((t=>t.data&&t.data.slices)).catch((()=>{}));return Promise.all([l,o,h,u,c,f]).then((t=>{let r=null;if(e.minValues&&e.minValues.length===e.bandCount){r=[];for(let t=0;t<e.minValues.length;t++)r.push({min:e.minValues[t],max:e.maxValues[t],avg:e.meanValues[t],stddev:e.stdvValues[t]})}return this._slices=t[5]||null,new q({width:i,height:s,bandCount:e.bandCount,extent:w.fromJSON(e.extent),spatialReference:n,pixelSize:new v({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:n}),pixelType:e.pixelType.toLowerCase(),statistics:r,attributeTable:t[0]||null,colormap:t[1]||null,histograms:t[2]||null,keyProperties:t[3]||{},multidimensionalInfo:t[4]||null})}))}async _fetchMultidimensionalInfo(t){var e;const i=await this.request(this.url+"/multidimensionalInfo",{query:{f:"json"},signal:t}).then((t=>{var e;return null==(e=t.data)?void 0:e.multidimensionalInfo}));return null!=(e=i.variables)&&e.length&&i.variables.forEach((t=>{var e;null!=(e=t.statistics)&&e.length&&t.statistics.forEach((t=>{t.avg=t.mean,t.stddev=t.standardDeviation}))})),i}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_fixGCSShift(t){const{extent:e,spatialReference:i}=t;0===e.xmin&&360===e.xmax&&i.wkid&&i.isGeographic&&(t.nativeExtent=t.extent,t.transform=new fe,t.extent=t.transform.forwardTransform(e))}};e([i({type:String,json:{write:!0}})],de.prototype,"datasetFormat",void 0),e([i()],de.prototype,"tileType",void 0),de=e([n("esri.layers.support.rasterDatasets.ImageServerRaster")],de);const pe=de,me=new Map;me.set("Int8","s8"),me.set("UInt8","u8"),me.set("Int16","s16"),me.set("UInt16","u16"),me.set("Int32","s32"),me.set("UInt32","u32"),me.set("Float32","f32"),me.set("Float64","f32"),me.set("Double64","f32");const ye=new Map;ye.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),ye.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),ye.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),ye.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let we=class extends $t{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(t){var e;await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const i=t?u(t.signal):null,s=await this.request(this.url,{responseType:"xml",signal:i}),{rasterInfo:n,files:r}=this._parseHeader(s.data);if(-1===(null==(e=this.ioConfig.skipExtensions)?void 0:e.indexOf("aux.xml"))){const e=await this._fetchAuxiliaryData(t);var l;null!=e&&(n.statistics=null!=(l=e.statistics)?l:n.statistics,n.histograms=e.histograms,e.histograms&&!a(n.statistics)&&(n.statistics=vt(e.histograms)))}this._set("rasterInfo",n),this._files=r;const o=await this.request(r.index,{responseType:"array-buffer",signal:i});this._storageIndex=this._parseIndex(o.data);const{blockWidth:h,blockHeight:c}=this.rasterInfo.storageInfo,f=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:d,height:p}=this.rasterInfo,m=[],y=this._getBandSegmentCount();let w=0,g=-1;for(;w<this._storageIndex.length;){g++;const t=Math.ceil(d/h/f**g)-1,e=Math.ceil(p/c/f**g)-1;w+=1*t*(1*e)*y*4,m.push({maxRow:e,maxCol:t,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=m,g>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=g),this.updateTileInfo()}async fetchRawTile(t,e,i,s={}){const{blockWidth:n,blockHeight:r,blockBoundary:l}=this.rasterInfo.storageInfo,o=l[t];if(!o||o.maxRow<e||o.maxCol<i||o.minRow>e||o.minCol>i)return null;const{bandCount:h,pixelType:u}=this.rasterInfo,{ranges:c,actualTileWidth:f,actualTileHeight:d}=this._getTileLocation(t,e,i);if(!c||0===c.length)return null;if(0===c[0].from&&0===c[0].to){const t=new Uint8Array(n*r);return new It({width:n,height:r,pixels:null,mask:t,validPixelCount:0})}const{bandIds:p}=this.ioConfig,m=this._getBandSegmentCount(),y=[];let w=0;for(w=0;w<m;w++)(!p||p.indexOf[w]>-1)&&y.push(this.request(this._files.data,{range:{from:c[w].from,to:c[w].to},responseType:"array-buffer",signal:s.signal}));const g=await Promise.all(y),x=g.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),v=new Uint8Array(x);let b=0;for(w=0;w<m;w++)v.set(new Uint8Array(g[w].data),b),b+=g[w].data.byteLength;const I=ye.get(this.rasterInfo.storageInfo.compression).decoderFormat,T=await this.decodePixelBlock(v.buffer,{width:n,height:r,format:I,planes:(null==p?void 0:p.length)||h,pixelType:u});if(a(this.rasterInfo.noDataValue)&&"lerc"!==I&&!T.mask){const t=this.rasterInfo.noDataValue[0];if(null!=t){const e=T.width*T.height,i=new Uint8Array(e);if(Math.abs(t)>1e24)for(w=0;w<e;w++)Math.abs((T.pixels[0][w]-t)/t)>1e-6&&(i[w]=1);else for(w=0;w<e;w++)T.pixels[0][w]!==t&&(i[w]=1);T.mask=i}}let R=0,S=0;if(f!==n||d!==r){let t=T.mask;if(t)for(w=0;w<r;w++)if(S=w*n,w<d)for(R=f;R<n;R++)t[S+R]=0;else for(R=0;R<n;R++)t[S+R]=0;else for(t=new Uint8Array(n*r),T.mask=t,w=0;w<d;w++)for(S=w*n,R=0;R<f;R++)t[S+R]=1}return T}_parseIndex(t){if(t.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let e,i,s,n,r,a;if(Y){for(i=new Uint8Array(t),n=new ArrayBuffer(t.byteLength),s=new Uint8Array(n),r=0;r<t.byteLength/4;r++)for(a=0;a<4;a++)s[4*r+a]=i[4*r+3-a];e=new Uint32Array(n)}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return ye.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,i){const{blockWidth:s,blockHeight:n,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:a,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let h,u,c,f=0,d=0;for(c=0;c<t;c++)d=r**c,h=Math.ceil(a/s/d),u=Math.ceil(l/n/d),f+=h*u;d=r**t,h=Math.ceil(a/s/d),u=Math.ceil(l/n/d),f+=e*h+i,f*=4*o;const p=this._storageIndex.subarray(f,f+4*o);let m=0,y=0;const w=[];for(let t=0;t<o;t++)m=p[4*t+0]*2**32+p[4*t+1],y=m+p[4*t+2]*2**32+p[4*t+3],w.push({from:m,to:y});return{ranges:w,actualTileWidth:i<h-1?s:Math.ceil(a/d)-s*(h-1),actualTileHeight:e<u-1?n:Math.ceil(l/d)-n*(u-1)}}_parseHeader(t){const e=Qt(t,"MRF_META/Raster");if(!e)throw new h("mrf:open","not a valid MRF format");const i=Qt(e,"Size"),s=parseInt(i.getAttribute("x"),10),n=parseInt(i.getAttribute("y"),10),r=parseInt(i.getAttribute("c"),10),a=(Zt(e,"Compression")||"none").toLowerCase();if(!ye.has(a))throw new h("mrf:open","currently does not support compression "+a);const l=Zt(e,"DataType")||"UInt8",o=me.get(l);if(null==o)throw new h("mrf:open","currently does not support pixel type "+l);const u=Qt(e,"PageSize"),c=parseInt(u.getAttribute("x"),10),f=parseInt(u.getAttribute("y"),10),d=Qt(e,"DataValues");let p,m;if(d&&(m=d.getAttribute("NoData"),null!=m&&(p=m.trim().split(" ").map((t=>parseFloat(t))))),Qt(t,"MRF_META/CachedSource"))throw new h("mrf:open","currently does not support MRF referencing other data files");const y=Qt(t,"MRF_META/GeoTags"),x=Qt(y,"BoundingBox");if(null==x)throw new h("mrf:open","missing node MRF_META/GeoTags/BoundingBox");const b=parseFloat(x.getAttribute("minx")),I=parseFloat(x.getAttribute("miny")),T=parseFloat(x.getAttribute("maxx")),R=parseFloat(x.getAttribute("maxy")),S=Zt(y,"Projection")||"",M=Zt(t,"datafile"),k=Zt(t,"IndexFile");let P;if("LOCAL_CS[]"!==S)if(S.toLowerCase().startsWith("epsg:")){const t=Number(S.slice(5));isNaN(t)||0===t||(P=new g({wkid:t}))}else P=ae(S);const j=new w(b,I,T,R);j.spatialReference=P;const F=Qt(t,"MRF_META/Rsets"),C=parseInt(F&&F.getAttribute("scale")||"2",10),B=new J({origin:new v({x:j.xmin,y:j.ymax,spatialReference:P}),blockWidth:c,blockHeight:f,pyramidBlockWidth:c,pyramidBlockHeight:f,compression:a,pyramidScalingFactor:C}),D=new v({x:(T-b)/s,y:(R-I)/n,spatialReference:P});return{rasterInfo:new q({width:s,height:n,extent:j,spatialReference:P,bandCount:r,pixelType:o,pixelSize:D,noDataValue:p,storageInfo:B}),files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:M||this.url.replace(".mrf",ye.get(a).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==t?void 0:t.signal});return oe(e)}catch{return null}}};e([i()],we.prototype,"_files",void 0),e([i()],we.prototype,"_storageIndex",void 0),e([i({type:String,json:{write:!0}})],we.prototype,"datasetFormat",void 0),we=e([n("esri.layers.support.rasterIO.MRFRaster")],we);const ge=we,xe=function(t,e){const i=t.get(e);return i&&i.values},ve=function(t,e){const i=t.get(e);return i&&i.values[0]};let be=class extends $t{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(t){var e,i,s;await this.init();const n=t?u(t.signal):null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:n});if(!r)throw new h("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:l,firstIFD:o,isBigTiff:c}=K(r),f=[];await this.readIFDs(f,r,l,o,0,c?8:4,n);const d=Q(f),{width:p,height:m,tileWidth:y,tileHeight:x,planes:b,pixelType:I,compression:T,firstPyramidLevel:R,maximumPyramidLevel:S,pyramidBlockWidth:M,pyramidBlockHeight:k,tileBoundary:P,affine:j,metadata:F}=d;let C=ae((null==(e=d.extent.spatialReference)?void 0:e.wkt)||(null==(i=d.extent.spatialReference)?void 0:i.wkid)),B=!1;null==C&&(B=!0,C=new g({wkid:3857}));const D=new w({...d.extent,spatialReference:C}),E=new v(D?{x:D.xmin,y:D.ymax,spatialReference:C}:{x:0,y:0}),A=new J({blockWidth:y,blockHeight:x,pyramidBlockWidth:M,pyramidBlockHeight:k,compression:T,origin:E,firstPyramidLevel:R,maximumPyramidLevel:S,blockBoundary:P}),O=new v({x:(D.xmax-D.xmin)/p,y:(D.ymax-D.ymin)/m,spatialReference:C}),_=new q({width:p,height:m,bandCount:b,pixelType:I,compression:T,pixelSize:O,storageInfo:A,spatialReference:C,isPseudoSpatialReference:B,keyProperties:F?{BandProperties:F.bandProperties,DataType:F.dataType}:{},extent:D,statistics:F?F.statistics:null});if(null!=j&&j.length&&(_.nativeExtent=new w({xmin:-.5,ymin:.5-m,xmax:p-.5,ymax:.5,spatialReference:C}),_.transform=new At({polynomialOrder:1,forwardCoefficients:[j[2]+j[0]/2,j[5]-j[3]/2,j[0],j[3],-j[1],-j[4]]}),_.extent=_.transform.forwardTransform(_.nativeExtent),_.pixelSize=new v({x:(D.xmax-D.xmin)/p,y:(D.ymax-D.ymin)/m,spatialReference:C}),A.origin.x=-.5,A.origin.y=.5),null==(s=this.ioConfig.skipExtensions)||!s.includes("aux.xml")){const e=await this._fetchAuxiliaryData(t);if(null!=e){var H;if(_.statistics=null!=(H=e.statistics)?H:_.statistics,_.histograms=e.histograms,e.histograms&&!a(_.statistics)&&(_.statistics=vt(e.histograms)),e.transform&&!j){_.transform=e.transform,_.nativeExtent=_.extent;const t=_.transform.forwardTransform(_.nativeExtent);_.pixelSize=new v({x:(t.xmax-t.xmin)/p,y:(t.ymax-t.ymin)/m,spatialReference:C}),_.extent=t}_.spatialReference||(_.spatialReference=e.spatialReference)}}if(this._set("rasterInfo",_),this._headerInfo={littleEndian:l,isBigTiff:c,ifds:f,...d},!this._headerInfo.isSupported)throw new h("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(t,e,i,s={}){var n;if(null==(n=this._headerInfo)||!n.isSupported||this.isBlockOutside(t,e,i))return null;const r=this.getTileLocation(t,e,i);if(!r)return null;const{ranges:a,actualTileWidth:l,actualTileHeight:o,ifd:h}=r,u=a.map((t=>this.request(this.url,{range:t,responseType:"array-buffer",signal:s.signal}))),c=await Promise.all(u),f=c.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),d=1===c.length?c[0].data:new ArrayBuffer(f),p=[0],m=[0];if(c.length>1){const t=new Uint8Array(d);for(let e=0,i=0;e<c.length;e++){const s=c[e].data;t.set(new Uint8Array(s),i),p[e]=i,i+=s.byteLength,m[e]=s.byteLength}}const{blockWidth:y,blockHeight:w}=this.getBlockWidthHeight(t),g=await this.decodePixelBlock(d,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:h,offsets:p,sizes:m},width:y,height:w,planes:null,pixelType:null});let x,v,b;if(l!==y||o!==w){let t=g.mask;if(t)for(x=0;x<w;x++)if(b=x*y,x<o)for(v=l;v<y;v++)t[b+v]=0;else for(v=0;v<y;v++)t[b+v]=0;else for(t=new Uint8Array(y*w),g.mask=t,x=0;x<o;x++)for(b=x*y,v=0;v<l;v++)t[b+v]=1}return g}async readIFDs(t,e,i,s,n,r=4,a){if(!s)return null;(s>=e.byteLength||s<0)&&(e=(await this.request(this.url,{range:{from:s+n,to:s+n+this._bufferSize},responseType:"array-buffer",signal:a})).data,n=s+n,s=0);const l=await this.readIFD(e,i,s,n,Z.TIFF_TAGS,r,a);if(t.push(l.ifd),!l.nextIFD)return null;await this.readIFDs(t,e,i,l.nextIFD-n,n,r,a)}async readIFD(t,e,i,s,n=Z.TIFF_TAGS,r=4,a){if(!t)return null;const l=tt(t,e,i,s,n,r);if(l.success){const i=[];if(l.ifd.forEach((t=>{t.values||i.push(t)})),i.length>0){const n=i.map((t=>t.offlineOffsetSize)),r=Math.min.apply(null,n.map((t=>t[0])));if(Math.min.apply(null,n.map((t=>t[0]+t[1])))-r<=this._bufferSize){const{data:n}=await this.request(this.url,{range:{from:r,to:r+this._bufferSize},responseType:"array-buffer",signal:a});t=n,s=r,i.forEach((i=>et(t,e,i,s)))}}if(l.ifd.has("GEOKEYDIRECTORY")){const i=l.ifd.get("GEOKEYDIRECTORY"),n=i.values;if(n&&n.length>4){const r=n[0]+"."+n[1]+"."+n[2],l=await this.readIFD(t,e,i.valueOffset+6-s,s,Z.GEO_KEYS,2,a);i.data=l.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[r]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==t.byteLength){const i=await this.request(this.url,{range:{from:s,to:s+l.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(t=i.data).byteLength<l.requiredBufferSize?null:this.readIFD(t,e,0,s,Z.TIFF_TAGS,4,a)}}getTileLocation(t,e,i){const{firstPyramidLevel:s,blockBoundary:n}=this.rasterInfo.storageInfo,r=0===t?0:t-(s-1),a=this._headerInfo.ifds[r];if(!a)return null;const l=it(a,this._headerInfo),o=xe(a,"TILEOFFSETS");if(void 0===o)return null;const h=xe(a,"TILEBYTECOUNTS"),{minRow:u,minCol:c,maxRow:f,maxCol:d}=n[r];if(e>f||i>d||e<u||i<c)return null;const p=ve(a,"IMAGEWIDTH"),m=ve(a,"IMAGELENGTH"),y=ve(a,"TILEWIDTH"),w=ve(a,"TILELENGTH"),g=l?this.rasterInfo.bandCount:1,x=g*e*(d+1)+i,v=[{from:o[x],to:o[x+g-1]+h[x+g-1]-1}];if(l){let t=!0;for(let e=0;e<g;e++)if(o[x+e]+h[x+e]!==o[x+e+1]){t=!1;break}if(!t)for(let t=0;t<g;t++)v[t]={from:o[x+t],to:o[x+t]+h[x+t]-1}}return null==o[x]||null==h[x]?null:{ranges:v,ifd:a,actualTileWidth:i===d?p%y:y,actualTileHeight:e===f?m%w:w}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==t?void 0:t.signal});return oe(e)}catch{return null}}};e([i()],be.prototype,"_files",void 0),e([i()],be.prototype,"_headerInfo",void 0),e([i()],be.prototype,"_bufferSize",void 0),e([i({type:String,json:{write:!0}})],be.prototype,"datasetFormat",void 0),be=e([n("esri.layers.support.rasterDatasets.TIFFRaster")],be);const Ie=be,Te=new Map;Te.set("CRF",{desc:"Cloud Raster Format",constructor:qt}),Te.set("MRF",{desc:"Meta Raster Format",constructor:ge}),Te.set("TIFF",{desc:"GeoTIFF",constructor:Ie}),Te.set("RasterTileServer",{desc:"Raster Tile Server",constructor:pe}),Te.set("JPG",{desc:"JPG Raster Format",constructor:ue}),Te.set("PNG",{desc:"PNG Raster Format",constructor:ue}),Te.set("GIF",{desc:"GIF Raster Format",constructor:ue}),Te.set("BMP",{desc:"BMP Raster Format",constructor:ue});let Re=class extends(O(at(st(nt(_(Wt(lt(rt(E(A)))))))))){constructor(...t){super(...t),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(t,e){return"string"==typeof t?{url:t,...e}:t}load(t){const e=a(t)?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(m).then((()=>this._openRaster(e)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var t,e;let i=[new ot({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const s=null==(t=this.rasterInfo)||null==(e=t.attributeTable)?void 0:e.fields;if(s){const t=s.filter((t=>"oid"!==t.type&&"value"!==t.name.toLowerCase())).map((t=>{const e=t.clone();return e.name="Raster."+t.name,e}));i=i.concat(t)}const n=this.rasterInfo.dataType;if(("vector-magdir"===n||"vector-uv"===n)&&a(this.rasterInfo.multidimensionalInfo)){var r;const t=null==(r=this.rasterInfo.multidimensionalInfo.variables[0].unit)?void 0:r.trim();i.push(new ot({name:"Raster.Magnitude",alias:"Magnitude"+(t?` (${t})`:""),domain:null,editable:!1,type:"double"})),i.push(new ot({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return i}set renderer(t){this._set("renderer",t),this.updateRenderer()}readRenderer(t,e,i){const s=C(e&&e.layerDefinition&&e.layerDefinition.drawingInfo&&e.layerDefinition.drawingInfo.renderer,i)||void 0;if(null!=s)return s}createPopupTemplate(t){return Nt({fields:this.rasterFields,title:this.title},t)}write(t,e){const{raster:i}=this;return(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))?super.write(t,e):(e&&e.messages&&e.messages.push(new h("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e.origin}/${e.layerContainerType||"operational-layers"}'`,{layer:this})),null)}async _openRaster(t){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await class{static get supportedFormats(){const t=new Set;return Te.forEach(((e,i)=>t.add(i))),t}static async open(t){const{url:e,ioConfig:i,sourceJSON:s}=t;let n=t.datasetFormat;null==n&&e.lastIndexOf(".")&&(n=e.slice(e.lastIndexOf(".")+1).toUpperCase()),"OVR"===n||"TIF"===n?n="TIFF":"JPG"!==n&&"JPEG"!==n&&"JFIF"!==n||(n="JPG"),e.toLowerCase().indexOf("/imageserver")>-1&&-1===e.toLowerCase().indexOf("/wcsserver")&&(n="RasterTileServer");const r={url:e,sourceJSON:s,datasetFormat:n,ioConfig:i||{bandIds:null,sampling:null}};let a,l;if(this.supportedFormats.has(n))return a=Te.get(n).constructor,l=new a(r),await l.open({signal:t.signal}),l;if(n)throw new h("rasterfactory:open","not a supported format "+n);const o=Array.from(Te.keys());let u=0;const c=function(){return n=o[u++],n?(a=Te.get(n).constructor,l=new a(r),l.open({signal:t.signal}).then((()=>l)).catch((()=>c()))):null};return c()}static register(t,e,i){Te.has(t.toUpperCase())||Te.set(t.toUpperCase(),{desc:e,constructor:i})}}.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});const{rasterInfo:e}=this.raster;if(!e)throw new h("imagery-tile-layer:load","cannot load resources on "+this.url);this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON&&(this._set("version",this.sourceJSON.currentVersion),this._set("copyright",this.sourceJSON.copyrightText),this.sourceJSON.timeInfo&&this._set("timeInfo",ht.fromJSON(this.sourceJSON.timeInfo))),null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.watch("customParameters",(t=>this.raster.ioConfig.customFetchParameters=t))}};e([i({type:[y],json:{write:{overridePolicy(){var t;return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==(null==(t=this.bandIds)?void 0:t.join(","))}}}}})],Re.prototype,"bandIds",void 0),e([i({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),b(B)],Re.prototype,"interpolation",void 0),e([i({json:{write:!0}})],Re.prototype,"multidimensionalDefinition",void 0),e([i(N)],Re.prototype,"legendEnabled",void 0),e([i({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Re.prototype,"isReference",void 0),e([i({type:["show","hide"]})],Re.prototype,"listMode",void 0),e([i()],Re.prototype,"sourceJSON",void 0),e([i({readOnly:!0})],Re.prototype,"version",void 0),e([i()],Re.prototype,"title",void 0),e([i({readOnly:!0,json:{read:!1}})],Re.prototype,"type",void 0),e([i({type:["ArcGISTiledImageServiceLayer"]})],Re.prototype,"operationalLayerType",void 0),e([i({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(t,e,i){e[i]=!t}}}})],Re.prototype,"popupEnabled",void 0),e([i({type:I,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],Re.prototype,"popupTemplate",void 0),e([i({readOnly:!0})],Re.prototype,"defaultPopupTemplate",null),e([i({readOnly:!0,type:[ot]})],Re.prototype,"fields",void 0),e([i({readOnly:!0,type:[ot]})],Re.prototype,"rasterFields",null),e([i({types:S,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){var t;const e="raster-stretch"===(null==(t=this.renderer)?void 0:t.type)&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:D,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:t=>({enabled:t&&"vector-field"!==t.type})}}}}})],Re.prototype,"renderer",null),e([T("renderer")],Re.prototype,"readRenderer",null),Re=e([n("esri.layers.ImageryTileLayer")],Re);const Se=Re;export default Se;