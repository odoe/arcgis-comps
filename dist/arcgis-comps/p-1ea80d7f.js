import{e as t,d as s,i,p as e,af as o,A as r}from"./p-e58503d5.js";import{h}from"./p-e273719b.js";import{h as n}from"./p-54330161.js";import{k as l}from"./p-2f398ed1.js";import{S as a,L as c,v as p,c as w}from"./p-8bc9b36a.js";const d=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let m=class extends e{constructor(t){super(t),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=d.map((t=>new a({color:[t[0],t[1],t[2],.6],outline:{color:"black",width:1}}))),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(t){this._enabled!==t&&(this._enabled=t,this.update())}update(){if(!this._enabled)return void this.clear();const t=this.getTiles(),s=new Array,i=new Set(this._labels.keys());t.forEach(((e,a)=>{const d=e.lij.toString();i.delete(d);const m=e.lij[0],f=e.geometry;if(this.enablePolygons&&!this._polygons.has(d)){const t=new n({geometry:f,symbol:this._symbols[m%this._symbols.length]});this._polygons.set(d,t),s.push(t)}if(this.enableLabels){const i=(t=>{if(r(t.label))return t.label;let s=t.lij.toString();return r(t.loadPriority)&&(s+=` (${t.loadPriority})`),s})(e),m=a/(t.length-1),u=l(0,200,m),y=l(20,6,m)/.75,b=r(e.loadPriority)&&e.loadPriority>=t.length,g=new h([u,b?0:u,b?0:u]),v="3d"===this.view.type?()=>new c({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new p({text:i,halo:{color:"white",size:1/.75},material:{color:g},size:y})]}):()=>new w({text:i,haloColor:"white",haloSize:1/.75,color:g,size:y});if(this._labels.has(d)){const t=this._labels.get(d),s=v();(o(t.symbol)||JSON.stringify(s)!==JSON.stringify(t.symbol))&&(t.symbol=s)}else{const t=new n({geometry:f.extent.center,symbol:v()});this._labels.set(d,t),s.push(t)}}}));const e=new Array;i.forEach((t=>{this._polygons.has(t)&&(e.push(this._polygons.get(t)),this._polygons.delete(t)),this._labels.has(t)&&(e.push(this._labels.get(t)),this._labels.delete(t))})),this.view.graphics.removeMany(e),this.view.graphics.addMany(s)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};t([s({constructOnly:!0})],m.prototype,"view",void 0),t([s({readOnly:!0})],m.prototype,"updating",void 0),t([s()],m.prototype,"enabled",null),m=t([i("esri.views.support.TileTreeDebugger")],m);export{m as b}