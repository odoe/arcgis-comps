import{T as t}from"./p-5420851c.js";const o=t.getLogger("esri.views.3d.support.buffer.math");function n(t,n,e){if(t.count!==n.count)return void o.error("source and destination buffers need to have the same number of elements");const s=t.count,r=e[0],f=e[1],c=e[2],l=e[4],a=e[5],i=e[6],u=e[8],m=e[9],d=e[10],h=e[12],b=e[13],p=e[14],v=t.typedBuffer,_=t.typedBufferStride,M=n.typedBuffer,j=n.typedBufferStride;for(let t=0;t<s;t++){const o=t*_,n=t*j,e=M[n],s=M[n+1],O=M[n+2];v[o]=r*e+l*s+u*O+h,v[o+1]=f*e+a*s+m*O+b,v[o+2]=c*e+i*s+d*O+p}}function e(t,n,e){if(t.count!==n.count)return void o.error("source and destination buffers need to have the same number of elements");const s=t.count,r=e[0],f=e[1],c=e[2],l=e[3],a=e[4],i=e[5],u=e[6],m=e[7],d=e[8],h=t.typedBuffer,b=t.typedBufferStride,p=n.typedBuffer,v=n.typedBufferStride;for(let t=0;t<s;t++){const o=t*b,n=t*v,e=p[n],s=p[n+1],_=p[n+2];h[o]=r*e+l*s+u*_,h[o+1]=f*e+a*s+m*_,h[o+2]=c*e+i*s+d*_}}function s(t,o,n){const e=Math.min(t.count,o.count),s=t.typedBuffer,r=t.typedBufferStride,f=o.typedBuffer,c=o.typedBufferStride;for(let t=0;t<e;t++){const o=t*r,e=t*c;s[o]=n*f[e],s[o+1]=n*f[e+1],s[o+2]=n*f[e+2]}}function r(t,o){const n=Math.min(t.count,o.count),e=t.typedBuffer,s=t.typedBufferStride,r=o.typedBuffer,f=o.typedBufferStride;for(let t=0;t<n;t++){const o=t*s,n=t*f,c=r[n],l=r[n+1],a=r[n+2],i=Math.sqrt(c*c+l*l+a*a);if(i>0){const t=1/i;e[o]=t*c,e[o+1]=t*l,e[o+2]=t*a}}}function f(t,o,n){const e=Math.min(t.count,o.count),s=t.typedBuffer,r=t.typedBufferStride,f=o.typedBuffer,c=o.typedBufferStride;for(let t=0;t<e;t++){const o=t*r,e=t*c;s[o]=f[e]>>n,s[o+1]=f[e+1]>>n,s[o+2]=f[e+2]>>n}}function c(t,o,n){const e=t.typedBuffer,s=t.typedBufferStride,r=o.typedBuffer,f=o.typedBufferStride,c=n?n.count:o.count;let l=(n&&n.dstIndex?n.dstIndex:0)*s,a=(n&&n.srcIndex?n.srcIndex:0)*f;for(let t=0;t<c;++t)e[l]=r[a],e[l+1]=r[a+1],e[l+2]=r[a+2],l+=s,a+=f}function l(t,o,n,e,s){var r,f;const c=t.typedBuffer,l=t.typedBufferStride,a=null!=(r=null==s?void 0:s.count)?r:t.count;let i=(null!=(f=null==s?void 0:s.dstIndex)?f:0)*l;for(let t=0;t<a;++t)c[i]=o,c[i+1]=n,c[i+2]=e,i+=l}Object.freeze({__proto__:null,transformMat4:n,transformMat3:e,scale:s,normalize:r,shiftRight:f}),Object.freeze({__proto__:null,copy:c,fill:l});export{c as a,o as b,n as e,e as f,f as n,r as o,s as r,l as t}