import{iw as e,ix as s,iy as t,cP as i,cQ as r,cR as a,bE as o,iz as n,iA as l,iB as h,af as d,cX as c,cT as u,b as p,E as m,a as y,o as g,bJ as b,bT as v,e as f,d as w,bH as j,bK as x,bP as S,cW as I,i as E,r as T,iC as M}from"./p-5420851c.js";import{r as P}from"./p-aef2f66b.js";import{f as q,y as A,K as F}from"./p-c2347cbd.js";import{c as L}from"./p-e5d37620.js";import{e as O}from"./p-2f9d204e.js";import"./p-53bb6ab4.js";import"./p-9d3cbf73.js";import"./p-03d6250d.js";let R=class extends(e(s(t(q(A(i(r(a(o(n(l(h(d(c)))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,s){return"string"==typeof e?{url:e,...s}:e}load(e){const s=T(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(u).then((()=>this._fetchService(s)))),Promise.resolve(this)}readImageFormat(e,s){const t=s.supportedImageFormatTypes;return t&&t.indexOf("PNG32")>-1?"png32":"png24"}writeSublayers(e,s,t,i){if(!this.loaded||!e)return;const r=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=M(i.origin);if(3===e){const e=this.createSublayersForOrigin("service").sublayers;a=O(r,e,2)}else if(e>3){const e=this.createSublayersForOrigin("portal-item");a=O(r,e.sublayers,M(e.origin))}}const o=[],n={writeSublayerStructure:a,...i};let l=a;r.forEach((e=>{const s=e.write({},n);o.push(s),l=l||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(s.layers=o),l&&(s.visibleLayers=r.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,s,t,i){const r=i&&i.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new L({layer:this,floors:null==i?void 0:i.floors,scale:P({extent:e,width:s})*r}),o=a.toJSON();a.destroy();const n=!i||!i.rotation||this.version<10.3?{}:{rotation:-i.rotation},l=e&&e.spatialReference,h=l.wkid||JSON.stringify(l.toJSON());o.dpi*=r;const d={};if(null!=i&&i.timeExtent){const{start:e,end:s}=i.timeExtent.toJSON();d.time=e&&s&&e===s?""+e:`${null==e?"null":e},${null==s?"null":s}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:s+","+t,...o,...n,...d}}async fetchImage(e,s,t,i){var r;const a={responseType:"image",signal:null!=(r=null==i?void 0:i.signal)?r:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,s,t,i),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},o=this.parsedUrl.path+"/export";return null==a.query.dynamicLayers||this.capabilities.exportMap.supportsDynamicLayers?m(o,a).then((e=>e.data)).catch((e=>{if(y(e))throw e;throw new p("mapimagelayer:image-fetch-error",`Unable to load image: ${o}`,{error:e})})):Promise.reject(new p("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query}))}async fetchRecomputedExtents(e={}){const s={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:t}=await m(this.url,s),{extent:i,fullExtent:r,timeExtent:a}=t,o=i||r;return{fullExtent:o&&g.fromJSON(o),timeExtent:a&&b.fromJSON({start:a[0],end:a[1]})}}loadAll(){return v(this,(e=>{e(this.allSublayers)}))}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:s,ssl:t}=await m(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});t&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=s,this.read(s,{origin:"service",url:this.parsedUrl})}};f([w({type:Boolean})],R.prototype,"datesInUnknownTimezone",void 0),f([w()],R.prototype,"dpi",void 0),f([w()],R.prototype,"gdbVersion",void 0),f([w()],R.prototype,"imageFormat",void 0),f([j("imageFormat",["supportedImageFormatTypes"])],R.prototype,"readImageFormat",null),f([w({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],R.prototype,"imageMaxHeight",void 0),f([w({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],R.prototype,"imageMaxWidth",void 0),f([w()],R.prototype,"imageTransparency",void 0),f([w({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],R.prototype,"isReference",void 0),f([w({json:{read:!1,write:!1}})],R.prototype,"labelsVisible",void 0),f([w({type:["ArcGISMapServiceLayer"]})],R.prototype,"operationalLayerType",void 0),f([w({json:{read:!1,write:!1}})],R.prototype,"popupEnabled",void 0),f([w()],R.prototype,"sourceJSON",void 0),f([w({json:{write:{ignoreOrigin:!0}}})],R.prototype,"sublayers",void 0),f([x("sublayers",{layers:{type:[F]},visibleLayers:{type:[S]}})],R.prototype,"writeSublayers",null),f([w({type:["show","hide","hide-children"]})],R.prototype,"listMode",void 0),f([w({json:{read:!1},readOnly:!0,value:"map-image"})],R.prototype,"type",void 0),f([w(I)],R.prototype,"url",void 0),R=f([E("esri.layers.MapImageLayer")],R);const k=R;export default k;