import{v as t,m as s,r as e}from"./p-9ae46e68.js";import{u as i}from"./p-81e5b36e.js";import{bA as r}from"./p-566b0715.js";import{Z as o,v as n,n as h}from"./p-5ee2f7e2.js";import{b as a}from"./p-f42060e0.js";import{u as p}from"./p-1584b803.js";import"./p-84bf99cb.js";import"./p-fe01b82b.js";import"./p-4003c7ae.js";import"./p-b2d0e2de.js";import"./p-db87794e.js";import"./p-47f143cb.js";import"./p-bae36c84.js";import"./p-138c2b2c.js";import"./p-50ff864e.js";import"./p-8031c809.js";import"./p-79553c8d.js";import"./p-8e03c038.js";import"./p-32462343.js";import"./p-fb9c0392.js";import"./p-1f10277d.js";import"./p-2b250922.js";import"./p-285c6a34.js";import"./p-30ddb3a0.js";import"./p-9dcf03f7.js";import"./p-2a252a78.js";const l=t.getLogger("esri.views.2d.layers.features.support.whereUtils"),c={getAttribute:(t,s)=>t.field(s)};async function m(t,e){const i=await import("./p-b74f39e0.js");try{const r=i.WhereClause.create(t,e);if(!r.isStandardized){const t=new s("mapview - bad input","Unable to apply filter's definition expression, as expression is not standardized.",r);l.error(t)}return t=>{const s=t.readArcadeFeature();return r.testFeature(s,c)}}catch(s){return l.warn("mapview-bad-where-clause","Encountered an error when evaluating where clause",t),()=>!0}}const u=t.getLogger("esri.views.2d.layers.features.controllers.FeatureFilter");export default class{constructor(t){this._geometryBounds=i(),this._idToVisibility=new Map,this._serviceInfo=t}get hash(){return this._hash}check(t){return this._applyFilter(t)}clear(){const t=this._resetAllHiddenIds();return this.update(),{show:t,hide:[]}}invalidate(){this._idToVisibility.forEach(((t,s)=>{this._idToVisibility.set(s,0)}))}setKnownIds(t){for(const s of t)this._idToVisibility.set(s,1)}setTrue(t){const s=[],e=[],i=new Set(t);return this._idToVisibility.forEach(((t,r)=>{const o=!!(1&this._idToVisibility.get(r)),n=i.has(r);!o&&n?s.push(r):o&&!n&&e.push(r),this._idToVisibility.set(r,n?3:0)})),{show:s,hide:e}}createQuery(){const{geometry:t,spatialRel:s,where:e,timeExtent:i,objectIds:r}=this;return a.fromJSON({geometry:t,spatialRel:s,where:e,timeExtent:i,objectIds:r})}async update(t,s){this._hash=JSON.stringify(t);const e=await o(t,null,s);await Promise.all([this._setGeometryFilter(e),this._setIdFilter(e),this._setAttributeFilter(e),this._setTimeFilter(e)])}async _setAttributeFilter(t){if(!t||!t.where)return this._clause=null,void(this.where=null);this._clause=await m(t.where,this._serviceInfo.fieldsIndex),this.where=t.where}_setIdFilter(t){this._idsToShow=t&&t.objectIds&&new Set(t.objectIds),this._idsToHide=t&&t.hiddenIds&&new Set(t.hiddenIds),this.objectIds=t&&t.objectIds}async _setGeometryFilter(t){if(!t||!t.geometry)return this._spatialQueryOperator=null,this.geometry=null,void(this.spatialRel=null);const s=t.geometry,e=t.spatialRel||"esriSpatialRelIntersects",i=await n(e,s,this._serviceInfo.geometryType,this._serviceInfo.hasZ,this._serviceInfo.hasM);r(this._geometryBounds,s),this._spatialQueryOperator=i,this.geometry=s,this.spatialRel=e}_setTimeFilter(t){if(this.timeExtent=this._timeOperator=null,t&&t.timeExtent)if(this._serviceInfo.timeInfo)this.timeExtent=t.timeExtent,this._timeOperator=h(this._serviceInfo.timeInfo,t.timeExtent,p);else{const e=new s("feature-layer-view:time-filter-not-available","Unable to apply time filter, as layer doesn't have time metadata.",t.timeExtent);u.error(e)}}_applyFilter(t){return this._filterByGeometry(t)&&this._filterById(t)&&this._filterByTime(t)&&this._filterByExpression(t)}_filterByExpression(t){return!this.where||this._clause(t)}_filterById(t){return(!this._idsToHide||!this._idsToHide.size||!this._idsToHide.has(t.getObjectId()))&&(!this._idsToShow||!this._idsToShow.size||this._idsToShow.has(t.getObjectId()))}_filterByGeometry(t){if(!this.geometry)return!0;const s=t.readHydratedGeometry();return!!s&&this._spatialQueryOperator(s)}_filterByTime(t){return!e(this._timeOperator)||this._timeOperator(t)}_resetAllHiddenIds(){const t=[];return this._idToVisibility.forEach(((s,e)=>{1&s||(this._idToVisibility.set(e,1),t.push(e))})),t}}