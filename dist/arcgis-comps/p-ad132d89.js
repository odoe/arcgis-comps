import{aj as p,B as i,e as t,d as s,i as r}from"./p-7b6f6c18.js";import{l as e,u as o}from"./p-0b691897.js";import{i as m}from"./p-5448dec1.js";import{r as a}from"./p-2d5d1985.js";import"./p-227a5838.js";import"./p-a4a5967b.js";import"./p-033339b0.js";import"./p-804725e3.js";import"./p-1dd7027e.js";import"./p-cede17c2.js";import"./p-ea65d9c9.js";import"./p-47e1bd73.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";import"./p-51e4508b.js";import"./p-50ff864e.js";import"./p-54e8960f.js";import"./p-fb136006.js";import"./p-1088d11f.js";import"./p-e53f77c2.js";import"./p-5bfd1d7e.js";import"./p-4414d64f.js";import"./p-a617738c.js";import"./p-a16c2b1d.js";import"./p-167d094f.js";import"./p-97ec6ae5.js";import"./p-10e211d9.js";import"./p-df9635e1.js";import"./p-7d065686.js";import"./p-94807627.js";import"./p-3e28396b.js";import"./p-f78de11d.js";import"./p-269bd937.js";import"./p-dfd2d479.js";import"./p-9f705d18.js";import"./p-ec834938.js";import"./p-55e3d31e.js";import"./p-dede18bd.js";import"./p-5c077b4e.js";import"./p-e991a11e.js";import"./p-b1c9647c.js";const d={remove(){},pause(){},resume(){}};let j=class extends(e(o)){initialize(){this.graphicsView=new a({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new m(this.view.featuresTilingScheme)})}attach(){this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.handles.remove("graphicslayerview2d")}hitTest(p,i){return this.suspended||!this.graphicsView?Promise.resolve(null):this.graphicsView.hitTest(p,i)}async fetchPopupFeatures(p){if(this.graphicsView)return this.graphicsView.searchFeatures(p).then((p=>p.filter((p=>!!p.popupTemplate))))}update(p){this.graphicsView.processUpdate(p)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(t){let s;return"number"==typeof t?s=[t]:t instanceof p?s=[t.uid]:Array.isArray(t)&&t.length>0?s="number"==typeof t[0]?t:t.map((p=>p&&p.uid)):i.isCollection(t)&&(s=t.map((p=>p&&p.uid)).toArray()),s=s.filter((p=>null!=p)),s.length?(this.graphicsView.addHighlight(s),{remove:()=>this.graphicsView.removeHighlight(s)}):d}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}};t([s()],j.prototype,"graphicsView",void 0),t([s()],j.prototype,"updating",void 0),j=t([r("esri.views.2d.layers.GraphicsLayerView2D")],j);const h=j;export default h;