import{d$ as e,e as t,d as s,aR as r,i,a6 as n,ab as o,v as a,aj as l,a8 as u,aL as c,dZ as d,ad as p,bq as m,ac as h,N as v,W as y,a7 as f,H as g,e0 as T,e1 as N,af as A,ah as w}from"./p-c8bc3433.js";import{a as M}from"./p-26cd027c.js";class b{constructor(e={}){this._options=e}toQueryParams(e){if(!e)return null;const t=e.toJSON(),s={};return Object.keys(t).forEach((e=>{const r=this._options[e];if(r){const i="boolean"!=typeof r&&r.name?r.name:e,n="boolean"!=typeof r&&r.getter?r.getter(t):t[e];null!=n&&(s[i]=(e=>{if(!Array.isArray(e))return!1;const[t]=e;return"number"==typeof t||"string"==typeof t})(n)?n.join(","):"object"==typeof n?JSON.stringify(n):n)}else s[e]=t[e]}),this),s}}function S(e){return new b(e)}const j=e()({esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriYards:"yards"});e()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"}),e()({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),e()({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"}),e()({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"});const O=e()({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"});e()({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),e()({esriNATimeOfDayNotUsed:"not-used",esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"});const B=e()({AUTOMOBILE:"automobile",TRUCK:"truck",WALK:"walk",OTHER:"other"});var U;let D=U=class extends n{constructor(e){super(e),this.attributeParameterValues=null,this.description=null,this.distanceAttributeName=null,this.id=null,this.impedanceAttributeName=null,this.name=null,this.restrictionAttributeNames=null,this.simplificationTolerance=null,this.simplificationToleranceUnits=null,this.timeAttributeName=null,this.type=null,this.useHierarchy=null,this.uturnAtJunctions=null}clone(){return new U(o({attributeParameterValues:this.attributeParameterValues,description:this.description,distanceAttributeName:this.distanceAttributeName,id:this.id,impedanceAttributeName:this.impedanceAttributeName,name:this.name,restrictionAttributeNames:this.restrictionAttributeNames,simplificationTolerance:this.simplificationTolerance,simplificationToleranceUnits:this.simplificationToleranceUnits,timeAttributeName:this.timeAttributeName,type:this.type,useHierarchy:this.useHierarchy,uturnAtJunctions:this.uturnAtJunctions}))}};t([s({type:[Object],json:{write:!0}})],D.prototype,"attributeParameterValues",void 0),t([s({type:String,json:{write:!0}})],D.prototype,"description",void 0),t([s({type:String,json:{write:!0}})],D.prototype,"distanceAttributeName",void 0),t([s({type:String,json:{write:!0}})],D.prototype,"id",void 0),t([s({type:String,json:{write:!0}})],D.prototype,"impedanceAttributeName",void 0),t([s({type:String,json:{write:!0}})],D.prototype,"name",void 0),t([s({type:[String],json:{write:!0}})],D.prototype,"restrictionAttributeNames",void 0),t([s({type:Number,json:{write:!0}})],D.prototype,"simplificationTolerance",void 0),t([r(j)],D.prototype,"simplificationToleranceUnits",void 0),t([s({type:String,json:{write:!0}})],D.prototype,"timeAttributeName",void 0),t([r(B)],D.prototype,"type",void 0),t([s({type:Boolean,json:{write:!0}})],D.prototype,"useHierarchy",void 0),t([r(O)],D.prototype,"uturnAtJunctions",void 0),D=U=t([i("esri.rest.support.TravelMode")],D);const k=D;let R=class extends n{constructor(e){super(e),this.currentVersion=null,this.defaultTravelMode=null,this.directionsLanguage=null,this.directionsSupportedLanguages=null,this.directionsTimeAttribute=null,this.hasZ=null,this.impedance=null,this.networkDataset=null,this.supportedTravelModes=null}};t([s()],R.prototype,"currentVersion",void 0),t([s()],R.prototype,"defaultTravelMode",void 0),t([s()],R.prototype,"directionsLanguage",void 0),t([s()],R.prototype,"directionsSupportedLanguages",void 0),t([s()],R.prototype,"directionsTimeAttribute",void 0),t([s()],R.prototype,"hasZ",void 0),t([s()],R.prototype,"impedance",void 0),t([s()],R.prototype,"networkDataset",void 0),t([s({type:[k]})],R.prototype,"supportedTravelModes",void 0),R=t([i("esri.rest.support.NetworkServiceDescription")],R);const I=R,P=new a({0:"informative",1:"process-definition",2:"process-start",3:"process-stop",50:"warning",100:"error",101:"empty",200:"abort"});let F=class extends M{constructor(e){super(e),this.type=null}};t([s({type:String,json:{read:P.read,write:P.write}})],F.prototype,"type",void 0),F=t([i("esri.rest.support.NAMessage")],F);const x=F;let L=class extends l{};t([s()],L.prototype,"events",void 0),t([s()],L.prototype,"strings",void 0),L=t([i("esri.rest.support.DirectionsFeature")],L);const C=L;let E=class extends d{constructor(e){super(e),this.extent=null,this.features=null,this.geometryType="polyline",this.routeId=null,this.routeName=null,this.totalDriveTime=null,this.totalLength=null,this.totalTime=null}readFeatures(e,t){var s;if(!e)return[];const r=null!=(s=t.summary.envelope.spatialReference)?s:t.spatialReference,i=r&&p.fromJSON(r);return e.map((e=>{var t,s;const r=this._decompressGeometry(e.compressedGeometry),n=new m({...r,spatialReference:i}),o=null!=(t=null==(s=e.events)?void 0:s.map((e=>{const{arriveTimeUTC:t,ETA:s,point:{x:r,y:n,z:o},strings:a}=e;return new C({geometry:new h({x:r,y:n,z:o,hasZ:void 0!==o,spatialReference:i}),attributes:{ETA:s,arriveTimeUTC:t},strings:a})})))?t:[];return new C({attributes:e.attributes,events:o,geometry:n,strings:e.strings})}))}get mergedGeometry(){if(!this.features)return null;const e=this.features.map((({geometry:e})=>v(e))),t=this.get("extent.spatialReference");return this._mergePolylinesToSinglePath(e,t)}get strings(){return this.features.map((({strings:e})=>e))}_decompressGeometry(e){let t=0,s=0,r=0,i=0;const n=[];let o,a,l,u,c,d,p,m,h=0,v=0,y=0;if(c=e.match(/((\+|\-)[^\+\-\|]+|\|)/g),c||(c=[]),0===parseInt(c[h],32)){h=2;const e=parseInt(c[h],32);h++,d=parseInt(c[h],32),h++,1&e&&(v=c.indexOf("|")+1,p=parseInt(c[v],32),v++),2&e&&(y=c.indexOf("|",v)+1,m=parseInt(c[y],32),y++)}else d=parseInt(c[h],32),h++;for(;h<c.length&&"|"!==c[h];){o=parseInt(c[h],32)+t,h++,t=o,a=parseInt(c[h],32)+s,h++,s=a;const e=[o/d,a/d];v&&(u=parseInt(c[v],32)+r,v++,r=u,e.push(u/p)),y&&(l=parseInt(c[y],32)+i,y++,i=l,e.push(l/m)),n.push(e)}return{paths:[n],hasZ:v>0,hasM:y>0}}_mergePolylinesToSinglePath(e,t){if(0===e.length)return new m({spatialReference:t});const s=[];for(const t of e)for(const e of t.paths)s.push(...e);const r=[];s.forEach(((e,t)=>{0!==t&&e[0]===s[t-1][0]&&e[1]===s[t-1][1]||r.push(e)}));const{hasM:i,hasZ:n}=e[0];return new m({hasM:i,hasZ:n,paths:[r],spatialReference:t})}};t([s({type:u,json:{read:{source:"summary.envelope"}}})],E.prototype,"extent",void 0),t([s()],E.prototype,"features",void 0),t([c("features")],E.prototype,"readFeatures",null),t([s()],E.prototype,"geometryType",void 0),t([s({readOnly:!0})],E.prototype,"mergedGeometry",null),t([s()],E.prototype,"routeId",void 0),t([s()],E.prototype,"routeName",void 0),t([s({value:null,readOnly:!0})],E.prototype,"strings",null),t([s({json:{read:{source:"summary.totalDriveTime"}}})],E.prototype,"totalDriveTime",void 0),t([s({json:{read:{source:"summary.totalLength"}}})],E.prototype,"totalLength",void 0),t([s({json:{read:{source:"summary.totalTime"}}})],E.prototype,"totalTime",void 0),E=t([i("esri.rest.support.DirectionsFeatureSet")],E);const Z=E;let G=class extends n{constructor(e){super(e),this.directions=null,this.route=null,this.routeName=null,this.stops=null}};t([s({type:Z,json:{write:!0}})],G.prototype,"directions",void 0),t([s({type:l,json:{write:!0}})],G.prototype,"route",void 0),t([s({type:String,json:{write:!0}})],G.prototype,"routeName",void 0),t([s({type:[l],json:{write:!0}})],G.prototype,"stops",void 0),G=t([i("esri.rest.support.RouteResult")],G);const H=G;function J(e){return e&&d.fromJSON(e).features.map((e=>e))}let K=class extends n{constructor(e){super(e),this.barriers=null,this.messages=null,this.pointBarriers=null,this.polylineBarriers=null,this.polygonBarriers=null,this.routeResults=null}readPointBarriers(e,t){return J(t.barriers||t.pointBarriers)}readPolylineBarriers(e){return J(e)}readPolygonBarriers(e){return J(e)}};t([s({aliasOf:"pointBarriers"})],K.prototype,"barriers",void 0),t([s({type:[x]})],K.prototype,"messages",void 0),t([s({type:[l]})],K.prototype,"pointBarriers",void 0),t([c("pointBarriers",["barriers","pointBarriers"])],K.prototype,"readPointBarriers",null),t([s({type:[l]})],K.prototype,"polylineBarriers",void 0),t([c("polylineBarriers")],K.prototype,"readPolylineBarriers",null),t([s({type:[l]})],K.prototype,"polygonBarriers",void 0),t([c("polygonBarriers")],K.prototype,"readPolygonBarriers",null),t([s({type:[H]})],K.prototype,"routeResults",void 0),K=t([i("esri.rest.support.RouteResultsContainer")],K);const $=K;function _(e,t,s,r){r[s]=[t.length,t.length+e.length],e.forEach((e=>{t.push(e.geometry)}))}function V(e,t){for(let s=0;s<t.length;s++){const r=e[t[s]];if(r&&r.length)for(const e of r)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function W(e){const t=[],s=[],{directions:r=[],routes:{features:i=[],spatialReference:n=null}={},stops:{features:o=[],spatialReference:a=null}={},barriers:l,polygonBarriers:u,polylineBarriers:c,messages:d}=e.data,p="esri.tasks.RouteTask.NULL_ROUTE_NAME";let m,h,v=!0;const f=i&&n||o&&a||l&&l.spatialReference||u&&u.spatialReference||c&&c.spatialReference;r.forEach((e=>{t.push(m=e.routeName),s[m]={directions:e}})),i.forEach((e=>{-1===t.indexOf(m=e.attributes.Name)&&(t.push(m),s[m]={}),y(e.geometry)&&(e.geometry.spatialReference=f),s[m].route=e})),o.forEach((e=>{h=e.attributes,-1===t.indexOf(m=h.RouteName||p)&&(t.push(m),s[m]={}),m!==p&&(v=!1),y(e.geometry)&&(e.geometry.spatialReference=f),null==s[m].stops&&(s[m].stops=[]),s[m].stops.push(e)})),o.length>0&&!0===v&&(s[t[0]].stops=s[p].stops,delete s[p],t.splice(t.indexOf(p),1));const g=t.map((e=>(s[e].routeName=e===p?null:e,s[e])));return $.fromJSON({routeResults:g,pointBarriers:l,polygonBarriers:u,polylineBarriers:c,messages:d})}function z(e,t){for(let s=0;s<t.length;s++){const r=e[t[s]];if(r&&r.length)for(const e of r)if(y(e)&&e.hasZ)return!0}return!1}async function Y(e,t,s){if(!e)throw new f("network-service:missing-url","Url to Network service is missing");const r=w({f:"json",token:t},s),{data:i}=await g(e,r);i.supportedTravelModes||(i.supportedTravelModes=[]);for(let e=0;e<i.supportedTravelModes.length;e++)i.supportedTravelModes[e].id||(i.supportedTravelModes[e].id=i.supportedTravelModes[e].itemId);const n=i.currentVersion>=10.4?async function(e,t,s){try{const r=w({f:"json",token:t},s),i=T(e)+"/retrieveTravelModes",{data:{supportedTravelModes:n,defaultTravelMode:o}}=await g(i,r);return{supportedTravelModes:n,defaultTravelMode:o}}catch(e){throw new f("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:e})}}(e,t,s):async function(e,t){var s,r;const i=w({f:"json"},t),{data:n}=await g(e.replace(/\/rest\/.*$/i,"/info"),i);if(!n||!n.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};const{owningSystemUrl:o}=n,a=T(o)+"/sharing/rest/portals/self",{data:l}=await g(a,i),u=N("helperServices.routingUtilities.url",l);if(!u)return{supportedTravelModes:[],defaultTravelMode:null};const c=A(o),d=/\/solve$/i.test(c.path)?"Route":/\/solveclosestfacility$/i.test(c.path)?"ClosestFacility":"ServiceAreas",p=w({f:"json",serviceName:d},t),m=T(u)+"/GetTravelModes/execute",h=await g(m,p),v=[];let y=null;if(null!=h&&null!=(s=h.data)&&null!=(r=s.results)&&r.length){const e=h.data.results;for(const t of e){var f;if("supportedTravelModes"===t.paramName){if(null!=(f=t.value)&&f.features)for(const{attributes:e}of t.value.features)if(e){const t=JSON.parse(e.TravelMode);v.push(t)}}else"defaultTravelMode"===t.paramName&&(y=t.value)}}return{supportedTravelModes:v,defaultTravelMode:y}}(e,s),{defaultTravelMode:o,supportedTravelModes:a}=await n;return i.defaultTravelMode=o,i.supportedTravelModes=a,I.fromJSON(i)}export{x as a,Y as b,Z as c,z as d,W as f,S as o,V as p,_ as u}