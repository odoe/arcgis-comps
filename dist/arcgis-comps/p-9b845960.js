import{e,d as t,i as s,a7 as r,dZ as i,g as o,W as p}from"./p-c8bc3433.js";import n from"./p-3bb7f837.js";import{e as a}from"./p-7c926f90.js";import"./p-84bf99cb.js";import"./p-feee221d.js";import"./p-bdb8e9d6.js";import"./p-47e1bd73.js";import"./p-c4678b0b.js";import"./p-8fd94488.js";import"./p-edc70151.js";import"./p-03d6250d.js";import"./p-d6d28c7b.js";import"./p-472ecb7f.js";import"./p-a6945989.js";import"./p-30eee135.js";import"./p-be58da65.js";import"./p-c167c2b1.js";import"./p-b0a11892.js";import"./p-ea65d9c9.js";import"./p-b392deaf.js";import"./p-9790d1b4.js";import"./p-167f65f1.js";import"./p-a989744e.js";import"./p-429d3db0.js";import"./p-b7c042b3.js";import"./p-e991a11e.js";function c(e,t){if(o(e)&&o(t))return null;const s={};return p(t)&&(s.geometry=t.toJSON()),p(e)&&(s.where=e),s}let d=class extends n{constructor(){super(...arguments),this._enabledDataReceived=!1,this.errorString=null,this.connectionStatus="disconnected"}initialize(){this.handles.add([this.layer.watch("purgeOptions",(()=>this._update()))])}destroy(){this.connectionStatus="disconnected"}get connectionError(){if(this.errorString)return new r("stream-controller",this.errorString)}on(e,t){"data-received"===e&&(this._enabledDataReceived=!0,this._proxy.enableEvent("data-received",!0));const s=super.on(e,t),r=this;return{remove(){s.remove(),"data-received"===e&&(r._proxy.closed||r.hasEventListener("data-received")||r._proxy.enableEvent("data-received",!1))}}}queryLatestObservations(e,t){if(!this.layer.timeInfo.endField&&!this.layer.timeInfo.startField)throw new r("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then((e=>{const t=i.fromJSON(e);return t.features.forEach((e=>{e.layer=this.layer,e.sourceLayer=this.layer})),t}))}_createClientOptions(){return{...super._createClientOptions(),setProperty:e=>{this.set(e.propertyName,e.value)}}}_createTileRendererHash(e){const t=`${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(c(this.layer.definitionExpression,this.layer.geometryDefinition))})`;return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,s=e.fields.map((e=>e.toJSON())),r=a(e.geometryType),i=e.timeInfo&&e.timeInfo.toJSON()||null,o=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",fields:s,geometryType:r,objectIdField:t,timeInfo:i,source:this.layer.parsedUrl,serviceFilter:c(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enableDataReceived:this._enabledDataReceived,spatialReference:o,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};e([t()],d.prototype,"errorString",void 0),e([t({readOnly:!0})],d.prototype,"connectionError",null),e([t()],d.prototype,"connectionStatus",void 0),d=e([s("esri.views.2d.layers.StreamLayerView2D")],d);const m=d;export default m;