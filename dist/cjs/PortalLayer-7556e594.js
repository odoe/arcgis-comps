'use strict';

const request = require('./messageBundle-8be88d04.js');
const asyncUtils = require('./asyncUtils-cd78b718.js');
const Portal = require('./Portal-8d16604d.js');
const PortalItem = require('./PortalItem-8bcd02f8.js');

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const v=request.s$1.getLogger("esri.layers.mixins.PortalLayer"),w=i=>{let w=class extends i{constructor(){super(...arguments),this.resourceReferences={portalItem:null,paths:[]},this.userHasEditingPrivileges=!0;}destroy(){var t;null==(t=this.portalItem)||t.destroy(),this.portalItem=null;}set portalItem(t){t!==this._get("portalItem")&&(this.removeOrigin("portal-item"),this._set("portalItem",t));}readPortalItem(t,r,e){if(r.itemId)return new PortalItem['default']({id:r.itemId,portal:e&&e.portal})}writePortalItem(t,r){t&&t.id&&(r.itemId=t.id);}async loadFromPortal(t,r){if(this.portalItem&&this.portalItem.id)try{const e=await Promise.resolve().then(function () { return require('./layersLoader-592515fe.js'); }).then(function (n) { return n.layersLoader; });return request.h(r),await e.load({instance:this,supportedTypes:t.supportedTypes,validateItem:t.validateItem,supportsData:t.supportsData},r)}catch(e){throw request.d$1(e)||v.warn(`Failed to load layer (${this.title}, ${this.id}) portal item (${this.portalItem.id})\n  ${e}`),e}}async finishLoadEditablePortalLayer(t){this._set("userHasEditingPrivileges",await this.fetchUserHasEditingPrivileges(t).catch((t=>(request.b$1(t),!0))));}async fetchUserHasEditingPrivileges(t){const e=this.url?null==request.n$4?void 0:request.n$4.findCredential(this.url):null;if(!e)return !0;const s=P.credential===e?P.user:await this.fetchEditingUser(t);return P.credential=e,P.user=s,request.t$1(s)||null==s.privileges||s.privileges.includes("features:user:edit")}async fetchEditingUser(t){var o,i;const a=null==(o=this.portalItem)||null==(i=o.portal)?void 0:i.user;if(a)return a;const p=request.n$4.findServerInfo(this.url);if(null==p||!p.owningSystemUrl)return null;const n=`${p.owningSystemUrl}/sharing/rest`,m=Portal.B.getDefault();if(m&&m.loaded&&request.z$2(m.restUrl)===request.z$2(n))return m.user;const c=`${n}/community/self`,d=request.r(t)?t.signal:null,h=await asyncUtils.a(request.E(c,{authMode:"no-prompt",query:{f:"json"},signal:d}));return h.ok?Portal.p.fromJSON(h.value.data):null}read(t,r){r&&(r.layer=this),super.read(t,r);}write(t,r){const e=r&&r.portal,s=this.portalItem&&this.portalItem.id&&(this.portalItem.portal||Portal.B.getDefault());return e&&s&&!request.P$1(s.restUrl,e.restUrl)?(r.messages&&r.messages.push(new request.s("layer:cross-portal",`The layer '${this.title} (${this.id})' cannot be persisted because it refers to an item on a different portal than the one being saved to. To save the scene, set the layer.portalItem to null or save the scene to the same portal as the item associated with the layer`,{layer:this})),null):super.write(t,{...r,layer:this})}};return request.e([request.d({type:PortalItem['default']})],w.prototype,"portalItem",null),request.e([request.o$2("web-document","portalItem",["itemId"])],w.prototype,"readPortalItem",null),request.e([request.r$2("web-document","portalItem",{itemId:{type:String}})],w.prototype,"writePortalItem",null),request.e([request.d()],w.prototype,"resourceReferences",void 0),request.e([request.d({readOnly:!0})],w.prototype,"userHasEditingPrivileges",void 0),w=request.e([request.i("esri.layers.mixins.PortalLayer")],w),w},P={credential:null,user:null};

exports.w = w;
