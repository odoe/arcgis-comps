'use strict';

const request = require('./messageBundle-8be88d04.js');
const Graphic = require('./Graphic-0aff6059.js');
const mathUtils = require('./mathUtils-af6066f0.js');
const common = require('./common-41a349f2.js');
const projection = require('./projection-b19710fa.js');
const aaBoundingRect = require('./aaBoundingRect-56648c00.js');
const dehydratedFeatures = require('./dehydratedFeatures-a58f1b86.js');
const ColorMaterial = require('./ColorMaterial-61b9182b.js');
const I3SAttributeOverrides = require('./I3SAttributeOverrides-6eecd9fc.js');
const labelingInfo = require('./labelingInfo-594911d5.js');
const LayerView3D = require('./LayerView3D-d92910a3.js');
const zscale = require('./zscale-25ef55f0.js');
const Query = require('./Query-354911d3.js');
const WorkerHandle = require('./WorkerHandle-fc87c5d8.js');
const Graphics3DFeatureLikeLayerView = require('./Graphics3DFeatureLikeLayerView-59ec1020.js');
const SceneLayerView = require('./SceneLayerView-3c4d3a59.js');
const I3SUtil = require('./I3SUtil-25befd00.js');
const DefinitionExpressionSceneLayerView = require('./DefinitionExpressionSceneLayerView-342d7621.js');
const PopupSceneLayerView = require('./PopupSceneLayerView-a6dc0255.js');
const arcgisWebscene_entry = require('./arcgis-webscene-5e838aea.js');
const Scheduler = require('./Scheduler-72cbcf2a.js');
require('./index-fde8502c.js');
require('./geometry-ef17530a.js');
require('./PopupTemplate-a0b855f8.js');
require('./opacityUtils-f2e4b347.js');
require('./enumeration-f235fe07.js');
require('./Identifiable-a4f50f85.js');
require('./symbols-29b793e5.js');
require('./Symbol-f0556e23.js');
require('./Color-7d915caa.js');
require('./colorUtils-e70dbab5.js');
require('./screenUtils-d911ae62.js');
require('./aaBoundingBox-c372701a.js');
require('./persistableUrlUtils-c611d652.js');
require('./Portal-8d16604d.js');
require('./jsonUtils-b6068079.js');
require('./unitUtils-083cb8d0.js');
require('./mat4-f68486bc.js');
require('./geodesicConstants-047d586a.js');
require('./byteSizeEstimations-d2f2ce40.js');
require('./quantizationUtils-d1d9c03e.js');
require('./Field-b92c6f4a.js');
require('./fieldType-32f95259.js');
require('./mat4f64-fc3339e5.js');
require('./sphere-ef7f801f.js');
require('./vec4f64-d3fa6cd2.js');
require('./vectorStacks-f48a010a.js');
require('./quatf64-e7a7f39e.js');
require('./vec2f64-60b3c97e.js');
require('./intersectorUtils-0e8a6b4b.js');
require('./boundedPlane-f1094694.js');
require('./lineSegment-a86bf7bd.js');
require('./plane-0816c6c9.js');
require('./mathUtils-87b1f941.js');
require('./utils-2d48ea24.js');
require('./Util-5c6af8a4.js');
require('./vec2-d000a8cb.js');
require('./doublePrecisionUtils-26ddcbaf.js');
require('./Texture-16b1a373.js');
require('./mat3-1d3e0d51.js');
require('./quat-17613ceb.js');
require('./vec3f32-5485293e.js');
require('./Texture-95d9d662.js');
require('./FramebufferObject-435e1736.js');
require('./BlendLayer-6a2ab430.js');
require('./geometryDataUtils-0be35629.js');
require('./BufferView-b78db189.js');
require('./OrderIndependentTransparency-866eb67c.js');
require('./InterleavedLayout-4132788d.js');
require('./types-bcd9caf5.js');
require('./ElevationInfo-d3e3d64f.js');
require('./lengthUtils-179eaf12.js');
require('./floatRGBA-aa45f7cb.js');
require('./triangulationUtils-15ab4328.js');
require('./earcut-d5562923.js');
require('./deduplicate-91c52f8d.js');
require('./vec2f32-29a5eecf.js');
require('./glUtil-9df223c0.js');
require('./MemCache-7f5503ec.js');
require('./asyncUtils-cd78b718.js');
require('./I3SBinaryReader-a8426e2d.js');
require('./objectResourceUtils-58283911.js');
require('./devEnvironmentUtils-aafb5541.js');
require('./vec33-1fc512be.js');
require('./DefaultMaterial_COLOR_GAMMA-1f86519d.js');
require('./compilerUtils-56e51ed2.js');
require('./Version-55b8a4e7.js');
require('./layerViewUtils-96bae70b.js');
require('./TimeExtent-8b558884.js');
require('./OperationalLayer-853649aa.js');
require('./LabelClass-4b91d60e.js');
require('./labelUtils-73814dda.js');
require('./defaultsJSON-0cdf7a99.js');
require('./jsonUtils-62d28b73.js');
require('./featureConversionUtils-df21e951.js');
require('./OptimizedFeature-cd4fe3c6.js');
require('./OptimizedFeatureSet-b5737d2b.js');
require('./visualVariableUtils-1740874b.js');
require('./sizeVariableUtils-9012516e.js');
require('./utils-71e85012.js');
require('./ItemCache-149fdb6e.js');
require('./utils-fb318f28.js');
require('./callExpressionWithFeature-7cea2968.js');
require('./MeshComponent-0dd8a7d1.js');
require('./screenshotUtils-176d2414.js');
require('./projection-ea955486.js');
require('./heightModelInfoUtils-9cedab45.js');
require('./HeightModelInfo-06fd3d80.js');
require('./arcgisLayerUrl-5174d661.js');
require('./workers-bde9fe32.js');
require('./diffUtils-df69757f.js');
require('./Graphics3DScaleVisibility-7783d850.js');
require('./UniqueValueRenderer-1c485e9f.js');
require('./VisualVariablesMixin-a105fcfa.js');
require('./colorRamps-d0c2cb9d.js');
require('./ColorStop-ce63948c.js');
require('./styleUtils-2b475600.js');
require('./DictionaryRenderer-a0dce499.js');
require('./LRUCache-38fdf18d.js');
require('./jsonUtils-fc4080da.js');
require('./Layer-31cde361.js');
require('./rendererConversion-536e1699.js');
require('./optimizedFeatureQueryEngineAdapter-32c6c975.js');
require('./centroid-d874c2ee.js');
require('./PooledRBush-793d5c9f.js');
require('./quickselect-d3f68f5a.js');
require('./Graphics3DObjectStates-d741bf09.js');
require('./QueryEngine-d6177b5a.js');
require('./normalizeUtils-a793b472.js');
require('./WhereClause-f1cc2353.js');
require('./projectionSupport-7159f0ef.js');
require('./json-2c41fbe0.js');
require('./QueryEngineCapabilities-15e8d907.js');
require('./utils-16feefb0.js');
require('./ClassBreaksDefinition-fc75df48.js');
require('./spatialQuerySupport-16372b87.js');
require('./FieldsIndex-664af19b.js');
require('./FeatureSet-8efc5965.js');
require('./floorFilterUtils-a9b30733.js');
require('./Graphics3DFrustumVisibility-760fbf68.js');
require('./attributeUtils-1a80ac17.js');
require('./HandleOwner-9c4c158c.js');
require('./reactiveUtils-ef5dccea.js');
require('./LayerView-2bc30c9f.js');
require('./quatf32-43352942.js');
require('./popupUtils-454e6531.js');
require('./DefaultUI-75d05512.js');
require('./Basemap-81280554.js');
require('./loadAll-e25ec3d0.js');
require('./PortalItem-8bcd02f8.js');
require('./writeUtils-7bdc195a.js');
require('./CollectionFlattener-bc4cde45.js');
require('./basemapUtils-dc86a6ad.js');
require('./TablesMixin-d3e0d4c7.js');
require('./GraphicsCollection-d70ae8cb.js');
require('./screenUtils-e9e44bb6.js');
require('./executeQueryJSON-3f84e897.js');
require('./utils-8a0a0870.js');
require('./query-0e394548.js');
require('./pbfQueryUtils-49e071a8.js');
require('./pbf-dc87045b.js');
require('./queryZScale-d48be112.js');
require('./TopFeaturesQuery-92caa731.js');
require('./Heading-d7c5e432.js');
require('./widget-b8f4aeaf.js');
require('./QueryTask-3b24eec5.js');
require('./Task-95a3fa39.js');
require('./FeatureLayer-68e51b64.js');
require('./MultiOriginJSONSupport-77ac451b.js');
require('./APIKeyMixin-77c99036.js');
require('./ArcGISService-56d7a630.js');
require('./CustomParametersMixin-996a5732.js');
require('./OrderedLayer-8690aaf5.js');
require('./PortalLayer-7556e594.js');
require('./RefreshableLayer-487bd7b3.js');
require('./ScaleRangeLayer-5320a5ba.js');
require('./TemporalLayer-06f08bdd.js');
require('./TimeInfo-050c5617.js');
require('./FeatureType-d8b81062.js');
require('./fieldProperties-c9dd6469.js');
require('./LayerFloorInfo-c56fa764.js');
require('./styleUtils-536b017f.js');
require('./popupUtils-7a76fb7d.js');
require('./Queue-1713f2e9.js');
require('./GoTo-be01affb.js');
require('./accessibleHandler-652e5d90.js');
require('./vmEvent-9b257013.js');
require('./Viewpoint-bbe11330.js');
require('./mat2d-2d5fae3e.js');
require('./mat2df32-85bf8b84.js');
require('./mat2df64-e9760778.js');
require('./capabilities-76889198.js');
require('./originUtils-fc18d7d8.js');
require('./multiOriginJSONSupportUtils-13e8b6cf.js');
require('./Viewing-63d00d8f.js');
require('./TileInfo-83a1d8a2.js');
require('./saveUtils-a37d456e.js');
require('./resourceUtils-c2de819b.js');
require('./scaleUtils-5c377ab3.js');
require('./Thumbnail-7b462034.js');
require('./ElevationSampler-dbeef858.js');
require('./CameraSpace.glsl-44d7b3f4.js');
require('./RenderingContext-237f69ae.js');
require('./labelFormatUtils-c70b3fbf.js');
require('./vec4f32-284fd490.js');
require('./geometryServiceUtils-8e2c66dc.js');
require('./project-dab29fc8.js');
require('./LercDecoder-b90fa97a.js');
require('./VectorTile-5dc9d0a7.js');
require('./config-1b750faa.js');
require('./TiledDisplayObject-0701494f.js');
require('./DisplayObject-573912c8.js');
require('./TileKey-d800cfb2.js');
require('./rasterUtils-a4c646c4.js');
require('./EdgeProcessingWorker-c3368d81.js');
require('./hitTestSelectUtils-9a744d46.js');
require('./debugFlags-5e6b0151.js');

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
class e extends WorkerHandle.n{constructor(r){super("SceneLayerWorker","dracoDecompressPointCloudData",r,{hasInitialize:!0});}getTransferList(r){return [r.geometryBuffer]}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
const K=request.s$1.getLogger("esri.views.3d.layers.SceneLayerGraphicsView3D"),Z=SceneLayerView.i$1();let J=class extends(DefinitionExpressionSceneLayerView.p(PopupSceneLayerView.c(LayerView3D.p(SceneLayerView.o)))){constructor(){super(...arguments),this.type="scene-layer-graphics-3d",this._nodesAddedToStage=new Map,this.drapeSourceType=1,this._queryEngine=null,this._memCache=null,this._interactiveEditingSessions=new Map,this.loadedGraphics=new I3SAttributeOverrides.s,this.holeFilling="always",this.progressiveLoadFactor=1,this.supportsHeightUnitConversion=!0,this._coordinatesOutsideExtentErrors=0,this._maxCoordinatesOutsideExtentErrors=20;}initialize(){var e$1,t;const r=this.layer;this.addResolvingPromise(r.indexInfo),this._attributeOverrides=new I3SAttributeOverrides.f(this.layer,null==(e$1=this.view.resourceController)?void 0:e$1.memoryController),I3SUtil.Se(r,this.view.spatialReference,this.view.viewingMode),this.fieldsHelper=new SceneLayerView.c({layerView:this}),this.updatingHandles.add(r,"rangeInfos",(e=>this._rangeInfosChanged(e)),2),this.updatingHandles.add(r,"renderer",((e,t)=>this._rendererChange(e,t))),this.updatingHandles.add(this,"parsedDefinitionExpression",(()=>this._filterChange())),this.updatingHandles.add(this,"view.floors",(()=>this.graphics3d.filterVisibility.filterChanged())),this.handles.add(request.i$1(ColorMaterial.I,"I3S_TREE_SHOW_TILES",(e=>{if(e&&!this._treeDebugger){const e=this._controller.crsIndex;Promise.resolve().then(function () { return require('./I3STreeDebugger-97352294.js'); }).then((({I3STreeDebugger:t})=>{!this._treeDebugger&&ColorMaterial.I.I3S_TREE_SHOW_TILES&&(this._treeDebugger=new t({lv:this,view:this.view,nodeSR:e}));}));}else e||!this._treeDebugger||ColorMaterial.I.I3S_TREE_SHOW_TILES||(this._treeDebugger.destroy(),this._treeDebugger=null);}))),this._set("graphics3d",new Graphics3DFeatureLikeLayerView.v({owner:this,layer:r,preferredUpdatePolicy:0,scaleVisibilityEnabled:!0,filterVisibilityEnabled:!0,timeExtentVisibilityEnabled:!1,frustumVisibilityEnabled:!1,elevationAlignmentEnabled:!0,elevationFeatureExpressionEnabled:!1,suspendResumeExtentMode:"data",dataExtent:r.fullExtent,updateClippingExtent:e=>this._updateClippingExtent(e)})),null==(t=this.graphics3d.elevationAlignment)||t.events.on("invalidate-elevation",(e=>this._invalidateElevation(e))),this.supportsHeightUnitConversion&&(this._verticalScale=zscale.t("point",r.spatialReference,this.view.spatialReference)),this.addResolvingPromise(this.graphics3d.setup()),this._memCache=this.view.resourceController.memoryController.newCache(r.uid),this._controller=new I3SAttributeOverrides.K({layerView:this,scaleVisibilityEnabled:!1}),I3SUtil.X(this.layer.geometryDefinitions)&&(this._worker=new e((e=>this.view.resourceController.schedule(e)))),this.handles.add(this.layer.on("apply-edits",(e=>this.updatingHandles.addPromise(e.result)))),this.handles.add(this.layer.on("edits",(e=>this._handleEdits(e)))),this.when((()=>{this._queryEngine=new Graphics3DFeatureLikeLayerView.p({layerView:this,priority:Scheduler.f.FEATURE_QUERY_ENGINE}),this.updatingHandles.add(this,"maximumNumberOfFeatures",(e=>this._controller.featureTarget=e),2),this.updatingHandles.add(this,"suspended",(e=>{e&&this._removeAllNodeData();}));}));}destroy(){this._treeDebugger=request.l$3(this._treeDebugger),this._attributeOverrides=request.l$3(this._attributeOverrides),this._set("graphics3d",request.l$3(this.graphics3d)),this._controller=request.l$3(this._controller),this._queryEngine=request.l$3(this._queryEngine),this._worker=request.l$3(this._worker),this._memCache=request.l$3(this._memCache),this._nodesAddedToStage.clear(),this.fieldsHelper=request.l$3(this.fieldsHelper);}get requiredFields(){var e,t;return null!=(e=null==(t=this.fieldsHelper)?void 0:t.requiredFields)?e:[]}get maximumNumberOfFeatures(){const e=this.graphics3d&&this.graphics3d.graphicsCore&&this.graphics3d.graphicsCore.displayFeatureLimit;return e?e.maximumNumberOfFeatures:0}set maximumNumberOfFeatures(e){null!=e?(this._override("maximumNumberOfFeatures",e),this._controller.fixedFeatureTarget=!0):(this._clearOverride("maximumNumberOfFeatures"),this._controller.fixedFeatureTarget=!1);}get maximumNumberOfFeaturesExceeded(){return !this.suspended&&(!!this._controller&&!this._controller.leavesReached)}get hasM(){return !1}get hasZ(){return !0}notifyGraphicGeometryChanged(e){this.graphics3d.graphicsCore.notifyGraphicGeometryChanged(e);}notifyGraphicVisibilityChanged(e){this.graphics3d.graphicsCore.notifyGraphicVisibilityChanged(e);}async whenGraphicAttributes(e,t){return I3SUtil.ie(this.layer,e,this._getObjectIdField(),t,(()=>[...this._nodesAddedToStage.values()]))}getGraphicFromGraphicUid(e){if(!this.loadedGraphics)return null;const t=ColorMaterial.c$2(this.loadedGraphics.find((t=>t.uid===e)),this.layer),r=this._getObjectIdField();return t&&t.attributes&&t.attributes[r]?(t.layer=this.layer,t.sourceLayer=this.layer,t):null}whenGraphicBounds(e,t){return this.graphics3d.graphicsCore.whenGraphicBounds(e,t)}computeAttachmentOrigin(e,t){return this.graphics3d.graphicsCore.computeAttachmentOrigin(e,t)}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}isUpdating(){var e,t,r;return !!(null!=(e=this._controller)&&e.updating||null!=(t=this.graphics3d)&&t.updating||null!=(r=this.fieldsHelper)&&r.updating)}getRenderingInfo(e,t,r){const i=LayerView3D.a$1(e,{renderer:t,arcade:r});if(request.r(i)&&i.color){const e=i.color;e[0]=e[0]/255,e[1]=e[1]/255,e[2]=e[2]/255;}return i}async getRenderingInfoAsync(e,t,r,i){return LayerView3D.s$1(e,{renderer:t,arcade:r,...i})}get symbolUpdateType(){return this.graphics3d.graphicsCore.symbolUpdateType}highlight(e){return this.graphics3d.highlight(e,this.layer.objectIdField)}get updatePolicy(){return this.graphics3d.graphicsCore.effectiveUpdatePolicy}createInteractiveEditSession(e){return SceneLayerView.s(this.attributeEditingContext,e)}async extractBinaryPointData(e$1,t){const r={geometryBuffer:e$1.geometryBuffer};return request.t$1(this._worker)&&(this._worker=new e((e=>this.view.resourceController.schedule(e)))),this._worker.invoke(r,t).then((e=>{if(request.r(e)){return {positionData:e.positions,featureIds:e.featureIds}}throw new Error("Failed to decompress Draco point data")}))}checkExtent(e,t){e&&!request.e$12(e,t)&&(this._coordinatesOutsideExtentErrors<this._maxCoordinatesOutsideExtentErrors&&K.error("Service Error: Coordinates outside of layer extent"),this._coordinatesOutsideExtentErrors+1===this._maxCoordinatesOutsideExtentErrors&&K.error("Maximum number of errors reached. Further errors are ignored."),this._coordinatesOutsideExtentErrors++);}async addNode(e,t,r){if(!X(t)&&!$(t))return Promise.reject();if(this._nodesAddedToStage.has(e.index))return void K.error("I3S node "+e.id+" already added");const i=request.r(this.layer.fullExtent)?te(this.layer.fullExtent.clone(),.5):null,o=this._controller.crsVertex,a=[],n={graphics:null,featureIds:null,attributeInfo:t.attributeDataInfo,node:e};if(X(t)?await this._addNodeBinaryPointData(e,n,t,i,a,r):$(t)&&this._addNodeLegacyPointData(e,n,t,i,a),await this._attributeOverrides.apply(n.featureIds,t.attributeDataInfo,r),e.numFeatures=n.graphics.length,this._updateNodeMemory(e),ee(n),a.length>0&&(this.computeObb(e,a,o),this._controller.updateVisibility(e.index)),!this._controller.isGeometryVisible(e))return this._cacheNodeData(n),Promise.resolve();if(request.r(this._verticalScale))for(const s of n.graphics)this._verticalScale(s.geometry);return this._nodesAddedToStage.set(e.index,n),this.loadedGraphics.addMany(n.graphics),this._filterNode(n),this._treeDebugger&&this._treeDebugger.update(),Promise.resolve()}computeObb(e,t,r){const i=this._controller.crsIndex,s=i.isGeographic?this.view.renderSpatialReference:i;projection.xn(t,r,0,t,s,0,t.length/3);const o={data:t,size:3};e.serviceObb=arcgisWebscene_entry.H(o),i.isGeographic&&projection.gn(e.serviceObb.center,s,e.serviceObb.center,i);}isNodeLoaded(e){return this._nodesAddedToStage.has(e)}isNodeReloading(){return !1}updateNodeState(){}async _addNodeBinaryPointData(e,r,i,o,n,d){const l=await this.extractBinaryPointData(i,d);if(null==l)return Promise.reject();const c=this._getObjectIdField(),g=this._controller.crsVertex,m=this.view.spatialReference,y=this.graphics3d.graphicsCore,{positionData:f,featureIds:b}=l,v=3,E=f.length/v,x=new Array;for(let I=0;I<E;I++){const r=request.r(e.serviceObb)?e.serviceObb.center:[0,0,0],i=I*v,d=common.r(f[i+0],f[i+1],f[i+2]);mathUtils.u(d,d,r),e.serviceObb||n.push(d[0],d[1],d[2]),request.r(o)&&this.checkExtent(o,d);const l=b[I],E={};null!=l&&(E[c]=l);const w=null==l?Graphic.h.generateUID():l;projection.xn(d,g,0,ie,m,0,1);const S=dehydratedFeatures.v(ie[0],ie[1],ie[2],m),C=this.loadedGraphics.get(w);if(request.r(C))C.level<e.level&&(se.property="geometry",se.graphic=C,se.oldValue=request.e$2(C.geometry),se.newValue=S,C.geometry=S,y.graphicUpdateHandler(se)),x.push(C);else {const r=Graphic.h.generateUID();x.push({objectId:w,uid:r,geometry:S,attributes:E,visible:!0,level:e.level});}}r.graphics=x,r.featureIds=b;}_addNodeLegacyPointData(e,r,i,o,a){const n=this._getObjectIdField(),d=this._controller.crsVertex,l=this.view.spatialReference,h=[0,0,0],u=new Array,c=new Array;for(const g of i.pointData){const r=g.featureDataPosition,i=r.length,m=g.geometries&&g.geometries[0]||re[i],y=g.featureIds[0];if("points"!==m.params.type)continue;request.r(o)&&this.checkExtent(o,r);const f={};null!=y&&(f[n]=y);const b=null==y?Graphic.h.generateUID():y;let v;"Embedded"===m.type&&(v=m.params.vertexAttributes.position);for(let o=0;o<v.length;o+=i){for(let e=0;e<i;e++)h[e]=r[e]+v[o+e];const n=3===i;e.serviceObb||a.push(h[0],h[1],n?h[2]:0),projection.xn(h,d,0,ie,l,0,1);const u=dehydratedFeatures.v(ie[0],ie[1],n?ie[2]:void 0,l),g=this.loadedGraphics.get(b);request.r(g)?c.push(g):c.push({objectId:b,uid:Graphic.h.generateUID(),geometry:u,attributes:f,visible:!0});}u.push(y);}r.graphics=c,r.featureIds=u;}_updateNodeMemory(e){e.memory=4096+(request.r(e.numFeatures)?e.numFeatures*this.graphics3d.graphicsCore.usedMemoryPerGraphic:0);}_cacheNodeData(e){const t=e.graphics.reduce(((e,t)=>dehydratedFeatures.A(t)+e),512+8*e.featureIds.length+1024);this._memCache.put(this._getMemCacheKey(e.node),e,t);}_getMemCacheKey(e){return `${e.index}`}_removeAllNodeData(){this._nodesAddedToStage.forEach((e=>{if(e){const t=e.node;this._updateNodeMemory(t),this._cacheNodeData(e);}})),this._nodesAddedToStage.clear(),this._treeDebugger&&this._treeDebugger.update(),this.loadedGraphics.clear();}removeNode(e){const t=this._removeNodeStageData(e);t&&(this._updateNodeMemory(t.node),this._cacheNodeData(t));}_removeNodeStageData(e){const t=this._nodesAddedToStage.get(e);return t?(this.loadedGraphics.removeMany(t.graphics),this._nodesAddedToStage.delete(e),this._treeDebugger&&this._treeDebugger.update(),t):null}async loadCachedNodeData(e){return this._memCache.pop(this._getMemCacheKey(e))}async addCachedNodeData(e,t,r,i){if(!this._nodesAddedToStage.has(e.index))return this.loadedGraphics.addMany(t.graphics),this._nodesAddedToStage.set(e.index,t),this._updateNodeMemory(e),await this.updateAttributes(e.index,r,i),this._filterNode(t),this._treeDebugger&&this._treeDebugger.update(),Promise.resolve();K.error("I3S node "+e.id+" already added");}getLoadedNodeIds(){const e=[];return this._nodesAddedToStage.forEach((t=>e.push(t.node.id))),e.sort()}getVisibleNodes(){const e=new Array;return this._nodesAddedToStage.forEach((t=>e.push(t.node))),e}getLoadedNodeIndices(e){this._nodesAddedToStage.forEach(((t,r)=>e.push(r)));}getLoadedAttributes(e){const t=this._nodesAddedToStage.get(e);if(t&&request.r(t.attributeInfo))return t.attributeInfo.loadedAttributes}getAttributeData(e){const t=this._nodesAddedToStage.get(e);if(t&&request.r(t.attributeInfo))return t.attributeInfo.attributeData}setAttributeData(e,t){const r=this._nodesAddedToStage.get(e);r&&!request.t$1(r.attributeInfo)&&(r.attributeInfo.attributeData=t,this._attributeValuesChanged(r));}async updateAttributes(e,t,r){const i=this._nodesAddedToStage.get(e);i&&(await this._attributeOverrides.apply(i.featureIds,t,r),i.attributeInfo=t,this._attributeValuesChanged(i));}_attributeValuesChanged(e){if(ee(e),this._filterNode(e),this.graphics3d.graphicsCore.labelsEnabled){const t=e.graphics.map((e=>e.uid));this.graphics3d.graphicsCore.updateLabelingInfo(t);}}_updateClippingExtent(e){return this._controller&&this._controller.updateClippingArea(e),!1}_getObjectIdField(){return this.layer.objectIdField||"OBJECTID"}async _rendererChange(e,t){const{layer:{fieldsIndex:r}}=this,i=new Set;let s,o;e?(await e.collectRequiredFields(i,r),s=Array.from(i).sort()):s=[],i.clear(),t?(await t.collectRequiredFields(i,r),o=Array.from(i).sort()):o=[],s.length===o.length&&s.every(((e,t)=>s[t]===o[t]))||this._reloadAllNodes();}_rangeInfosChanged(e){null!=e&&e.length>0&&K.warn("Unsupported property: rangeInfos are currently only serialized to and from web scenes but do not affect rendering.");}_filterChange(){this._nodesAddedToStage.forEach((e=>this._filterNode(e)));}_reloadAllNodes(){this._removeAllNodeData(),this._controller&&this._controller.restartNodeLoading();}_filterNode(e){const t=this.parsedDefinitionExpression;for(const r of e.graphics){const e=r.visible;r.visible=!t||this._evaluateClause(t,r),e!==r.visible&&(se.graphic=r,se.property="visible",se.oldValue=e,se.newValue=r.visible,this.graphics3d.graphicsCore.graphicUpdateHandler(se));}}_invalidateElevation(e){const t=this._controller.crsIndex;projection.bn(e.extent,e.spatialReference,oe,t),this._controller.updateElevationChanged(oe,t);}createQuery(){const e={outFields:["*"],returnGeometry:!0,outSpatialReference:this.view.spatialReference};return request.r(this.filter)?this.filter.createQuery(e):new Query.b(e)}queryFeatures(e,t){return this._queryEngine.executeQuery(this._ensureQuery(e),null==t?void 0:t.signal)}queryObjectIds(e,t){return this._queryEngine.executeQueryForIds(this._ensureQuery(e),null==t?void 0:t.signal)}queryFeatureCount(e,t){return this._queryEngine.executeQueryForCount(this._ensureQuery(e),null==t?void 0:t.signal)}queryExtent(e,t){return this._queryEngine.executeQueryForExtent(this._ensureQuery(e),null==t?void 0:t.signal)}_ensureQuery(e){return this._addDefinitionExpressionToQuery(request.t$1(e)?this.createQuery():Query.b.from(e))}getUsedMemory(){const e=this.graphics3d&&this.graphics3d.graphicsCore;return e?e.usedMemory:0}getUnloadedMemory(){const e=this.graphics3d&&this.graphics3d.graphicsCore;return .8*((this._controller?this._controller.unloadedMemoryEstimate:0)+(e?e.unprocessedMemoryEstimate:0))}ignoresMemoryFactor(){return this._controller&&this._controller.fixedFeatureTarget}_handleEdits(e){SceneLayerView.i(this.attributeEditingContext,e);}get attributeEditingContext(){const e=this._getObjectIdField();return {sessions:this._interactiveEditingSessions,fieldsIndex:this.layer.fieldsIndex,objectIdField:e,forEachNode:e=>this._nodesAddedToStage.forEach((t=>e(t.node,t.featureIds))),attributeStorageInfo:this.i3slayer.attributeStorageInfo,attributeOverrides:this._attributeOverrides,getAttributeData:e=>this.getAttributeData(e),setAttributeData:(t,r,i)=>{this.setAttributeData(t,r);const o=this._nodesAddedToStage.get(t);if(request.r(i)){const t=this.loadedGraphics.get(i.attributes[e]);request.r(t)&&this.graphics3d.graphicsCore.recreateGraphics([t]);}else request.r(o)&&this.graphics3d.graphicsCore.recreateGraphics(o.graphics);},clearMemCache:()=>{}}}get performanceInfo(){const e={displayedNumberOfFeatures:this.loadedGraphics.length,maximumNumberOfFeatures:this.maximumNumberOfFeatures,totalNumberOfFeatures:-1,nodes:this._nodesAddedToStage.size,core:this.graphics3d.graphicsCore.performanceInfo};return this._controller&&this._controller.updateStats(e),e}get test(){return {controller:this._controller,numNodes:this._nodesAddedToStage.size,numFeatures:this.loadedGraphics.length}}};request.e([request.d()],J.prototype,"graphics3d",void 0),request.e([request.d({type:labelingInfo.y})],J.prototype,"filter",void 0),request.e([request.d()],J.prototype,"loadedGraphics",void 0),request.e([request.d({aliasOf:"layer"})],J.prototype,"i3slayer",void 0),request.e([request.d()],J.prototype,"_controller",void 0),request.e([request.d()],J.prototype,"updating",void 0),request.e([request.d()],J.prototype,"suspended",void 0),request.e([request.d()],J.prototype,"holeFilling",void 0),request.e([request.d(arcgisWebscene_entry.t)],J.prototype,"updatingProgress",void 0),request.e([request.d({aliasOf:"_controller.updatingProgress"})],J.prototype,"updatingProgressValue",void 0),request.e([request.d(Z.requiredFields)],J.prototype,"requiredFields",null),request.e([request.d(Z.availableFields)],J.prototype,"availableFields",void 0),request.e([request.d()],J.prototype,"fieldsHelper",void 0),request.e([request.d({type:Number})],J.prototype,"maximumNumberOfFeatures",null),request.e([request.d({readOnly:!0})],J.prototype,"maximumNumberOfFeaturesExceeded",null),request.e([request.d({readOnly:!0,aliasOf:"view.qualitySettings.sceneService.point.lodFactor"})],J.prototype,"lodFactor",void 0),request.e([request.d({readOnly:!0})],J.prototype,"hasM",null),request.e([request.d({readOnly:!0})],J.prototype,"hasZ",null),J=request.e([request.i("esri.views.3d.layers.SceneLayerGraphicsView3D")],J);const Y=J;function $(e){return "pointData"in e}function X(e){return "geometryBuffer"in e&&null!==e.geometryBuffer}function ee(e){const t=e.attributeInfo;for(let r=0;r<e.graphics.length;r++){const i=e.graphics[r];if(i.attributes||(i.attributes={}),request.r(t)&&request.r(t.loadedAttributes))for(const{name:e}of t.loadedAttributes)t.attributeData[e]&&(i.attributes[e]=I3SUtil.he(t.attributeData[e],r));}}function te(e,t){return e.xmin-=t,e.ymin-=t,e.xmax+=t,e.ymax+=t,e.hasZ&&(e.zmin-=t,e.zmax+=t),e.hasM&&(e.mmin-=t,e.mmax+=t),e}const re={2:{type:"Embedded",params:{type:"points",vertexAttributes:{position:[0,0]}}},3:{type:"Embedded",params:{type:"points",vertexAttributes:{position:[0,0,0]}}}},ie=common.n(),se={graphic:null,property:null,oldValue:null,newValue:null},oe=aaBoundingRect.u();

exports.default = Y;
