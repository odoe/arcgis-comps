'use strict';

const request = require('./messageBundle-8be88d04.js');
const geometry = require('./geometry-ef17530a.js');
const Graphic = require('./Graphic-0aff6059.js');
const GraphicsLayer = require('./GraphicsLayer-5076fd9b.js');
const SimpleLineSymbol = require('./symbols-29b793e5.js');
const SnappingVisualizer2D = require('./SnappingVisualizer2D-c536440c.js');
const drawUtils = require('./drawUtils-75b2078c.js');
const GraphicMover = require('./GraphicMover-3c510be7.js');
const arcgisEditor_entry = require('./arcgis-editor-90a28e34.js');
const settings = require('./settings-dc1b8ceb.js');
const screenUtils = require('./screenUtils-e9e44bb6.js');
const EditGeometryOperations = require('./EditGeometryOperations-10283cb0.js');
const SnappingContext = require('./SnappingContext-250d1404.js');
require('./index-fde8502c.js');
require('./PopupTemplate-a0b855f8.js');
require('./opacityUtils-f2e4b347.js');
require('./enumeration-f235fe07.js');
require('./Identifiable-a4f50f85.js');
require('./jsonUtils-b6068079.js');
require('./GraphicsCollection-d70ae8cb.js');
require('./Portal-8d16604d.js');
require('./HandleOwner-9c4c158c.js');
require('./reactiveUtils-ef5dccea.js');
require('./Layer-31cde361.js');
require('./BlendLayer-6a2ab430.js');
require('./colorUtils-e70dbab5.js');
require('./screenUtils-d911ae62.js');
require('./mat4-f68486bc.js');
require('./common-41a349f2.js');
require('./ScaleRangeLayer-5320a5ba.js');
require('./ElevationInfo-d3e3d64f.js');
require('./lengthUtils-179eaf12.js');
require('./unitUtils-083cb8d0.js');
require('./Symbol-f0556e23.js');
require('./Color-7d915caa.js');
require('./mathUtils-af6066f0.js');
require('./aaBoundingBox-c372701a.js');
require('./aaBoundingRect-56648c00.js');
require('./persistableUrlUtils-c611d652.js');
require('./vec2-d000a8cb.js');
require('./vec2f64-60b3c97e.js');
require('./GraphicManipulator-bf3071c5.js');
require('./projection-b19710fa.js');
require('./geodesicConstants-047d586a.js');
require('./LabelClass-4b91d60e.js');
require('./labelUtils-73814dda.js');
require('./defaultsJSON-0cdf7a99.js');
require('./jsonUtils-62d28b73.js');
require('./drapedUtils-2fa2770f.js');
require('./FeatureLayer-68e51b64.js');
require('./UniqueValueRenderer-1c485e9f.js');
require('./VisualVariablesMixin-a105fcfa.js');
require('./colorRamps-d0c2cb9d.js');
require('./ColorStop-ce63948c.js');
require('./sizeVariableUtils-9012516e.js');
require('./visualVariableUtils-1740874b.js');
require('./diffUtils-df69757f.js');
require('./styleUtils-2b475600.js');
require('./DictionaryRenderer-a0dce499.js');
require('./LRUCache-38fdf18d.js');
require('./MemCache-7f5503ec.js');
require('./jsonUtils-fc4080da.js');
require('./MultiOriginJSONSupport-77ac451b.js');
require('./Field-b92c6f4a.js');
require('./fieldType-32f95259.js');
require('./HeightModelInfo-06fd3d80.js');
require('./workers-bde9fe32.js');
require('./queryZScale-d48be112.js');
require('./zscale-25ef55f0.js');
require('./FeatureSet-8efc5965.js');
require('./APIKeyMixin-77c99036.js');
require('./ArcGISService-56d7a630.js');
require('./arcgisLayerUrl-5174d661.js');
require('./CustomParametersMixin-996a5732.js');
require('./labelingInfo-594911d5.js');
require('./TimeExtent-8b558884.js');
require('./Query-354911d3.js');
require('./OperationalLayer-853649aa.js');
require('./OrderedLayer-8690aaf5.js');
require('./PortalLayer-7556e594.js');
require('./asyncUtils-cd78b718.js');
require('./PortalItem-8bcd02f8.js');
require('./RefreshableLayer-487bd7b3.js');
require('./TemporalLayer-06f08bdd.js');
require('./TimeInfo-050c5617.js');
require('./FeatureType-d8b81062.js');
require('./fieldProperties-c9dd6469.js');
require('./FieldsIndex-664af19b.js');
require('./LayerFloorInfo-c56fa764.js');
require('./styleUtils-536b017f.js');
require('./TopFeaturesQuery-92caa731.js');
require('./popupUtils-7a76fb7d.js');
require('./InputField-f3d341ce.js');
require('./Heading-d7c5e432.js');
require('./vmEvent-9b257013.js');
require('./luxon-b6474344.js');
require('./_commonjsHelpers-1fbbf0eb.js');
require('./hitTestSelectUtils-9a744d46.js');
require('./layerViewUtils-96bae70b.js');
require('./geodesicUtils-4d3dae6f.js');
require('./geometry2dUtils-65eda69d.js');
require('./accessibleHandler-652e5d90.js');
require('./executeQueryJSON-3f84e897.js');
require('./utils-8a0a0870.js');
require('./query-0e394548.js');
require('./normalizeUtils-a793b472.js');
require('./pbfQueryUtils-49e071a8.js');
require('./pbf-dc87045b.js');
require('./OptimizedFeature-cd4fe3c6.js');
require('./OptimizedFeatureSet-b5737d2b.js');
require('./widget-b8f4aeaf.js');
require('./QueryTask-3b24eec5.js');
require('./featureConversionUtils-df21e951.js');
require('./Task-95a3fa39.js');
require('./utils-71e85012.js');
require('./ItemCache-149fdb6e.js');
require('./utils-fb318f28.js');
require('./Queue-1713f2e9.js');
require('./GoTo-be01affb.js');
require('./vec4f64-d3fa6cd2.js');
require('./plane-0816c6c9.js');
require('./sphere-ef7f801f.js');
require('./vectorStacks-f48a010a.js');
require('./quatf64-e7a7f39e.js');
require('./mat4f64-fc3339e5.js');
require('./PointSnappingHint-f5c433ac.js');

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
class R{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape-start";}}class j{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape";}}class H{constructor(e,t,i){this.graphic=e,this.mover=t,this.selected=i,this.type="reshape-stop";}}class A{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move-start";}}class T{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move";}}class U{constructor(e,t,i){this.mover=e,this.dx=t,this.dy=i,this.type="move-stop";}}class D{constructor(e){this.added=e,this.type="vertex-select";}}class F{constructor(e){this.removed=e,this.type="vertex-deselect";}}class z{constructor(e,t,i,s){this.added=e,this.graphic=t,this.oldGraphic=i,this.vertices=s,this.type="vertex-add";}}class L{constructor(e,t,i,s){this.removed=e,this.graphic=t,this.oldGraphic=i,this.vertices=s,this.type="vertex-remove";}}const P=settings.h.reshapeGraphics,K={vertices:{default:new SimpleLineSymbol.y({style:"circle",size:P.vertex.size,color:P.vertex.color,outline:{color:P.vertex.outlineColor,width:1}}),hover:new SimpleLineSymbol.y({style:"circle",size:P.vertex.hoverSize,color:P.vertex.hoverColor,outline:{color:P.vertex.hoverOutlineColor,width:1}}),selected:new SimpleLineSymbol.y({style:"circle",size:P.selected.size,color:P.selected.color,outline:{color:P.selected.outlineColor,width:1}})},midpoints:{default:new SimpleLineSymbol.y({style:"circle",size:P.midpoint.size,color:P.midpoint.color,outline:{color:P.midpoint.outlineColor,width:1}}),hover:new SimpleLineSymbol.y({style:"circle",size:P.midpoint.size,color:P.midpoint.color,outline:{color:P.midpoint.outlineColor,width:1}})}},N="esri.views.draw.support.Reshape",q=request.s$1.getLogger(N);let B=class extends request.n$2.EventedAccessor{constructor(e){super(e),this._activeOperationInfo=null,this._editGeometryOperations=null,this._handles=new request.u,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingTask=null,this._stagedVertex=null,this._viewHandles=new request.u,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.vertexGraphics=new request.S,this.layer=null,this.midpointGraphics=new request.S,this.midpointSymbol=new SimpleLineSymbol.y({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=[],this.snappingManager=null,this.type="reshape",this.view=null;}initialize(){this._setup(),this._handles.add([request.a(this,"view.ready",(()=>{const{layer:e,view:t}=this;arcgisEditor_entry.r$1(t,e),this._viewHandles.add([t.on("key-down",(e=>this._keyDownHandler(e)),screenUtils.u.TOOL)]);})),request.O(this,"graphic",(()=>this.refresh())),request.O(this,"layer",((e,t)=>{t&&(this._clearSelection(),this._resetGraphics(t)),this.refresh();})),request.O(this,"enableMidpoints",(()=>{this.refresh();}))]);}destroy(){var e;this._reset(),null==(e=this._mover)||e.destroy(),this._mover=null,this._handles=request.l$3(this._handles),this._viewHandles=request.l$3(this._viewHandles);}get state(){const e=!!this.get("view.ready"),t=!(!this.get("graphic")||!this.get("layer"));return e&&t?"active":e?"ready":"disabled"}set symbols(e){const{midpoints:t=K.midpoints,vertices:i=K.vertices}=e||{};this._set("symbols",{midpoints:t,vertices:i});}isUIGraphic(e){const t=[];return this.graphic&&t.push(this.graphic),t.length&&t.includes(e)}refresh(){this._reset(),this._setup();}reset(){this.graphic=null;}clearSelection(){this._clearSelection();}removeSelectedVertices(){this.selectedVertices.length&&this._removeVertices(this.selectedVertices);}_setup(){const{graphic:e,layer:t}=this;if(!t||!e||request.t$1(e.geometry))return;const i=e.geometry;"mesh"!==i.type&&"extent"!==i.type?(this._setupGraphics(),this._setupMover()):this._logGeometryTypeError();}_setUpGeometryHelper(){const e=this.graphic.geometry;if(request.t$1(e)||"mesh"===e.type||"extent"===e.type)return void this._logGeometryTypeError();const t="multipoint"===e.type?new geometry.m({paths:e.points,spatialReference:e.spatialReference}):e;this._editGeometryOperations=EditGeometryOperations.l.fromGeometry(t,2);}_saveSnappingContextForHandle(e,t){var i;this._snappingGraphicsLayer=new GraphicsLayer.h({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer),this._snappingContext=new SnappingContext.e({editGeometryOperations:this._editGeometryOperations,elevationInfo:{mode:"on-the-ground",offset:0},pointer:(null==(i=t.viewEvent)?void 0:i.pointerType)||"mouse",excludeFeature:this.graphic,visualizer:new SnappingVisualizer2D.h(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(e)});}_reset(){this._clearSelection(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default";}_resetSnappingStateVars(){request.r(this.snappingManager)&&this.snappingManager.doneSnapping(),request.r(this._snappingGraphicsLayer)&&(this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),this._editGeometryOperations=request.l$3(this._editGeometryOperations),this._snappingTask=request.a$5(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null;}_resetGraphics(e){this._removeMidpointGraphics(e),this._removeVertexGraphics(e),this._set("selectedVertices",[]);}_removeMidpointGraphics(e){const t=e||this.layer;t&&t.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach((e=>e.destroy())),this.midpointGraphics.removeAll();}_removeVertexGraphics(e){const t=e||this.layer;t&&t.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach((e=>e.destroy())),this.vertexGraphics.removeAll();}_getCoordinatesForUI(e){const t=geometry.t$1(e.clone());if("polygon"===e.type)for(const i of t){const e=i[i.length-1];i[0][0]===e[0]&&i[0][1]===e[1]&&i.length>2&&i.pop();}return t}_setupGraphics(){const e=this.graphic.geometry;if(request.r(e)&&("polyline"===e.type||"polygon"===e.type)){const t=this._getCoordinatesForUI(e);this.enableMidpoints&&this._setUpMidpointGraphics(t),this.enableVertices&&this._setUpVertexGraphics(t);}}_setUpMidpointGraphics(e){this._removeMidpointGraphics();const t=this._createMidpointGraphics(e);this.midpointGraphics.addMany(t),this.layer.addMany(t);}_setUpVertexGraphics(e){this._removeVertexGraphics();const t=this._createVertexGraphics(e);this.vertexGraphics.addMany(t),this._storeRelatedVertexIndices(),this.layer.addMany(t);}_createVertexGraphics(e){const{_graphicAttributes:i,symbols:s,view:{spatialReference:r}}=this,o=[];return null==e||e.forEach(((e,n)=>{e.forEach(((e,a)=>{var h;const[c,p]=e;o.push(new Graphic.h({geometry:new request.b$2({x:c,y:p,spatialReference:r}),symbol:null==s||null==(h=s.vertices)?void 0:h.default,attributes:{...i,pathIndex:n,pointIndex:a}}));}));})),o}_createMidpointGraphics(e){const{_graphicAttributes:i,symbols:s,view:{spatialReference:r}}=this,o=[];return null==e||e.forEach(((e,n)=>{e.forEach(((a,h)=>{const[c,p]=a,d=e[h+1]?h+1:0;if("polygon"===request.m$4(this.graphic.geometry,"type")||0!==d){const[a,l]=e[d],[m,v]=geometry.i$2([c,p],[a,l]);o.push(new Graphic.h({geometry:new request.b$2({x:m,y:v,spatialReference:r}),symbol:s.midpoints.default,attributes:{...i,pathIndex:n,pointIndexStart:h,pointIndexEnd:d}}));}}));})),o}_storeRelatedVertexIndices(){const e=this.vertexGraphics.items;if(!e)return;const t=e.map((({geometry:e})=>({x:e.x,y:e.y})));for(let i=0;i<t.length;i++){const s=[];for(let e=0;e<t.length;e++){if(i===e)continue;const r=t[i],o=t[e];r.x===o.x&&r.y===o.y&&s.push(e);}e[i].attributes.relatedGraphicIndices=s;}}_setupMover(){const{enableMovement:e,graphic:t,midpointGraphics:i,vertexGraphics:s,view:r}=this,o=request.m$4(t.geometry,"type"),n="point"===o||"multipoint"===o,a=s.concat(i).items;e&&a.push(t),this._mover=new GraphicMover['default']({enableMoveAllGraphics:!1,indicatorsEnabled:n,graphics:a,view:r,callbacks:{onGraphicClick:e=>this._onGraphicClickCallback(e),onGraphicMoveStart:e=>this._onGraphicMoveStartCallback(e),onGraphicMove:e=>this._onGraphicMoveCallback(e),onGraphicMoveStop:e=>this._onGraphicMoveStopCallback(e),onGraphicPointerOver:e=>this._onGraphicPointerOverCallback(e),onGraphicPointerOut:e=>this._onGraphicPointerOutCallback(e)}});}_onGraphicClickCallback(e){e.viewEvent.stopPropagation();const t=e.graphic;if(t===this.graphic)this.clearSelection(),this.emit("graphic-click",e),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(e);else if(this._isMidpoint(t)){if(2===e.viewEvent.button)return;const i=this.graphic.clone(),s=this._createVertexFromMidpoint(t);this.refresh(),this._emitVertexAddEvent([t],i,s);}else if(this._isVertex(t))if(e.viewEvent.stopPropagation(),2===e.viewEvent.button)this._removeVertices(t);else {e.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(t)?this._removeFromSelection(t,!0):this._addToSelection(t);}}_setUpOperation(e){const{graphic:t,dx:i,dy:s}=e,r=t===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(t,e),this._activeOperationInfo={target:this.graphic,mover:t,operationType:r?"move":"reshape",totalDx:i,totalDy:s};}_onGraphicMoveStartCallback(e){const t=e.graphic,{dx:i,dy:s}=e;if(t===this.graphic)return this._clearSelection(),this._resetGraphics(),this._setUpOperation(e),this._emitMoveStartEvent(i,s),void("point"===this._editGeometryOperations.data.type&&this._onHandleMove(t,i,s,e,(()=>this._emitMoveEvent(i,s))));if(!this.selectedVertices.includes(t)){if(this._clearSelection(),this._isMidpoint(t)){const e=this.graphic.clone(),i=this._createVertexFromMidpoint(t);this._emitVertexAddEvent([t],e,i);}this._addToSelection(t);}this._setUpOperation(e),this._emitReshapeStartEvent(t),this._onHandleMove(t,i,s,e,(()=>this._emitReshapeEvent(t)));}_onGraphicMoveCallback(e){const{graphic:t,dx:i,dy:s}=e;this._activeOperationInfo.totalDx+=i,this._activeOperationInfo.totalDy+=s;const{operationType:r}=this._activeOperationInfo;"move"===r?"point"===this._editGeometryOperations.data.type?this._onHandleMove(t,i,s,e,(()=>this._emitMoveEvent(i,s))):this._emitMoveEvent(i,s):this._onHandleMove(t,i,s,e,(()=>this._emitReshapeEvent(t)));}_onGraphicMoveStopCallback(e){const{graphic:t,dx:i,dy:s}=e;this._activeOperationInfo.totalDx+=i,this._activeOperationInfo.totalDy+=s,t===this.graphic?(this._emitMoveStopEvent(),this.refresh()):(this._onHandleMove(t,i,s,e,(()=>this._emitReshapeStopEvent(t))),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._isMidpoint(t)&&this.refresh());}_updateMidpointGraphicLocations(e){for(const t of this.midpointGraphics){const{pathIndex:i,pointIndexStart:s,pointIndexEnd:r}=t.attributes,[o,n]=e[i][s],[a,h]=e[i][r],[c,p]=geometry.i$2([o,n],[a,h]);t.geometry=new request.b$2({x:c,y:p,spatialReference:this.view.spatialReference});}}_getIndicesForVertexGraphic({attributes:e}){return [(null==e?void 0:e.pathIndex)||0,(null==e?void 0:e.pointIndex)||0]}_getVertexFromEditGeometry(e){const[t,i]=this._getIndicesForVertexGraphic(e);return this._editGeometryOperations.data.components[t].vertices[i]}_onHandleMove(e,t,i,s,r){if(request.a$5(this._snappingTask),!this._snappingContext)return;const o=this.view.toMap({x:s.x,y:s.y}),n="graphic-move-stop"===s.type;if(request.r(this.snappingManager)&&this.selectedVertices.length<2&&!n){const s=this.snappingManager;this._stagedVertex=s.update(o,this._snappingContext),this._syncGeometryAfterVertexMove(e,new request.b$2(this._stagedVertex),t,i,n),r(),this._snappingTask=request.F$1((async a=>{const h=await s.snap(o,this._snappingContext,a);h.valid&&(this._stagedVertex=h.apply(),this._syncGeometryAfterVertexMove(e,new request.b$2(this._stagedVertex),t,i,n),r());}));}else {const s=request.r(this._stagedVertex)?new request.b$2(this._stagedVertex):o;this._syncGeometryAfterVertexMove(e,s,t,i,n),r();}}async _syncGeometryAfterVertexMove(e,t,i,s,r=!1){const o=this._editGeometryOperations.data.geometry;if("point"===o.type)e.geometry=t;else {const{x:n,y:a}=t,[h,c]=this._getIndicesForVertexGraphic(e);let p=geometry.t$1(o);const l=p[h].length-1;p[h][c]=[n,a],"polygon"===o.type&&(0===c?p[h][l]=[n,a]:c===l&&(p[h][0]=[n,a])),this._isVertex(e)&&(p=this._moveRelatedCoordinates(p,e,n,a),p=this._moveSelectedHandleCoordinates(p,e,i,s,"polygon"===o.type),this._updateMidpointGraphicLocations(p)),this.graphic.geometry=o.clone();const d=this._getVertexFromEditGeometry(e),m=n-d.pos[0],v=a-d.pos[1];this._editGeometryOperations.moveVertices([d],m,v,0),r&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(e),t):e.geometry=t);}}_moveRelatedCoordinates(e,t,i,s){const{relatedGraphicIndices:r}=t.attributes;for(const o of r){const r=this.vertexGraphics.getItemAt(o),{pathIndex:n,pointIndex:a}=r.attributes;e[n][a]=[i,s],r.geometry=t.geometry;}return e}_moveSelectedHandleCoordinates(e,t,i,s,r){for(const o of this.selectedVertices)if(o!==t){const{pathIndex:t,pointIndex:n,relatedGraphicIndices:a}=o.attributes,h=drawUtils.s(o.geometry,i,s,this.view),c=e[t].length-1;e[t][n]=[h.x,h.y],o.geometry=h,r&&(0===n?e[t][c]=[h.x,h.y]:n===c&&(e[t][0]=[h.x,h.y]));for(const i of a){const t=this.vertexGraphics.getItemAt(i),{pathIndex:s,pointIndex:r}=t.attributes;e[s][r]=[h.x,h.y],t.geometry=h;}}return e}_onGraphicPointerOverCallback(e){const t=e.graphic;this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.hover),this._updateHoverCursor(t);}_onGraphicPointerOutCallback(e){const t=e.graphic;this._isVertex(t)&&!this._isSelected(t)&&(t.symbol=this.symbols.vertices.default),this.view.cursor="default";}_createVertexFromMidpoint(e){const{_graphicAttributes:t,graphic:i}=this,s=i.geometry;if(request.t$1(s)||"polygon"!==s.type&&"polyline"!==s.type)return [];const r=s.clone(),o=[],{pathIndex:n,pointIndexStart:a,pointIndexEnd:c}=e.attributes,{x:p,y:l}=e.geometry,d=0===c?a+1:c,m=geometry.t$1(r);return m[n].splice(d,0,[p,l]),e.attributes={...t,pathIndex:n,pointIndex:d,relatedGraphicIndices:[]},o.push({coordinates:m[n][d],componentIndex:n,vertexIndex:d}),this.graphic.geometry=r,o}_addToSelection(e){e instanceof Graphic.h&&(e=[e]);for(const t of e)t.symbol=this.symbols.vertices.selected;this._set("selectedVertices",this.selectedVertices.concat(e)),this._emitSelectEvent(e);}_removeFromSelection(e,i){const{vertices:s}=this.symbols,r=i?s.hover:s.default;e instanceof Graphic.h&&(e=[e]);for(const t of e)this.selectedVertices.splice(this.selectedVertices.indexOf(t),1),this._set("selectedVertices",this.selectedVertices),t.set("symbol",r);this._emitDeselectEvent(e);}_clearSelection(){if(this.selectedVertices.length){const e=this.selectedVertices;for(const t of this.selectedVertices)t.set("symbol",this.symbols.vertices.default);this._set("selectedVertices",[]),this._emitDeselectEvent(e);}}_keyDownHandler(e){arcgisEditor_entry.e$2.delete.includes(e.key)&&!e.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices);}_removeVertices(e){const i=this.graphic.geometry;if(request.t$1(i)||"polygon"!==i.type&&"polyline"!==i.type)return;if("polygon"===i.type&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;e instanceof Graphic.h&&(e=[e]);const s=this.graphic.clone(),r=i.clone();let o=geometry.t$1(r);const n=[];e instanceof Graphic.h&&(e=[e]);for(const t of e){const{x:e,y:i}=t.geometry;for(let t=0;t<o.length;t++){const s=o[t];for(let r=0;r<s.length;r++){const[a,h]=s[r];e===a&&i===h&&(n.push({coordinates:o[t][r],componentIndex:t,vertexIndex:r}),o[t].splice(Number(r),1));}}}if("polygon"===r.type)o=o.filter((e=>{if(e.length<2)return !1;const[t,i]=e[0],[s,r]=e[e.length-1];return (2!==e.length||t!==s||i!==r)&&(t===s&&i===r||e.push(e[0]),!0)})),r.rings=o;else {for(const e of o)1===e.length&&o.splice(o.indexOf(e),1);r.paths=o;}this.graphic.geometry=r,this.refresh(),this._emitVertexRemoveEvent(e,s,n);}_isVertex(e){return this.vertexGraphics.includes(e)}_isSelected(e){return this._isVertex(e)&&this.selectedVertices.includes(e)}_isMidpoint(e){return this.midpointGraphics.includes(e)}_updateHoverCursor(e){this.view.cursor=this._isMidpoint(e)?"copy":"move";}_emitMoveStartEvent(e,t){const i=new A(this.graphic,e,t);this.emit("move-start",i),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(i);}_emitMoveEvent(e,t){const i=new T(this.graphic,e,t);this.emit("move",i),this.callbacks.onMove&&this.callbacks.onMove(i);}_emitMoveStopEvent(){const{totalDx:e,totalDy:t}=this._activeOperationInfo,i=new U(this.graphic,e,t);this.emit("move-stop",i),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(i);}_emitReshapeStartEvent(e){const t=new R(this.graphic,e,this.selectedVertices);this.emit("reshape-start",t),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(t);}_emitReshapeEvent(e){const t=new j(this.graphic,e,this.selectedVertices);this.emit("reshape",t),this.callbacks.onReshape&&this.callbacks.onReshape(t);}_emitReshapeStopEvent(e){const t=new H(this.graphic,e,this.selectedVertices);this.emit("reshape-stop",t),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(t);}_emitSelectEvent(e){const t=new D(e);this.emit("select",t),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(t);}_emitDeselectEvent(e){const t=new F(e);this.emit("deselect",t),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(t);}_emitVertexAddEvent(e,t,i){const s=new z(e,this.graphic,t,i);this.emit("vertex-add",s),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(s);}_emitVertexRemoveEvent(e,t,i){const s=new L(e,this.graphic,t,i);this.emit("vertex-remove",s),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(s);}_logGeometryTypeError(){q.error(new request.s("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."));}};request.e([request.d()],B.prototype,"callbacks",void 0),request.e([request.d()],B.prototype,"enableMidpoints",void 0),request.e([request.d()],B.prototype,"enableMovement",void 0),request.e([request.d()],B.prototype,"enableVertices",void 0),request.e([request.d()],B.prototype,"graphic",void 0),request.e([request.d({readOnly:!0})],B.prototype,"vertexGraphics",void 0),request.e([request.d()],B.prototype,"layer",void 0),request.e([request.d({readOnly:!0})],B.prototype,"midpointGraphics",void 0),request.e([request.d()],B.prototype,"midpointSymbol",void 0),request.e([request.d({readOnly:!0})],B.prototype,"selectedVertices",void 0),request.e([request.d()],B.prototype,"snappingManager",void 0),request.e([request.d({readOnly:!0})],B.prototype,"state",null),request.e([request.d({value:K})],B.prototype,"symbols",null),request.e([request.d({readOnly:!0})],B.prototype,"type",void 0),request.e([request.d()],B.prototype,"view",void 0),B=request.e([request.i(N)],B);const J=B;

exports.default = J;
