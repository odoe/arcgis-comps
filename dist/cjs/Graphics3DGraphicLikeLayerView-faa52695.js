'use strict';

const request = require('./messageBundle-8be88d04.js');
const Graphic = require('./Graphic-0aff6059.js');
const diffUtils = require('./diffUtils-df69757f.js');
const Layer = require('./Layer-31cde361.js');
const ColorMaterial = require('./ColorMaterial-61b9182b.js');
const Query = require('./Query-354911d3.js');
const Graphics3DScaleVisibility = require('./Graphics3DScaleVisibility-7783d850.js');
const Graphics3DObjectStates = require('./Graphics3DObjectStates-d741bf09.js');
const HandleOwner = require('./HandleOwner-9c4c158c.js');

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
let v=class extends request.p{constructor(t){super(t),this.graphicsCore=null,this.elevationAlignment=new Graphics3DObjectStates.d,this.watchUpdatingTracking=new HandleOwner.l,this.handles=new request.u,this.suspendResumeExtent=null;}normalizeCtorArgs(t){let e=null;t.scaleVisibilityEnabled&&(delete(t={...t}).scaleVisibilityEnabled,e=new Graphics3DScaleVisibility.y);const i=new Graphics3DScaleVisibility.Ie({owner:t.owner,layer:t.layer,preferredUpdatePolicy:1,graphicSymbolSupported:!0});return {...t,graphicsCore:i,scaleVisibility:e}}initialize(){const t=this.scaleVisibility;request.r(t)&&"minScale"in this.layer&&this.watchUpdatingTracking.add(this.layer,"scaleRangeId",(()=>t.layerMinMaxScaleChangeHandler())),"elevationInfo"in this.layer&&this.watchUpdatingTracking.add(this.layer,"elevationInfo",((t,e)=>{diffUtils.m(t,e)&&this.watchUpdatingTracking.addPromise(this.graphicsCore.elevationInfoChange());}));}async setup(){const t=(t,e,i)=>this.graphicsCore.spatialIndex.queryGraphicUIDsInExtent(t,e,i);if(this.elevationAlignment.setup(this.owner,t,this.graphicsCore,this.view.elevationProvider),request.r(this.scaleVisibility)&&"minScale"in this.layer){const e=this.owner.view.basemapTerrain;this.scaleVisibility.setup(this.owner,this.layer,t,this.graphicsCore,e);}this._set("objectStates",new Graphics3DObjectStates.s(this.graphicsCore));try{await this.graphicsCore.setup({elevationAlignment:this.elevationAlignment,scaleVisibility:this.scaleVisibility,objectStates:this.objectStates});}catch(e){if(request.d$1(e))return;throw e}this.destroyed||(this.handles.add(this.view.watch("clippingArea",(()=>this.updateClippingExtent()),!0)),this.updateClippingExtent(),this.setupSuspendResumeExtent(),this.graphicsCore.startCreateGraphics());}destroy(){this.handles=request.l$3(this.handles),this.watchUpdatingTracking.destroy(),this._set("elevationAlignment",request.l$3(this.elevationAlignment)),this._set("scaleVisibility",request.l$3(this.scaleVisibility)),this._set("objectStates",request.l$3(this.objectStates)),this._set("graphicsCore",request.l$3(this.graphicsCore));}get suspended(){return !(!request.r(this.scaleVisibility)||!this.scaleVisibility.suspended)}get updating(){var t,e;return !!(null!=(t=this.graphicsCore)&&t.updating||request.r(this.scaleVisibility)&&this.scaleVisibility.updating||null!=(e=this.watchUpdatingTracking)&&e.updating)}getGraphicFromGraphicUid(t){if(this.owner.loadedGraphics){const e=this.owner.loadedGraphics.find((e=>e.uid===t));if(e){const t=this.layer instanceof Layer.b?this.layer:null;return ColorMaterial.c$2(e,t)}}}whenGraphicBounds(t,e){return this.graphicsCore?this.graphicsCore.whenGraphicBounds(t,e):Promise.reject()}computeAttachmentOrigin(t,e){return this.graphicsCore?this.graphicsCore.computeAttachmentOrigin(t,e):null}getSymbolLayerSize(t,e){return this.graphicsCore?this.graphicsCore.getSymbolLayerSize(t,e):null}maskOccludee(t){const{set:e,handle:i}=this.objectStates.acquireSet(1,null);return this.objectStates.setUid(e,t.uid),i}highlight(t){if(t instanceof Query.b)return x;if("number"==typeof t)return this.highlight([t]);if(t instanceof Graphic.h)return this.highlight([t]);if(t instanceof request.S&&(t=t.toArray()),Array.isArray(t)&&t.length>0){if(t[0]instanceof Graphic.h){const e=t.map((t=>t.uid)),{set:i,handle:s}=this.objectStates.acquireSet(0,null);return this.objectStates.setUids(i,e),s}if("number"==typeof t[0]){const e=t,{set:i,handle:s}=this.objectStates.acquireSet(0,null);return this.objectStates.setObjectIds(i,e),s}}return x}updateClippingExtent(){const t=this.view.clippingArea;this.graphicsCore.setClippingExtent(t,this.view.spatialReference)&&this.graphicsCore.recreateAllGraphics();}updateSuspendResumeExtent(){request.t$1(this.scaleVisibility)||(this.suspendResumeExtent=ColorMaterial.F(this.graphicsCore.computedExtent,this.suspendResumeExtent,ColorMaterial.r$6,this.graphicsCore.extentPadding),this.scaleVisibility.setExtent(this.suspendResumeExtent));}setupSuspendResumeExtent(){request.t$1(this.scaleVisibility)||(request.i$1(this.graphicsCore,"computedExtent",(t=>this.updateSuspendResumeExtent()),!0),this.graphicsCore.watch("extentPadding",(t=>this.updateSuspendResumeExtent())));}};request.e([request.d({constructOnly:!0})],v.prototype,"owner",void 0),request.e([request.d({constructOnly:!0})],v.prototype,"layer",void 0),request.e([request.d({readOnly:!0,aliasOf:"owner.view"})],v.prototype,"view",void 0),request.e([request.d({constructOnly:!0})],v.prototype,"graphicsCore",void 0),request.e([request.d({constructOnly:!0})],v.prototype,"scaleVisibility",void 0),request.e([request.d({readOnly:!0})],v.prototype,"elevationAlignment",void 0),request.e([request.d({readOnly:!0})],v.prototype,"objectStates",void 0),request.e([request.d({readOnly:!0})],v.prototype,"watchUpdatingTracking",void 0),request.e([request.d({readOnly:!0})],v.prototype,"suspended",null),request.e([request.d({readOnly:!0})],v.prototype,"updating",null),v=request.e([request.i("esri.views.3d.layers.graphics.Graphics3DGraphicLikeLayerView")],v);const x={remove(){},pause(){},resume(){}},E=v;

exports.E = E;
